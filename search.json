[{"path":"index.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":"Ce livre vise à servir de support à des enseignements auprès d’étudiants qui découvrent les analyses statistiques en même temps que le langage de programmation R. Ce livre n’est donc pas dédié exclusivement aux statistiques, ni exclusivement dédié à R. D’autres ouvrages proposent des contenus plus spécialisés, et donc plus poussés, et c’est vers ces ouvrages qu’il convient d’aller pour davantage maîtriser les fondamentaux des statistiques ou toutes les subtilités du langage R.Bien que le langage R puisse être utilisé via le logiciel R en tant que tel, les procédures décrites dans ce livre supposent que l’utilisation du logiciel R s’effectue en réalité à l’aide de l’environnement proposé par le logiciel RStudio, qui est plus confortable en matière d’utilisation que l’interface initialement associée au logiciel R. Que cela soit via l’interface de base associée au logiciel R ou via l’environnement proposé par RStudio, l’utilisation du langage R pour obtenir le résultat d’une analyse nécessite d’écrire des lignes de code. Si cela peut s’avérer plus complexe et/ou fastidieux à utiliser au départ qu’un logiciel classique où il suffit de cliquer sur des boutons pour obtenir le résultat de l’analyse, cela vaut la peine de prendre le temps d’apprendre à programmer avec R (et préférentiellement via RStudio), au moins pour les raisons suivantes : les logiciels R et RStudio sont en accès libre sur internet ; il existe de nombreuses aides documentaires, notamment sur internet, qui permettent de programmer n’importe quelle analyse ou manipulation de données, aussi sophistiquée soit elle ; il est possible de conserver les lignes de code pour pouvoir refaire plus tard les analyses, ou pour pouvoir appliquer ces lignes de code à d’autres données, ou encore pour partager ces lignes de code avec d’autres personnes. De par sa gratuité et sa capacité à permettre le partage des analyses réalisées, R et RStudio sont ainsi une très bonne option pour embrasser la tendance actuelle, encore timide, de l’open science, consistant à permettre à tout un chacun de savoir ce qui été fait en matière d’analyses et à pouvoir reproduire ces analyses. Enfin, le langage R, notamment via l’utilisation de RStudio, permet de faire bien plus que des analyses de données (e.g., automatisation d’analyses, développement d’applications web, construction de sites internet et de curriculum vitae, etc.), ce qui en fait un outil de travail polyvalent et donc particulièrement intéressant.L’appropriation du contenu de ce livre suppose une lecture relativement linéaire des chapitres, du moins en vue de comprendre comment utiliser le langage R. Plusieurs exemples de code, en particulier pour la conception de graphiques, utilisent ce qu’appelle des packages qui sont à télécharger et à installer sur l’ordinateur, puis à charger lorsque le logiciel est ouvert. Une fois que les consignes d’installation et de chargement de ces packages ont été explicitement données au cours d’un chapitre, leur utilisation dans le chapitre en cours et dans les chapitres suivants suppose implicitement que ces packages ont été chargés et sont donc prêts à être utilisés.Dans ce livre, les exemples de code apparaissent dans des zones grisées, et les résultats qui pourraient apparaître à l’écran dans RStudio une fois le code activé sont précédés d’un double dièse (##). Par moment, les noms des fonctions sont écrits à la suite des noms des packages dont elles dépendent, comme ceci : package::fonction().Une version PDF de ce livre est disponible en ligne ici.1Ce livre, qui est en cours d’élaboration, est mis à disposition selon les termes de la Licence Creative Commons Attribution - Pas d’Utilisation Commerciale - Partage dans les Mêmes Conditions 4.0 International.","code":""},{"path":"prérequis.html","id":"prérequis","chapter":"Chapitre 1 Prérequis","heading":"Chapitre 1 Prérequis","text":"","code":""},{"path":"prérequis.html","id":"installation-de-r-et-rstudio","chapter":"Chapitre 1 Prérequis","heading":"1.1 Installation de R et RStudio","text":"R et RStudio sont deux logiciels en libre accès sur internet. Le logiciel R peut être utilisé indépendamment de l’utilisation du logiciel RStudio. En revanche, l’utilisation du logiciel RStudio requiert au préalable l’installation du logiciel R. En effet, RStudio est un logiciel qui permet d’utiliser les fonctionnalités de R tout en proposant une interface d’utilisation plus agréable et fonctionnelle que l’interface à l’origine proposée pour le logiciel R, qui est très basique. Les explications présentées au cours de ce document considèrent que l’utilisateur fonctionne avec RStudio.","code":""},{"path":"prérequis.html","id":"installer-r-sur-windows","chapter":"Chapitre 1 Prérequis","heading":"1.1.1 Installer R sur WINDOWS","text":"Aller sur le site https://cran.rstudio.com.Sur la page web qui s’affiche, l’encart du haut Download Install R montre les différents liens de téléchargement possibles selon le système d’exploitation utilisé. Cliquer sur le lien Download R Windows.Dans la nouvelle fenêtre qui vient de s’ouvrir, cliquer sur install R first time.Dans la nouvelle fenêtre qui vient de s’ouvrir, cliquer sur le premier lien en haut de la page : Download R X.X.X. Windows. Exécuter le fichier s’il est proposé de le faire. Si ce n’est pas le cas, il est probable que le téléchargement du fichier ait été lancé automatiquement. Retrouver le fichier ainsi téléchargé sur le PC (une fois son enregistrement terminé), puis exécuter le fichier.Suivre la procédure d’installation par défaut en cliquant à chaque fois sur Suivant.Une fois l’installation terminée, double-cliquer sur l’icône du bureau (R x64 X.X.X) pour vérifier que l’ouverture du logiciel R s’effectue correctement.","code":""},{"path":"prérequis.html","id":"installer-r-sur-mac","chapter":"Chapitre 1 Prérequis","heading":"1.1.2 Installer R sur MAC","text":"Aller sur le site https://cran.rstudio.com.Sur la page web qui s’affiche, l’encart du haut Download Install R montre les différents liens de téléchargement possibles selon le système d’exploitation utilisé. Cliquer sur le lien Download R (Mac) OS X.Dans la nouvelle fenêtre qui s’ouvre, cliquer sur le lien qui correspond à votre version OS X (le clic entraînera le début du téléchargement du fichier).Sur le Mac, chercher dans le dossier Téléchargements le fichier téléchargé.Double-cliquer sur le fichier téléchargé pour lancer l’installation du logiciel R.Suivre la procédure par défaut et terminer l’installation.Lorsque l’installation est terminée, aller dans le dossier Applications du Mac pour rechercher le logiciel R. Double-cliquer sur l’icône pour ouvrir le logiciel et vérifier que l’ouverture se déroule correctement.","code":""},{"path":"prérequis.html","id":"installer-rstudio-sur-windows-ou-mac","chapter":"Chapitre 1 Prérequis","heading":"1.1.3 Installer RStudio sur WINDOWS ou MAC","text":"Aller sur le site https://www.rstudio.com.En haut de la page d’accueil, mettre le curseur de la souris sur Products, puis, dans le menu déroulant qui apparaît, cliquer sur RStudio.Dans la nouvelle fenêtre qui vient de s’ouvrir, faire défiler la page vers le bas jusqu’à voir apparaître l’option de téléchargement DOWNLOAD RSTUDIO DESKTOP, puis cliquer dessus.Dans la nouvelle fenêtre qui vient de s’ouvrir, faire défiler la page vers le bas puis cliquer sur l’option DOWNLOAD dans la colonne dédiée au téléchargement de RStudio Desktop. Cliquer alors sur le lien associé au système d’exploitation utilisé.Sur WINDOWS : Exécuter le fichier s’il est proposé de le faire. Si le clic entraîne automatiquement le téléchargement du fichier, retrouver alors ce fichier sur le PC (une fois son enregistrement terminé), puis exécuter le fichier et suivre la procédure d’installation par défaut. Une fois le logiciel installé, retrouver le fichier d’exécution du logiciel sur le PC (chemin d’accès possible : Ordinateur > Windows (C:) > Programmes > RStudio > bin > rstudio.exe). Créer un raccourci pour le fichier rstudio.exe (clic droit sur le fichier > Créer un raccourci) et mettre le raccourci sur le bureau du PC. Double-cliquer sur l’icône RStudio afin de vérifier si l’ouverture s’effectue correctement.Sur MAC : Le téléchargement débute lorsque vous cliquez sur le lien. Une fois le téléchargement terminé, sur votre MAC, réaliser l’installation en double-cliquant sur le fichier téléchargé et en suivant la procédure indiquée. Une fois l’installation terminée, aller dans le dossier Applications du MAC et double-cliquer sur l’icône de RStudio pour vérifier si le logiciel s’ouvre correctement.","code":""},{"path":"prérequis.html","id":"prise-en-main-de-rstudio","chapter":"Chapitre 1 Prérequis","heading":"1.2 Prise en main de RStudio","text":"Basiquement, RStudio s’utilise de la manière suivante : écrit une instruction (.e., une ligne de code) dans une fenêtre, lance cette instruction, et le logiciel nous donne le résultat, qu’il s’agisse d’un calcul, d’un graphique, d’une modification d’un jeu de données, etc. Quand ouvre RStudio pour la première fois, la fenêtre principale qui se présente est la Console. Cette fenêtre permet d’y écrire des lignes de code et de les lancer en appuyant sur la touche Entrée. Lorsque l’souhaite conserver les lignes de code que l’écrites, ou que l’souhaite écrire des lignes de code sans forcément les lancer, il est possible d’utiliser une fenêtre Script (chemin d’accès : File > New File > R Script). Pour lancer les lignes de code qui sont écrites dans une fenêtre de script, il suffit de se placer n’importe où sur la ligne de code et de cliquer sur l’icône Run du logiciel (raccourci : Ctrl + Entrée). Une fois le code activé, celui-ci est montré dans la Console, et selon la nature de la commande, le résultat peut apparaître lui aussi dans la Console ou dans l’un des encarts disposés par défaut à droite de l’écran, selon qu’il s’agisse notamment d’un nouvel objet (e.g., une variable), d’une demande d’aide, ou de la création d’un graphique.","code":""},{"path":"prérequis.html","id":"manipuler-des-objets-valeurs-vecteurs-et-tableaux-de-données","chapter":"Chapitre 1 Prérequis","heading":"1.2.1 Manipuler des objets (valeurs, vecteurs, et tableaux de données)","text":"R permet tout d’abord d’effectuer des opérations simples avec des nombres, telles que des additions avec le symbole +, des soustractions avec le symbole -, des multiplications avec le symbole *, des divisions avec le symbole /, des racines carrées avec la fonction sqrt(), ou encore des élévations à la puissance avec le symbole ^.De manière plus élaborée, R permet aussi de créer des vecteurs (.e., des suites de nombres), notamment grâce à la fonction c(), et de les manipuler avec différentes sortes d’opérations. Lorsqu’une opération ou une série d’opérations est appliquée à un vecteur, chaque valeur du vecteur subit les opérations spécifiées. Dans l’exemple ci-dessous, voit par exemple que chaque valeur du vecteur été multipliée par 2 et s’est vue ajouter la valeur 3.Si des vecteurs peuvent contenir des nombres, ils peuvent également contenir des caractères, tels que de simples lettres ou des mots, ces vecteurs ne pouvant cependant pas, par nature, subir des opérations mathématiques. Pour pouvoir être crées, les caractères doivent être écrits à l’intérieur du vecteur avec des guillemets (\" \").De manière encore plus élaborée, R permet de créer des tableaux de données à partir de vecteurs à l’aide de la fonction data.frame(). Dans l’exemple ci-dessous, les noms x, y, et z, marqués à gauche du signe =, sont les noms des vecteurs que contiendra le tableau de données. À droite du signe =, retrouve la fonction c() qui permet de créer un vecteur avec des valeurs à l’intérieur.","code":"\n(9 + 3 - 5) * 5 / 2 + sqrt(9) ^ 2## [1] 26.5\nc(0, 1, 2, 3, 4, 5) * 2 + 3## [1]  3  5  7  9 11 13\nc(\"a\", \"b\", \"c\")## [1] \"a\" \"b\" \"c\"\nc(\"Pierre\", \"Marie\", \"Jean\")## [1] \"Pierre\" \"Marie\"  \"Jean\"\ndata.frame(x = c(0, 1, 2, 3), \n           y = c(3, 5, 7, 9), \n           z = c(\"a\", \"b\", \"c\", \"d\"))##   x y z\n## 1 0 3 a\n## 2 1 5 b\n## 3 2 7 c\n## 4 3 9 d"},{"path":"prérequis.html","id":"manipuler-des-objets-via-des-noms","chapter":"Chapitre 1 Prérequis","heading":"1.2.2 Manipuler des objets via des noms","text":"L’une des particularités de R, c’est de permettre d’associer des objets (e.g., des valeurs, des vecteurs, ou encore des tableaux de données) à des noms. Pour ce faire, R utilise la fonction d’assignation <-. Cette fonction s’utilise en écrivant à droite de la flèche l’objet à créer (ou qui est déjà crée), et en écrivant à gauche de la flèche le nom auquel veut que l’objet soit associé (Attention : Toujours utiliser seulement des caractères alphanumériques et des points . ou des tirets du bas _ pour écrire un nom ; ne pas commencer par un chiffre ; avoir à l’esprit que R est sensible à la casse, ce qui veut dire qu’un nom commençant par une majuscule sera un nom différent de celui qui les mêmes lettres mais qui commence par une minuscule.) L’utilisation de noms associés à des objets permet de grandement faciliter les analyses par la suite. Lorsqu’réalise une assignation, il est possible de voir le nouveau nom et l’objet associé dans la fenêtre Environnement de RStudio. Lorsqu’lance le code permettant d’assigner un objet à un nom, R ne montre pas le contenu de l’objet. Pour le voir, il faut écrire le nom associé à l’objet dans une ligne de code et lancer la commande.Il est donc possible d’associer à un nom un objet qui serait une valeur numérique…… ou encore une succession de caractères …… ou encore un vecteur …… et même un tableau de données, qui aurait été soit conçu à la main, soit conçu à partir d’objets de type vecteurs qui auraient été crées auparavant, comme ci-dessous. À noter que les vecteurs doivent doivent contenir le même nombre de valeurs pour pouvoir être combinés dans un tableau de données avec la fonction data.frame().Lorsqu’un objet de type tableau de données est assigné à un nom, il est possible d’afficher le contenu d’une seule colonne de ce tableau à partir du nom associé au tableau, du symbole $, et du titre de la colonne désirée.Une fois que des objets sont liés à des noms, il est possible, comme montré initialement avec des valeurs, d’utiliser ces noms pour réaliser des opérations. Par exemple, via des noms, peut manipuler des objets contenant simplement une valeur numérique…ou alors des objets contenant un vecteur …ou encore des objets contenant un tableau de données, en créant par exemple une variable à partir d’autres variables du tableau.Lorsque plusieurs objets ont été assignés à des noms, il est possible de vouloir supprimer certaines assignations, par exemple en raison du fait qu’un objet aurait été assigné par erreur. Pour supprimer une assignation, il est possible d’utiliser la fonction rm(). L’instruction rm(list = ls()) supprime toutes les assignations qui ont été réalisées auparavant.","code":"\na <- 9\na## [1] 9\nPrenom <- \"Pierre\"\nPrenom## [1] \"Pierre\"\nTaille <- c(178, 191, 178, 182, 167, 151)\nTaille## [1] 178 191 178 182 167 151\nPoids <- c(60, 89, 92, 67, 80, 70)\nPoids## [1] 60 89 92 67 80 70\nSexe <- c(\"M\", \"M\", \"F\", \"F\", \"M\", \"F\")\nSexe## [1] \"M\" \"M\" \"F\" \"F\" \"M\" \"F\"\ndf <- data.frame(Taille, Poids, Sexe)\ndf##   Taille Poids Sexe\n## 1    178    60    M\n## 2    191    89    M\n## 3    178    92    F\n## 4    182    67    F\n## 5    167    80    M\n## 6    151    70    F\ndf$Taille## [1] 178 191 178 182 167 151\na <- 7\nb <- 3\nc <- 2\n(a + b) / c## [1] 5\nvec1 <- c(0, 2, 4, 6, 8)\nvec2 <- c(1, 4, 5, 9, 0)\nvec1 * 10## [1]  0 20 40 60 80\nvec1 * vec2## [1]  0  8 20 54  0\ndf$IMC <- df$Poids / (df$Taille/100) ^ 2\ndf##   Taille Poids Sexe      IMC\n## 1    178    60    M 18.93700\n## 2    191    89    M 24.39626\n## 3    178    92    F 29.03674\n## 4    182    67    F 20.22703\n## 5    167    80    M 28.68514\n## 6    151    70    F 30.70041\nrm(vec1)"},{"path":"prérequis.html","id":"utiliser-des-fonctions","chapter":"Chapitre 1 Prérequis","heading":"1.2.3 Utiliser des fonctions","text":"Dans les exemples de code précédents, nous avons utilisé plusieurs fonctions : la fonction sqrt(), la fonction c(), la fonction data.frame(), et la fonction rm(). Par la suite, nous serons amenés à voir comment l’crée une fonction et comment l’arrive finalement à n’avoir qu’une expression suivie de parenthèses à utiliser pour faire un ensemble d’actions automatiquement. Mais avant cela, il est important de savoir globalement comment une fonction s’utilise. Cela est important car il est rapidement possible de se rendre compte qu’utiliser R, c’est utiliser des fonctions. De plus, lorsque l’souhaite réaliser une nouvelle analyse avec une fonction que l’n’jamais utilisée auparavant, il est nécessaire de pouvoir en comprendre la structure et d’être en mesure d’en comprendre le fonctionnement pour pouvoir l’utiliser.Pour expliquer comment s’utilise une fonction, commençons directement par un exemple, cette fois avec la fonction plot() :Comme nous pouvons l’observer ci-dessus, pour utiliser une fonction, il faut d’abord écrire son nom, puis mettre des parenthèses pour qu’puisse écrire des informations à l’intérieur. Ces informations, elles sont de deux natures. D’un côté il y les arguments (qui sont x et y dans l’exemple ci-dessus), et d’un autre côté il y les valeurs (qui sont les variables Sepal.Length et Petal.Length du jeu de données iris dans l’exemple ci-dessus). Notons ici que le concept de valeur est à prendre au sens général du terme. Dans ce cadre là, une valeur pourrait tout aussi bien désigner des nombres ou des lettres, des vecteurs, des jeux de données, etc. Avec certaines fonctions, nous aurions pu mettre le nom de la variable seul et mettre le nom du jeu de données en face d’un autre argument, mais cela n’était pas possible ici. Comme nous pouvons le voir également, l’argument et la valeur sont toujours mis en lien par le biais du signe =. (Attention : Nous verrons plus tard qu’avec certaines fonctions, l’écriture qui est à gauche du signe = est en fait le nom d’une nouvelle variable à créer, mais laissons cela de côté pour le moment.)\nLe nombre d’arguments dépend des fonctions. Certaines n’en n’ont qu’un, d’autres peuvent en avoir un très grand nombre. Dans une fonction, certains arguments doivent obligatoirement recevoir une valeur indiquée par nos soins, alors que d’autres arguments ne seront tout simplement pas utilisés si ne leur associe pas une valeur particulière. Enfin, certains arguments prendront une valeur par défaut associée à la fonction si l’écrit rien les concernant dans la fonction. Dans la fonction plot(), seul l’argument x doit obligatoirement recevoir une valeur pour que la fonction puisse être utilisée. Dans notre exemple, le fait d’avoir en plus associer une valeur à l’argument y permet à la fonction de non pas montrer uniquement les données de la variable x, mais de réaliser un graphique en montrant les données de y en fonction de x, comme illustré sur la Figure 1.1 :\nFigure 1.1: Graphique obtenu avec un paramétrage explicite de la fonction plot()\nLorsque les arguments sont explicitement précisés comme pour x et y de l’exemple ci-dessus, il est en réalité possible de les écrire dans l’ordre que l’veut. Nous aurions par exemple très bien pu écrire les choses de la manière suivante sans que cela ne change rien au résultat de la commande :Ce changement d’ordre n’est possible que lorsque les arguments sont explicitement précisés dans la fonction. Il est aussi possible de configurer une fonction en mettant des valeurs sans avoir à écrire les noms des arguments. Cependant, lorsque les noms des arguments ne sont pas précisés, R associe les valeurs (celles que l’mises) aux arguments de la fonction en suivant l’ordre par défaut des arguments avec lequel la fonction été configurée. Ainsi, si nous voulons avoir, pour le graphique associé à notre exemple, la variable Sepal.Length en x, et la variable Petal.Length en y, peut très bien écrire la fonction comme ceci :En revanche, si nous avions inversé l’ordre d’écriture des variables dans la fonction sans préciser les noms des arguments (cf. code ci-dessous), nous aurions eu un résultat différent du graphique précédent (cf. Figure 1.2, où les variables en x et en y ont été inversées par rapport au graphique précédent).\nFigure 1.2: Graphique obtenu avec un paramétrage implicite de la fonction plot()\nDans la suite de ce livre, les arguments configurés par nos soins seront en général précisés lorsque nous leur donnerons une valeur. Cela étant dit, beaucoup d’arguments seront aussi régulièrement laissés de côté lorsque cela ne sera pas nécessaire de les préciser pour l’exemple.Au regard de ce qu’il vient d’être expliqué, il est donc une bonne pratique, avant d’utiliser une fonction, de connaître les arguments qu’elle contient, non seulement pour savoir comment configurer ses arguments, mais aussi pour savoir ce que font les arguments de la fonction lorsque l’ne touche pas à leur configuration par défaut. En général, toute fonction utilisable et opérationnelle avec R dispose d’une aide directement accessible via RStudio. Pour consulter l’aide associée à une fonction, il suffit d’écrire dans la Console le signe ? suivi du nom de la fonction qui pose question, comme ci-dessous :Toutefois, paradoxalement, l’aide n’est pas toujours facile à comprendre pour ceux qui n’ont pas un niveau d’expertise avancé avec R. Pour bien comprendre comment peut utiliser une fonction, internet peut être une excellente ressource car il regorge de sites et d’exemples crées par la communauté R. L’un des sites sur lesquels tombe souvent lors d’une recherche internet est le site https://stackoverflow.com. Une bonne partie des problèmes de compréhension et d’utilisation des fonctions de R que l’rencontre peuvent être résolus en consultant des exemples venant de ce site.","code":"\nplot(x = iris$Sepal.Length, y = iris$Petal.Length)\nplot(x = iris$Sepal.Length, y = iris$Petal.Length)\nplot(y = iris$Petal.Length, x = iris$Sepal.Length)\nplot(iris$Sepal.Length, iris$Petal.Length)\nplot(iris$Petal.Length, iris$Sepal.Length)\n?plot"},{"path":"prérequis.html","id":"installer-et-charger-des-packages","chapter":"Chapitre 1 Prérequis","heading":"1.2.4 Installer et charger des packages","text":"R fonctionne en bonne partie sur la base de fonctions qui permettent de réaliser automatiquement différents types de calculs. Ces fonctions sont regroupées dans des ensembles qu’appelle des packages. La version d’installation initialle du logiciel R dispose d’un ensemble de packages de base qui permettent de réaliser un très grand nombre d’analyses. Toutefois, la version de base de R impose parfois des manières d’écrire certaines instructions qui sont peu intuitives ou qui parfois ne permettent tout simplement pas de faire les analyses souhaitées. Pour palier ces problèmes, des packages sont régulièrement crées et actualisés par la communauté R. Pour pouvoir les utiliser, il est nécessaire de d’abord installer le package additionnel grâce à la fonction install.packages(). L’une des collections de packages les plus utiles pour manipuler des tableaux de données et effectuer des analyses statistiques et graphiques est celle du tidyverse, qui été pensée notamment pour faciliter l’écriture des lignes de code.Une fois que le package été installé (ou l’ensemble de packages s’il s’agit d’une collection comme dans le cas du tidyverse), une étape supplémentaire est nécessaire pour pouvoir utiliser les fonctions qu’il contient : il faut le charger dans l’environnement R. Pour cela, il est possible d’utiliser la fonction library().Lorsque l’charge la collection de packages tidyverse, peut observer dans la Console que plusieurs packages sont chargés en même temps : ggplot2, pour la visualisation de données ; dplyr, pour la manipulation de données ; tidyr, pour l’organiation des tableaux de données ; readr, pour l’importation de jeux de données ; purrr, pour la programmation ; tibble, pour le formatage de tableaux de données ; stringr, pour la gestion des chaînes de caractères ; forcats, pour la gestion de variables qualitatives. Si nous avons téléchargé et chargé l’ensemble des packages du tidyverse, nous aurions pu aussi installé et chargé un seul de ces packages à la fois, comme pour la plupart des packages qui existent.","code":"\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)"},{"path":"prérequis.html","id":"divers","chapter":"Chapitre 1 Prérequis","heading":"1.2.5 Divers","text":"Au fur et à mesure que l’écrit un script, une bonne pratique consiste à régulièrement créer des sections avec des titres et d’ajouter des commentaires pour certaines analyses. Afin de ne pas rendre activable les lignes de code qui ne serviraient qu’à écrire des titres ou des commentaires, il convient d’utiliser le symbole # devant l’écriture du code.Étant donné que l’erreur est difficile à éviter à un moment donné ou à un autre lorsqu’commence à écrire son propre code ou à utiliser un code qui vient de quelqu’un d’autre, il est utile de reconnaître les situations dans lesquelles une erreur est survenue. La situation la plus évidente est l’apparition d’un texte en rouge dans la Console. Lorsqu’il s’agit bel et bien d’une erreur (car il peut ne s’agir parfois que d’un message d’alerte ou d’information), le texte en rouge décrit l’erreur qui été détectée et qui empêche le code d’être entièrement activé. De manière moins visible, il est possible parfois d’observer un + tout en bas de la Console. Cela survient lorsque le code lancé à l’instant est incomplet (e.g., une parenthèse été oubliée). Si cela arrive, il vaut mieux appuyer sur Echap, trouver l’erreur dans le code, et relancer la commande. Avant de relancer la commande, il faut s’assurer que R donne effectivement la main pour lancer une nouvelle instruction. C’est le cas lorsque le symbole > est observé dans la Console. Enfin, RStudio permet d’utiliser un certain nombre de raccourcis clavier. Pour en avoir une vue d’ensemble, appuyez sur Alt+Shift+K.","code":"\n### Titre de section 1 -------------------------------------------\n## Sous-titre 1\n  # Commentaire 1"},{"path":"prérequis.html","id":"résumé","chapter":"Chapitre 1 Prérequis","heading":"1.3 Résumé","text":"R permet de faire des opérations sur des valeurs : additions, soustractions, multiplications, divisions, etc.R permet de faire des opérations sur des objets : valeurs uniques, vecteurs, tableaux de données, etc.Pour créer un vecteur, qu’il contienne des nombres, du texte, ou les deux, il est possible d’utiliser la fonction c().Pour créer un tableau de données, il est possible d’utiliser la fonction data.frame().Pour afficher une colonne particulière d’un tableau de données, utiliser le symbole $.Pour associer un objet à un nom, utiliser la fonction d’assignation <-.Pour supprimer une assignation, utiliser la fonction rm().L’utilisation de R repose sur l’utilisation de fonctions. Une fonction s’utilise en écrivant son nom, suivi de parenthèses à l’intérieur desquelles peut préciser les arguments qui nous intéressent et indiquer les valeurs nécessaires selon les besoins des analyses.Pour demander l’aide de R à propos d’une fonction, écrire ? suivi du nom de la fonction.Pour installer un package, utiliser la fonction install.packages().Un code peut être écrit directement dans la Console, ou dans une fenêtre Script. Pour activer le code à partir d’un script, utiliser le bouton Run ou Ctrl + Entrée.Les noms et les objets associés apparaissent dans la fenêtre Environnement.Pour écrire des titres et des commentaires dans un script, utiliser un # avant l’écriture du code.Dans la Console, le symbole > signifie que le logiciel est prêt à lancer une nouvelle instruction. Le symbole + indique que l’instruction initialement lancée est incomplète. Mieux vaut alors faire Echap, modifier le code, et recommencer.","code":""},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"importation-et-manipulation-dune-base-de-données","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"Chapitre 2 Importation et manipulation d’une base de données","text":"","code":""},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"comprendre-ce-quest-une-base-de-données","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.1 Comprendre ce qu’est une base de données","text":"Lorsqu’souhaite répondre à une question, la démarche scientifique classique consiste à effectuer une série de mesures ou d’observations selon un protocole qui été conçu en cohérence avec la question posée. En principe, ces mesures ou observations donnent lieu à l’obtention de valeurs. Ces valeurs peuvent être de forme numérique (e.g., les valeurs de taille de différents individus) ou de forme littérale (e.g., les valeurs de sexe de différents individus). Quelle que soit leur forme, les valeurs que l’obtient dans un contexte qui est connu, comme dans le cas d’un protocole de mesures, ont un sens bien défini car elles sont associées à des choses que l’cherché à caractériser. Lorsqu’une valeur est porteuse d’un sens bien défini, peut alors considérer qu’il s’agit d’une donnée.\nTrès souvent, pour répondre à une question, il est nécessaire d’acquérir plusieurs données qui seraient relatives à différentes choses que l’cherché à caractériser (e.g., la taille, la couleur, le poids, etc.), et qui seraient relatives également à différents individus chez qui l’aurait souhaité caractériser ces choses. Afin de conduire les analyses qui permettraient de répondre à la question posée, il convient alors de répertorier toutes les données acquises dans un même document, et plus exactement dans un même fichier, qui serait la base de données, telle que présentée dans le Tableau 2.1.\nTableau 2.1: Exemple de base de données\nTableau 2.1: Exemple de base de donnéesidgenretaillenb_victoiresniveau1H1.804512H1.939033H1.5010044F1.954315F1.523426H1.876727H1.83793La base de données prend donc la forme d’un tableau. Plusieurs principes sont à respecter en général lors de la création d’une base de données. Tout d’abord, les lignes de la base de données (qu’appelle des observations) doivent correspondre le cas échéant à des individus bien identifiés. Ensuite, chaque colonne doit correspondre à une variable. L’ensemble des données contenues dans une même ligne correspond donc aux données relatives aux différentes variables (e.g., la taille, le poids, le sexe, etc.) qui auraient été obtenues chez un même individu. Dans le cas d’études où l’évaluerait une ou plusieurs variables plusieurs fois chez un même individu (.e., à différentes moments, dans différentes conditions), il peut convenir de créer autant de lignes que de fois où les variables auraient été évaluées. Par exemple, le Tableau 2.2 représente une base de données, certes très sommaire, qui contient des données d’individus dont aurait évalué le poids deux fois, avant et après un programme de prise en charge. remarque alors qu’il y deux lignes par individu qui correspondent aux deux temps d’évaluation. La taille, elle, n’été évaluée qu’une seule fois, en début de programme, mais pour éviter de laisser des cellules vides, la valeur initiale de la taille été reproduite dans la seconde ligne.\nTableau 2.2: Organisation d’une base de données avec des mesures répétées\nTableau 2.2: Organisation d’une base de données avec des mesures répétéesidtailletemps_evalpoids11.75pre7511.75post7321.89pre9021.89post88En principe, les données de la base qui ont été obtenues selon la même procédure d’acquisition représentent le même type de choses. Ces choses sont appelées des variables car elles varient selon les individus qui ont été étudiés et les conditions de mesure qui ont été mises en oeuvre (dans le cas où il y en aurait plusieurs). Lorsque ces choses ne sont pas censées varier, parle de constantes. Une base de données peut comporter plusieurs variables de natures différentes :Des variables quantitatives, qui comportent des nombres. Parmi les variables quantitatives, distingue celles qui sont continues et celles qui sont discrètes. Les variables quantitatives continues contiennent des nombres pouvant comporter théoriquement un nombre infini de décimales (e.g., la taille, le poids, etc.). Au contraire, les variables quantitatives discrètes ne peuvent contenir théoriquement que des nombres finis (e.g., le nombre de victoires sportives au cours d’une année). Certaines variables en théorie discrètes sont cependant souvent considérées comme continues tant le nombre de valeurs théoriquement possibles pour la variable est grand, tel que pour le nombre de globules blancs mesurés dans le sang (Labreuche, 2010).Des variables qualitatives, qui contiennent des valeurs désignant non pas des quantités mais des modalités. Ces modalités peuvent être exprimées sous forme littérale ou numérique. Parmi les variables qualitatives, distingue celles qui sont nominales et celles qui sont ordinales. Les variables qualitatives nominales contiennent des modalités qui ne peuvent pas être ordonnées (e.g., les couleurs, les genres, etc.). Au contraire, les variables qualitatives ordinales contiennent des modalités qui peuvent être ordonnées (e.g., les niveaux de compétition sportive : départemental ; régional ; interrégional ; national ; international). Les variables qualitatives ordinales qui prendraient des valeurs numériques pour indiquer par exemple un niveau d’expertise (e.g., 1, 2, 3, et 4) se différencient des variables quantitatives discrètes par l’absence d’information sur la distance qui sépare les nombres de cette variable (Labreuche, 2010).","code":""},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"fixer-le-répertoire-de-travail","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.2 Fixer le répertoire de travail","text":"Lorsque l’souhaite réaliser l’analyse d’une base de données avec RStudio, il peut être utile et plus fonctionnel pour la suite de créer un dossier spécifique, sur l’ordinateur, où se trouveraient à la fois la base de données ainsi que toutes les créations (e.g., tableaux, figures, etc.) qui seraient produites au fur et à mesure des analyses. Une fois le dossier crée, il faut ensuite, dans RStudio, ouvrir un fichier Script où toutes les commandes seront écrites et enregistrables (chemin d’accès : File > New File > R Script). Une fois ouvert, il est possible d’enregistrer le script en appuyant sur Ctrl+S, en privilégiant comme emplacement le dossier où se trouve la base de données.\nLa prochaine manipulation à faire est alors de Fixer le répertoire. L’enjeu est ici d’indiquer à RStudio un dossier à privilégier pour réaliser des importations de fichiers dans RStudio ou des exports de fichiers à partir de RStudio. Le dossier à considérer pour cela pourrait donc être celui où se trouve déjà la base de données. Plus concrètement, après avoir fait cela, dès lors que l’voudra importer un tableau de données dans RStudio, au lieu de préciser dans la fonction d’importation tout le chemin d’accès définissant l’emplacement du fichier sur l’ordinateur, il suffira dans la fonction de mettre seulement le nom du fichier à importer. De plus, dès lors que l’voudra exporter un tableau ou une figure crée(e) avec RStudio, l’export se fera automatiquement vers le dossier de travail en cours si rien n’est spécifié dans la fonction d’export quant à l’emplacement du document.Pour fixer le répertoire de travail, il existe plusieurs manières de faire. Une manière relativement simple de procéder est la suivante. Suivre le chemin d’accès suivant à partir de RStudio : Session > Set Working Directory > Choose Directory…. (Ou appuyer sur Ctr+Shift+H.). Puis, sélectionner le dossier où se trouve la base de données. Enfin, cliquer sur Open. Une commmande apparaît alors dans la Console. Le répertoire vient donc d’être fixé. Pour ne pas devoir faire la même manipulation à chaque nouvelle ouverture de RStudio, il est possible de copier cette commande qui est apparue dans la Console (ne pas copier le symbole >) et de la coller au début du script. pourra noter que cette commande contient la fonction setwd(), et qu’à l’intérieur se trouve le chemin d’accès au répertoire de travail qui est écrit entre des guillemets.Une seconde manière de procéder est de créer un fichier .Rproj dans le dossier crée au préalable pour faire ses analyses et qui contient donc la base de données. Pour créer ce fichier, il suffit de suivre, dans RStudio, le chemin suivant : Fichier > New Project… > Existing Directory > Sélectionner le chemin d’accès au dossier souhaité > Cliquer sur Create Project. Ainsi, à chaque fois que l’souhaitera travailler avec les fichiers du dossier dans lequel le fichier .Rproj se trouve, il suffira de double-cliquer sur ce fichier pour ouvrir une session R qui prendra automatiquement pour répertoire de travail le dossier dans lequel le fichier .Rproj se trouve. Le grand avantage de cette procédure est que cela permet de ne pas écrire le chemin d’accès complet au dossier de travail et ainsi de ne pas révéler dans le script des informations qui sont relativement privées. Cette deuxième solution est donc celle à préférer, surtout lorsqu’envisage de partager son script avec d’autres collaborateurs qui risqueraient qui plus est d’être gênés par cette ligne de code d’accès au dossier qui ne leur servirait à rien, car le chemin d’accès au dossier de travail d’un collègue sera très probablement différent de celui des autres collaborateurs.","code":""},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"importer-la-base-de-données","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.3 Importer la base de données","text":"Il existe plusieurs fonctions pour importer une base de données dans RStudio. La fonction read_csv2() du package readr permet d’importer par exemple des fichiers .csv qui, structurellement, séparent les données avec des points-virgules. C’est généralement le type de structure de fichier .csv que l’obtient après avoir réalisé un export à partir du logiciel Excel. Pour illustrer ici l’importation d’une base de données, il est d’abord possible d’en créer une dans le répertoire de travail actif, cela en exportant un tableau de données qui existe déjà avec le logiciel R. Le logiciel R dispose en effet d’un grand nombre de jeux de données différents que tout utilisateur peut consulter et manipuler. L’ensemble des jeux de données disponibles suite à l’installation par défaut de R est visible en lançant dans la Console la commande data(). Au fur et à mesure de la découverte des analyses montrées dans ce document, différents jeux de données seront utilisés en fonction des besoins. Pour le moment, il est possible d’utiliser le jeu de données qui s’appelle iris. Même si ne le voit pas dans la fenêtre Environnement de RStudio, il est bel et bien là, disponible, prêt à être utilisé. Afin d’exporter ce jeu de données dans le répertoire de travail fixé au préalable, il est possible d’utiliser la fonction write_csv2() du package readr. Pour cela, il suffit d’utiliser le nom du jeu de données, puis d’indiquer entre guillemets le nom que l’veut que le fichier exporté ait, tout en n’oubliant pas de mettre l’extension .csv à la fin du nom pour indiquer le format d’export, comme ci-dessous.Si la commande ci-dessus est activée dans RStudio et que l’jette ensuite un oeil dans le répertoire de travail, il est alors possible d’y voir un nouveau fichier .csv du nom de iris. Maintenant qu’il existe une base de données dans le répertoire de travail actif, il est possible de concrétiser la procédure de son importation dans RStudio. Comme évoqué plus tôt dans ce document, il est intéressant, et en réalité nécessaire, d’assigner cette base de données à un nom pour pouvoir plus facilement manipuler le jeu de données par la suite. Ici, nous allons tout naturellement associer ce nouvel objet au nom iris, tel que montré ci-dessous.Suite à l’activation de la commande, RStudio nous montre un message d’information sur la manière dont la fonction read_csv2() configuré le jeu de données importé. Ce message apparaît car la fonction importe le jeu de données non pas sous la forme d’un data frame comme nous avons pu en créer auparavant, mais sous la forme d’un tibble, qui désigne un format de tableau que l’ne peut obtenir qu’en passant par le biais de fonctions associées à l’ensemble de packages tidyverse. Pour comprendre l’intérêt d’un tibble, revenons au format classique d’un data frame à l’aide de la fonction .data.frame().À présent, regardons ce qu’il se passe si lance le nom iris dans la Console…RStudio nous montre tout le jeu de données dans la Console, ce qui n’est pas très utile, d’autant plus que l’peut perdre de vue la première ligne de titre lorsque le jeu de données contient beaucoup de lignes. Retournons donc au format tibble grâce à la fonction as_tibble() du package tibble, et voyons ce qu’il se passe lorsqu’lance à nouveau le nom iris dans la Console.Cette fois, RStudio n’affiche que les premières lignes du jeu de données, et il fournit en plus de cela des informations quant aux types de variables présentes dans le jeu de données, en-dessous de la ligne de titres. Maintenant que la base de données été importée, il ne reste plus qu’à voir différentes fonctions pour pouvoir configurer la base de données telle qu’la voudrait pour réaliser confortablement les analyses.","code":"\nwrite_csv2(x = iris, file = \"iris.csv\")\niris <- read_csv2(file = \"iris.csv\")\niris <- as.data.frame(x = iris)\niris##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1            5.1         3.5          1.4         0.2     setosa\n## 2            4.9         3.0          1.4         0.2     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 5            5.0         3.6          1.4         0.2     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n## 10           4.9         3.1          1.5         0.1     setosa\n## 11           5.4         3.7          1.5         0.2     setosa\n## 12           4.8         3.4          1.6         0.2     setosa\n## 13           4.8         3.0          1.4         0.1     setosa\n## 14           4.3         3.0          1.1         0.1     setosa\n## 15           5.8         4.0          1.2         0.2     setosa\n## 16           5.7         4.4          1.5         0.4     setosa\n## 17           5.4         3.9          1.3         0.4     setosa\n## 18           5.1         3.5          1.4         0.3     setosa\n## 19           5.7         3.8          1.7         0.3     setosa\n## 20           5.1         3.8          1.5         0.3     setosa\n## 21           5.4         3.4          1.7         0.2     setosa\n## 22           5.1         3.7          1.5         0.4     setosa\n## 23           4.6         3.6          1.0         0.2     setosa\n## 24           5.1         3.3          1.7         0.5     setosa\n## 25           4.8         3.4          1.9         0.2     setosa\n## 26           5.0         3.0          1.6         0.2     setosa\n## 27           5.0         3.4          1.6         0.4     setosa\n## 28           5.2         3.5          1.5         0.2     setosa\n## 29           5.2         3.4          1.4         0.2     setosa\n## 30           4.7         3.2          1.6         0.2     setosa\n## 31           4.8         3.1          1.6         0.2     setosa\n## 32           5.4         3.4          1.5         0.4     setosa\n## 33           5.2         4.1          1.5         0.1     setosa\n## 34           5.5         4.2          1.4         0.2     setosa\n## 35           4.9         3.1          1.5         0.2     setosa\n## 36           5.0         3.2          1.2         0.2     setosa\n## 37           5.5         3.5          1.3         0.2     setosa\n## 38           4.9         3.6          1.4         0.1     setosa\n## 39           4.4         3.0          1.3         0.2     setosa\n## 40           5.1         3.4          1.5         0.2     setosa\n## 41           5.0         3.5          1.3         0.3     setosa\n## 42           4.5         2.3          1.3         0.3     setosa\n## 43           4.4         3.2          1.3         0.2     setosa\n## 44           5.0         3.5          1.6         0.6     setosa\n## 45           5.1         3.8          1.9         0.4     setosa\n## 46           4.8         3.0          1.4         0.3     setosa\n## 47           5.1         3.8          1.6         0.2     setosa\n## 48           4.6         3.2          1.4         0.2     setosa\n## 49           5.3         3.7          1.5         0.2     setosa\n## 50           5.0         3.3          1.4         0.2     setosa\n## 51           7.0         3.2          4.7         1.4 versicolor\n## 52           6.4         3.2          4.5         1.5 versicolor\n## 53           6.9         3.1          4.9         1.5 versicolor\n## 54           5.5         2.3          4.0         1.3 versicolor\n## 55           6.5         2.8          4.6         1.5 versicolor\n## 56           5.7         2.8          4.5         1.3 versicolor\n## 57           6.3         3.3          4.7         1.6 versicolor\n## 58           4.9         2.4          3.3         1.0 versicolor\n## 59           6.6         2.9          4.6         1.3 versicolor\n## 60           5.2         2.7          3.9         1.4 versicolor\n## 61           5.0         2.0          3.5         1.0 versicolor\n## 62           5.9         3.0          4.2         1.5 versicolor\n## 63           6.0         2.2          4.0         1.0 versicolor\n## 64           6.1         2.9          4.7         1.4 versicolor\n## 65           5.6         2.9          3.6         1.3 versicolor\n## 66           6.7         3.1          4.4         1.4 versicolor\n## 67           5.6         3.0          4.5         1.5 versicolor\n## 68           5.8         2.7          4.1         1.0 versicolor\n## 69           6.2         2.2          4.5         1.5 versicolor\n## 70           5.6         2.5          3.9         1.1 versicolor\n## 71           5.9         3.2          4.8         1.8 versicolor\n## 72           6.1         2.8          4.0         1.3 versicolor\n## 73           6.3         2.5          4.9         1.5 versicolor\n## 74           6.1         2.8          4.7         1.2 versicolor\n## 75           6.4         2.9          4.3         1.3 versicolor\n## 76           6.6         3.0          4.4         1.4 versicolor\n## 77           6.8         2.8          4.8         1.4 versicolor\n## 78           6.7         3.0          5.0         1.7 versicolor\n## 79           6.0         2.9          4.5         1.5 versicolor\n## 80           5.7         2.6          3.5         1.0 versicolor\n## 81           5.5         2.4          3.8         1.1 versicolor\n## 82           5.5         2.4          3.7         1.0 versicolor\n## 83           5.8         2.7          3.9         1.2 versicolor\n## 84           6.0         2.7          5.1         1.6 versicolor\n## 85           5.4         3.0          4.5         1.5 versicolor\n## 86           6.0         3.4          4.5         1.6 versicolor\n## 87           6.7         3.1          4.7         1.5 versicolor\n## 88           6.3         2.3          4.4         1.3 versicolor\n## 89           5.6         3.0          4.1         1.3 versicolor\n## 90           5.5         2.5          4.0         1.3 versicolor\n## 91           5.5         2.6          4.4         1.2 versicolor\n## 92           6.1         3.0          4.6         1.4 versicolor\n## 93           5.8         2.6          4.0         1.2 versicolor\n## 94           5.0         2.3          3.3         1.0 versicolor\n## 95           5.6         2.7          4.2         1.3 versicolor\n## 96           5.7         3.0          4.2         1.2 versicolor\n## 97           5.7         2.9          4.2         1.3 versicolor\n## 98           6.2         2.9          4.3         1.3 versicolor\n## 99           5.1         2.5          3.0         1.1 versicolor\n## 100          5.7         2.8          4.1         1.3 versicolor\n## 101          6.3         3.3          6.0         2.5  virginica\n## 102          5.8         2.7          5.1         1.9  virginica\n## 103          7.1         3.0          5.9         2.1  virginica\n## 104          6.3         2.9          5.6         1.8  virginica\n## 105          6.5         3.0          5.8         2.2  virginica\n## 106          7.6         3.0          6.6         2.1  virginica\n## 107          4.9         2.5          4.5         1.7  virginica\n## 108          7.3         2.9          6.3         1.8  virginica\n## 109          6.7         2.5          5.8         1.8  virginica\n## 110          7.2         3.6          6.1         2.5  virginica\n## 111          6.5         3.2          5.1         2.0  virginica\n## 112          6.4         2.7          5.3         1.9  virginica\n## 113          6.8         3.0          5.5         2.1  virginica\n## 114          5.7         2.5          5.0         2.0  virginica\n## 115          5.8         2.8          5.1         2.4  virginica\n## 116          6.4         3.2          5.3         2.3  virginica\n## 117          6.5         3.0          5.5         1.8  virginica\n## 118          7.7         3.8          6.7         2.2  virginica\n## 119          7.7         2.6          6.9         2.3  virginica\n## 120          6.0         2.2          5.0         1.5  virginica\n## 121          6.9         3.2          5.7         2.3  virginica\n## 122          5.6         2.8          4.9         2.0  virginica\n## 123          7.7         2.8          6.7         2.0  virginica\n## 124          6.3         2.7          4.9         1.8  virginica\n## 125          6.7         3.3          5.7         2.1  virginica\n## 126          7.2         3.2          6.0         1.8  virginica\n## 127          6.2         2.8          4.8         1.8  virginica\n## 128          6.1         3.0          4.9         1.8  virginica\n## 129          6.4         2.8          5.6         2.1  virginica\n## 130          7.2         3.0          5.8         1.6  virginica\n## 131          7.4         2.8          6.1         1.9  virginica\n## 132          7.9         3.8          6.4         2.0  virginica\n## 133          6.4         2.8          5.6         2.2  virginica\n## 134          6.3         2.8          5.1         1.5  virginica\n## 135          6.1         2.6          5.6         1.4  virginica\n## 136          7.7         3.0          6.1         2.3  virginica\n## 137          6.3         3.4          5.6         2.4  virginica\n## 138          6.4         3.1          5.5         1.8  virginica\n## 139          6.0         3.0          4.8         1.8  virginica\n## 140          6.9         3.1          5.4         2.1  virginica\n## 141          6.7         3.1          5.6         2.4  virginica\n## 142          6.9         3.1          5.1         2.3  virginica\n## 143          5.8         2.7          5.1         1.9  virginica\n## 144          6.8         3.2          5.9         2.3  virginica\n## 145          6.7         3.3          5.7         2.5  virginica\n## 146          6.7         3.0          5.2         2.3  virginica\n## 147          6.3         2.5          5.0         1.9  virginica\n## 148          6.5         3.0          5.2         2.0  virginica\n## 149          6.2         3.4          5.4         2.3  virginica\n## 150          5.9         3.0          5.1         1.8  virginica\niris <- as_tibble(x = iris)\niris## # A tibble: 150 × 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <chr>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          5           3.4          1.5         0.2 setosa \n##  9          4.4         2.9          1.4         0.2 setosa \n## 10          4.9         3.1          1.5         0.1 setosa \n## # … with 140 more rows"},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"manipuler-la-base-de-données","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.4 Manipuler la base de données","text":"","code":""},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"vérifier-le-succès-de-limportation-de-la-base","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.4.1 Vérifier le succès de l’importation de la base","text":"Avant de débuter les analyses de la base de données, une bonne pratique est de vérifier si la base de données été correctement importée avec RStudio. Une manière rapide de faire cela est de regarder le nombre d’observations (.e., de lignes) et de variables (.e., de colonnes) associés à l’objet crée lors de l’importation et visible dans la fenêtre Environnement de RStudio, puis de cliquer sur le nom associé à l’objet. Lors de l’étape précédente, nous avons importé le jeu de données iris en l’appelant ainsi. Lorsque l’cherche le nom iris dans la fenêtre Environnement, peut voir que l’objet associé contient 150 observations et 5 variables, signes que la structure du jeu de données été bien interprétée par R si l’sait que ce sont effectivement les dimensions du jeu de données en question. Puis, lorsque l’clique sur le nom iris dans la liste des noms montrés dans la fenêtre Environnement, RStudio ouvre un onglet qui contient les données. Il est alors possible de voir d’un simple coup d’oeil si les données sont bien présentes et organisées en lignes et en colonnes comme attendu.","code":""},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"vérifier-et-reconfigurer-les-types-des-variables-de-la-base","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.4.2 Vérifier et reconfigurer les types des variables de la base","text":"Il convient de vérifier que les types des variables que RStudio associés aux variables du jeu de données importé soient bien en accord avec ce qui était attendu. Pour vérifier les types des variables, il est possible d’utiliser la fonction str() avec le nom auquel associé la base de données.Après avoir activé la commande contenant la fonction str(), la Console affiche plusieurs lignes d’information (cf. texte des résultats ci-dessus), avec à chaque fois le nom de la variable, son type, et les premières valeurs de la variable. Plusieurs termes peuvent être rencontrés selon la manière dont R interprété les variables du jeu de données, notamment:num : désigne une variable quantitative continue ;int : dégine une variable quantitative discrète (avec des nombres entiers) ;Factor : désigne une variable qualitative ;chr : désigne une variable texte ;Date : désigne une variable date.Le logiciel R s’appuie donc sur une classification des types de variables plus complexe que celle que nous avons présentée précédemment. peut noter que les abbréviations montrées pour indiquer le type de variable en utilisant la fonction str() sont différentes de celles montrées lorsque l’observe un jeu de données au format tibble dans la Console, mais ces différences reflètent en réalité principalement une divergence dans les stratégies d’écriture de l’information par les concepteurs des packages et des fonctions. En outre, si l’veut déterminer le type d’une seule variable, ou plus globalement le type de l’objet qui nous intéresse, peut utiliser la fonction class(). Utiliser un nom de variable avec cette fonction renverra le type de la variable, comme montré ci-dessous.Lorsque le type d’une variable ne correspond pas à celui attendu après avoir importé la base de données dans RStudio, il peut être utile de se questionner sur les erreurs qui ont pu causer cela. Lorsque l’obtient une variable de type Factor ou de type chr alors qu’une variable de type num étaient attendue, une cause possible est que l’importation du jeu de données été réalisée avec une fonction d’importation mal configurée par rapport au contenu du jeu de données. Par exemple, il est possible que la fonction d’importation du jeu de données reconnaissait les nombres décimaux seulement lorsqu’ils avaient des points (e.g., 24.3) alors qu’en réalité les nombres décimaux étaient écrits avec des virgules (e.g., 24,3) dans la base de données. Une autre possibilité est que l’n’ait pas indiqué, dans la fonction d’importation, sous quelle forme se présentaient les valeurs manquantes de la base de données. Par exemple, avec des valeurs manquantes qui seraient notées “NA” dans des variables numériques de la base de données, l’usage de certaines fonctions d’importation sans indiquer à l’intérieur que “NA” désigne “valeur manquante” conduira R à interpréter les variables concernées comme des variables chr. En utilisant la fonction read_csv2() du package readr, ces écueils sont plus facilement évités car les paramètres par défaut de la fonction nous facilitent le travail. En revanche, d’autres fonctions, plus anciennes, comme read.csv2() qui est une fonction de base de R, nécessitent plus de vigilance.Lorsque la modification du type de la variable est nécessaire, une stratégie possible est de créer une variable portant exactement le même nom à partir de la variable initiale et à laquelle applique une fonction capable d’imposer un certain type de variable. Il existe une fonction pour chaque type de variable à définir, notamment :La fonction .numeric() pour obtenir un type de variable quantitative ;La fonction .factor() pour un obtenir un type de variable qualitative ;La fonction .character() pour un obtenir un type de variable texte ;La fonction .Date() pour obtenir un type de variable date.Par exemple, nous aurions pu vouloir faire en sorte que toutes les variables du jeu de données iris soient de type texte :Remarquons qu’à chaque fois, le nom de variable écrit à gauche de la flèche d’assignation est exactement le même que celui qui est écrit à droite de la flèche d’assignation dans la fonction .character(), ce qui implique que la création de la nouvelle variable entraîne la suppression et le remplacement de la précédente qui portait le même nom. Il est possible de vérifier la conséquence de ces commandes avec la fonction str().Cette stratégie de modification du type de la variable peut convenir lorsqu’il y peu de variables à modifier. Cependant, lorsque la liste s’allonge, il peut être plus lisible, en matière de code, de fonctionner avec le symbole %>% (qu’appelle pipe), et la fonction mutate() du package dplyr.Ici, le symbole %>% permet d’indiquer à R que toutes les fonctions qui sont écrites après ce symbole s’appliquent à ce qui été défini avant ce symbole. La fonction mutate(), dont nous reparlerons peu après, permet de créer de nouvelles variables dans le cadre de cette stratégie, soit en écrasant les anciennes variables si les anciens noms sont conservés, soit en créant de nouvelles variables si de nouveaux noms sont utilisés. Remarquons également qu’avec ce code, nous venons de créer un nouvel objet (en l’assignant à nouveau au nom iris) à partir de l’ancien objet, mais dont transformé les types des variables, perdant dans le même temps l’ancien objet.","code":"\nstr(iris)## tibble [150 × 5] (S3: tbl_df/tbl/data.frame)\n##  $ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n##  $ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n##  $ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n##  $ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n##  $ Species     : chr [1:150] \"setosa\" \"setosa\" \"setosa\" \"setosa\" ...\nclass(x = iris$Sepal.Length)## [1] \"numeric\"\niris$Sepal.Length <- as.character(x = iris$Sepal.Length)\niris$Sepal.Width <- as.character(x = iris$Sepal.Width)\niris$Petal.Length <- as.character(x = iris$Petal.Length)\niris$Petal.Width <- as.character(x = iris$Petal.Width)\niris$Species <- as.character(x = iris$Species)\nstr(iris)## tibble [150 × 5] (S3: tbl_df/tbl/data.frame)\n##  $ Sepal.Length: chr [1:150] \"5.1\" \"4.9\" \"4.7\" \"4.6\" ...\n##  $ Sepal.Width : chr [1:150] \"3.5\" \"3\" \"3.2\" \"3.1\" ...\n##  $ Petal.Length: chr [1:150] \"1.4\" \"1.4\" \"1.3\" \"1.5\" ...\n##  $ Petal.Width : chr [1:150] \"0.2\" \"0.2\" \"0.2\" \"0.2\" ...\n##  $ Species     : chr [1:150] \"setosa\" \"setosa\" \"setosa\" \"setosa\" ...\niris <- \n  iris %>% \n  mutate(Sepal.Length = as.numeric(x = Sepal.Length),\n         Sepal.Width = as.numeric(x = Sepal.Width),\n         Petal.Length = as.numeric(x = Petal.Length),\n         Petal.Width = as.numeric(x = Petal.Width),\n         Species = as.factor(x = Species))"},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"sélectionner-des-variables-avec-select","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.4.3 Sélectionner des variables avec select()","text":"Certains jeux de données peuvent être très larges, c’est-à-dire qu’ils peuvent contenir beaucoup de colonnes, parfois inutiles, et qui peuvent être gênantes lorsque l’veut avoir une vue claire du contenu du jeu de données. La fonction select() du package dplyr permet de sélectionner des colonnes facilement.","code":"\niris %>% \n  dplyr::select(Petal.Length, Petal.Width, Species)## # A tibble: 150 × 3\n##    Petal.Length Petal.Width Species\n##           <dbl>       <dbl> <fct>  \n##  1          1.4         0.2 setosa \n##  2          1.4         0.2 setosa \n##  3          1.3         0.2 setosa \n##  4          1.5         0.2 setosa \n##  5          1.4         0.2 setosa \n##  6          1.7         0.4 setosa \n##  7          1.4         0.3 setosa \n##  8          1.5         0.2 setosa \n##  9          1.4         0.2 setosa \n## 10          1.5         0.1 setosa \n## # … with 140 more rows"},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"renommer-des-variables-avec-rename","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.4.4 Renommer des variables avec rename()","text":"Il est possible que certains titres de variables ne soient pas clairs ou trop longs, ce qui peut être gênant pour écrire un code le plus lisible possible. La fonction rename() du package dplyr permet de gérer cela. Dans l’exemple ci-dessous, observe que le nouveau nom doit être écrit à gauche du signe =, alors que l’ancien nom doit être écrit à droite du signe =. Si le nom d’origine contient au moins une espace entre deux mots, il convient d’encadrer le nom à remplacer par des guillemets (\" \").","code":"\niris %>% \n  rename(Sepal_long = Sepal.Length,\n         Sepal_lar = Sepal.Width,\n         Petal_long = Petal.Length,\n         Petal_lar = Petal.Width,\n         Especes = Species)## # A tibble: 150 × 5\n##    Sepal_long Sepal_lar Petal_long Petal_lar Especes\n##         <dbl>     <dbl>      <dbl>     <dbl> <fct>  \n##  1        5.1       3.5        1.4       0.2 setosa \n##  2        4.9       3          1.4       0.2 setosa \n##  3        4.7       3.2        1.3       0.2 setosa \n##  4        4.6       3.1        1.5       0.2 setosa \n##  5        5         3.6        1.4       0.2 setosa \n##  6        5.4       3.9        1.7       0.4 setosa \n##  7        4.6       3.4        1.4       0.3 setosa \n##  8        5         3.4        1.5       0.2 setosa \n##  9        4.4       2.9        1.4       0.2 setosa \n## 10        4.9       3.1        1.5       0.1 setosa \n## # … with 140 more rows"},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"créer-des-variables-avec-mutate","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.4.5 Créer des variables avec mutate()","text":"Certaines analyses peuvent nécessiter d’ajouter des variables à partir de calculs réalisés sur des variables qui existent déjà dans le jeu de données. La fonction mutate(), du package dplyr, et que nous avons déjà rencontrée précédemment, permet cela. Dans l’exemple ci-dessous, observe que le nom de la nouvelle variable à créer est à gauche du signe = et que le calcul créant les nouvelles valeurs est décrit à droite du signe =.","code":"\niris %>% \n  mutate(ratio_sepal = Sepal.Length / Sepal.Width, \n         ratio_petal = Petal.Length / Petal.Width)## # A tibble: 150 × 7\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          5           3.4          1.5         0.2 setosa \n##  9          4.4         2.9          1.4         0.2 setosa \n## 10          4.9         3.1          1.5         0.1 setosa \n## # … with 140 more rows, and 2 more variables: ratio_sepal <dbl>,\n## #   ratio_petal <dbl>"},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"sélectionner-des-lignes-avec-filter","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.4.6 Sélectionner des lignes avec filter()","text":"En fonction des besoins de l’analyse, peut vouloir ne retenir que certaines lignes du fichier de données. La fonction filter() du package dplyr est faite pour réaliser ce filtrage. Plusieurs opérateurs sont disponibles pour ne retenir que les lignes que l’veut (cf. Tableau 2.3).\nTableau 2.3: Les opérateurs utilisables avec la fonction filter()\nTableau 2.3: Les opérateurs utilisables avec la fonction filter()OpérationOpérateurÉgal==Inférieur ou égal<=Supérieur ou égal>=Différent de!=De plus, dans la configuration du code, ces opérateurs peuvent être couplés à l’opérateur | (OU) et à l’opérateur & (ET). Dans l’exemple ci-dessous, le code permet, à partir du jeu de données iris, de ne garder que les lignes du jeu de données qui contiennent les noms d’espèce setosa OU virginica, ET en même temps qui affichent une longueur de sépale inférieure ou égale à 5.","code":"\niris %>% \n  filter((Species == \"setosa\" | Species == \"virginica\") &\n          Sepal.Length <= 5)## # A tibble: 29 × 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          4.9         3            1.4         0.2 setosa \n##  2          4.7         3.2          1.3         0.2 setosa \n##  3          4.6         3.1          1.5         0.2 setosa \n##  4          5           3.6          1.4         0.2 setosa \n##  5          4.6         3.4          1.4         0.3 setosa \n##  6          5           3.4          1.5         0.2 setosa \n##  7          4.4         2.9          1.4         0.2 setosa \n##  8          4.9         3.1          1.5         0.1 setosa \n##  9          4.8         3.4          1.6         0.2 setosa \n## 10          4.8         3            1.4         0.1 setosa \n## # … with 19 more rows"},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"réordonner-les-lignes-avec-arrange","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.4.7 Réordonner les lignes avec arrange()","text":"peut vouloir trier les lignes du jeu de données selon un certain ordre, en fonction des valeurs d’une variable donnée. La fonction arrange() du package dplyr est très utile pour gérer ce genre de réalisation. L’exemple ci-dessous conduit à trier les données selon un ordre croissant en fonction des valeurs de la variable Sepal.Length. Le fait de mettre le symbole - devant le nom de la variable aurait conduit à un tri décroissant.","code":"\niris %>% \n  arrange(Sepal.Length)## # A tibble: 150 × 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          4.3         3            1.1         0.1 setosa \n##  2          4.4         2.9          1.4         0.2 setosa \n##  3          4.4         3            1.3         0.2 setosa \n##  4          4.4         3.2          1.3         0.2 setosa \n##  5          4.5         2.3          1.3         0.3 setosa \n##  6          4.6         3.1          1.5         0.2 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          4.6         3.6          1           0.2 setosa \n##  9          4.6         3.2          1.4         0.2 setosa \n## 10          4.7         3.2          1.3         0.2 setosa \n## # … with 140 more rows"},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"résumer-des-variables-avec-group_by-et-summarize","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.4.8 Résumer des variables avec group_by() et summarize()","text":"Bien qu’une base de données puisse contenir énormément de lignes, peut n’en vouloir que la version résumée. Les fonctions group_by() et summarize() du package dplyr permettent de faire cela aisément. Dans l’exemple ci-dessous, la fonction group_by() permet d’indiquer que les calculs réalisés par la suite avec la fonction summarize() doivent être exécutés pour les modalités de la variable Species prises séparément. La fonction summarize(), quant à elle, permet d’exéctuer différents calculs. Dans l’exemple ci-dessous, il s’agit de moyennes, obtenues à l’aide de la fonction mean(). De plus, la fonction summarize() permet, comme montré ci-dessous, d’indiquer à gauche du = le nom du titre du calcul alors effectué .Au cours des illustrations montrant l’usage des fonctions select() jusqu’à summarize(), il aura été possible de noter que les commandes n’écrasaient pas le jeu de données initial, ni ne créaient de nouveaux jeux de données, car aucune assignation à un nom n’était faite. Lorsqu’une assignation est réalisée, il est conseillé d’utiliser un nouveau nom, différent de celui utilisé pour le jeu de données initial, pour pouvoir revenir au jeu de données originel lorsque cela est souhaité. Ci-dessous un exemple de création d’un nouvel objet de type tableau (assigné au nom iris2) à partir de l’utilisation de la plupart des fonctions que nous venons de voir et qui peuvent être utilisées dans un même bloc de code grâce au pipe (%>%).","code":"\niris %>% \n  group_by(Species) %>%\n  summarize(mean_sep_len = mean(Sepal.Length),\n            mean_sep_wid = mean(Sepal.Width))## # A tibble: 3 × 3\n##   Species    mean_sep_len mean_sep_wid\n##   <fct>             <dbl>        <dbl>\n## 1 setosa             5.01         3.43\n## 2 versicolor         5.94         2.77\n## 3 virginica          6.59         2.97\niris2 <- \n  iris %>%\n  dplyr::select(Petal.Length, Petal.Width, Species) %>%\n  rename(Petal_len = Petal.Length, Petal_wid = Petal.Width) %>%\n  mutate(Petal_ratio = Petal_len / Petal_wid) %>%\n  filter((Species == \"setosa\" | Species == \"virginica\") & Petal_ratio > 8) %>%\n  arrange(-Petal_ratio)\niris2## # A tibble: 7 × 4\n##   Petal_len Petal_wid Species Petal_ratio\n##       <dbl>     <dbl> <fct>         <dbl>\n## 1       1.5       0.1 setosa         15  \n## 2       1.5       0.1 setosa         15  \n## 3       1.4       0.1 setosa         14  \n## 4       1.4       0.1 setosa         14  \n## 5       1.1       0.1 setosa         11  \n## 6       1.9       0.2 setosa          9.5\n## 7       1.7       0.2 setosa          8.5"},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"passer-dune-disposition-en-lignes-à-une-disposition-en-colonnes-et-inversement-avec-pivot_wider-et-pivot_longer","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.4.9 Passer d’une disposition en lignes à une disposition en colonnes et inversement avec pivot_wider() et pivot_longer()","text":"Il convient de respecter certaines règles de base lors de la conception d’une base de données (e.g., mettre les observations en lignes et les variables en colonnes). Toutefois, dans certains cas, même après avoir bien respecté les règles, la manière selon laquelle la base de données été organisée peut ne pas être encore adéquate pour pouvoir utiliser certaines fonctions. Prenons par exemple le cas où toutes les valeurs numériques d’une variable quantitative auraient été mises dans une même colonne en regard d’une variable qualitative pour que chaque valeur numérique corresponde à une modalité de cette variable qualitative (c’est le cas, par exemple, avec le jeu de données iris), et que la fonction à utiliser nécessiterait que l’ait une colonne pour chacune des modalités de la variable qualitative, avec des colonnes mises côte à côte. Une fonction qui permet alors de passer d’un format “long” (.e., toutes les valeurs numériques sont dans la même colonne) à un format “large” (.e., les valeurs numériques sont réparties dans différentes colonnes selon la modalité à laquelle elles sont associées), est la fonction pivot_wider() du package tidyr. Pour pouvoir utiliser cette fonction, il faut qu’il y ait une variable permettant d’identifier à quels individus ou groupes appartiennent les données dont va changer l’organisation. Dans une base de données classique, il y toujours une variable présente pour cela. Toutefois, dans le jeu de données iris, il n’y pas une telle variable. Pour pouvoir illustrer l’utilisation de la fonction pivot_wider(), nous avons donc ajouté arbitrairement une variable id grâce à la fonction mutate() pour simuler le fait que les données de iris auraient été acquises en référence à des individus bien identifiés, avec à chaque fois une valeur pour les trois modalités de la variable Species.La fonction pivot_wider() permet alors de mettre en colonnes les valeurs des variables sélectionnées pour chacune des trois modalités de la variable Species.L’argument names_from permis d’indiquer la variable à partir de laquelle dispatché les valeurs en colonnes, et l’argument values_from permis de préciser les variables pour lesquelles voulait que les valeurs numériques soient dispatchées. L’utilisation des deux-points (:) nous permis de sélectionner toutes les variables allant de Sepal.Length à Petal.Width dans le jeu de données.Dans une situation inverse à celle que nous venons de voir, nous pourrions avoir les données représentées en colonnes (comme c’est le cas avec le jeu de données iris3 crée ci-dessus), alors que nous les voudrions en lignes (comme c’était le cas avec le jeu de données iris à l’origine). La fonction pivot_longer permet de faire ce genre de conversion. Pour observer ce que cette fonction réalise, sélectionnons seulement les colonnes avec les valeurs de sépales en plus de la colonne id, tel que montré ci-dessous :Dans la fonction pivot_longer() ci-dessus, nous avons indiqué à l’aide de l’argument cols et de la fonction c() avec le signe - la colonne que nous ne voulions pas utiliser avec la fonction (c’était plus rapide que d’indiquer dans la fonction c() les trois colonnes à utiliser). L’argument names_to nous permis de donner un nom à la variable qualitative qui comporte à présent les modalités associées aux valeurs numériques, et l’argument values_to nous permis de donner un nom à la colonne où se trouvent maintenant les valeurs numériques.Lorsque l’veut utiliser la fonction pivot_longer() sur plusieurs colonnes qui sont écrites avec la même logique (par exemple, avec un nom composé de deux morceaux séparés par un _, avec un morceau pour indiquer la chose mesurée, et un autre morceau pour indiquer la modalité), il convient de procéder comme ci-dessous :Dans le code montré ci-dessus, l’argument cols permis de sélectionner toutes les colonnes situées à droite de la colonne id, l’argument names_to permis d’indiquer qu’il faut garder des colonnes spécifiques nommées avec le premier morceau du nom des variables antérieures (le mot \".value\" permet cela), et le mot \"Species\" permis de nommer la colonne avec les espèces d’iris qui étaient les seconds morceaux des noms des variables antérieures.Nous venons de voir plusieurs fonctions qui peuvent être très utiles pour pouvoir facilement préparer sa base de données en vue des futures analyses. Il ne s’agit que d’une vue très superficielle de tout le potentiel de manipulation des données qu’ont ces fonctions. Pour une vue plus approndie des possibilités qu’offrent ces fonctions, la lecture de l’ouvrage R Data Science d’Hadley Wickham et de Garrett Grolemund (2017) sera particulièrement enrichissante. Cet ouvrage est en libre accès ici : https://r4ds..co.nz.","code":"\niris2 <- \n  iris %>% \n  mutate(id = rep(1:50, times = 3)) %>%\n  dplyr::select(id, Species,  everything()) %>%\n  arrange(id, Species) %>%\n  as_tibble()\niris2## # A tibble: 150 × 6\n##       id Species    Sepal.Length Sepal.Width Petal.Length Petal.Width\n##    <int> <fct>             <dbl>       <dbl>        <dbl>       <dbl>\n##  1     1 setosa              5.1         3.5          1.4         0.2\n##  2     1 versicolor          7           3.2          4.7         1.4\n##  3     1 virginica           6.3         3.3          6           2.5\n##  4     2 setosa              4.9         3            1.4         0.2\n##  5     2 versicolor          6.4         3.2          4.5         1.5\n##  6     2 virginica           5.8         2.7          5.1         1.9\n##  7     3 setosa              4.7         3.2          1.3         0.2\n##  8     3 versicolor          6.9         3.1          4.9         1.5\n##  9     3 virginica           7.1         3            5.9         2.1\n## 10     4 setosa              4.6         3.1          1.5         0.2\n## # … with 140 more rows\niris3 <- \n  iris2 %>% \n  pivot_wider(names_from = Species, \n              values_from = Sepal.Length : Petal.Width)\niris3## # A tibble: 50 × 13\n##       id Sepal.Length_setosa Sepal.Length_versicolor Sepal.Length_vir…\n##    <int>               <dbl>                   <dbl>             <dbl>\n##  1     1                 5.1                     7                 6.3\n##  2     2                 4.9                     6.4               5.8\n##  3     3                 4.7                     6.9               7.1\n##  4     4                 4.6                     5.5               6.3\n##  5     5                 5                       6.5               6.5\n##  6     6                 5.4                     5.7               7.6\n##  7     7                 4.6                     6.3               4.9\n##  8     8                 5                       4.9               7.3\n##  9     9                 4.4                     6.6               6.7\n## 10    10                 4.9                     5.2               7.2\n## # … with 40 more rows, and 9 more variables:\n## #   Sepal.Width_setosa <dbl>, Sepal.Width_versicolor <dbl>,\n## #   Sepal.Width_virginica <dbl>, Petal.Length_setosa <dbl>,\n## #   Petal.Length_versicolor <dbl>, Petal.Length_virginica <dbl>,\n## #   Petal.Width_setosa <dbl>, Petal.Width_versicolor <dbl>,\n## #   Petal.Width_virginica <dbl>\n  iris3 %>% \n  dplyr::select(id, \n         Sepal.Length_setosa, \n         Sepal.Length_versicolor, \n         Sepal.Length_virginica) %>%\n  pivot_longer(cols = c(-id), \n               names_to = \"Species\", \n               values_to = \"Sepal_len\")## # A tibble: 150 × 3\n##       id Species                 Sepal_len\n##    <int> <chr>                       <dbl>\n##  1     1 Sepal.Length_setosa           5.1\n##  2     1 Sepal.Length_versicolor       7  \n##  3     1 Sepal.Length_virginica        6.3\n##  4     2 Sepal.Length_setosa           4.9\n##  5     2 Sepal.Length_versicolor       6.4\n##  6     2 Sepal.Length_virginica        5.8\n##  7     3 Sepal.Length_setosa           4.7\n##  8     3 Sepal.Length_versicolor       6.9\n##  9     3 Sepal.Length_virginica        7.1\n## 10     4 Sepal.Length_setosa           4.6\n## # … with 140 more rows\n  iris3 %>% \n  pivot_longer(cols = c(Sepal.Length_setosa : Petal.Width_virginica), \n               names_to = c(\".value\", \"Species\"),\n               names_sep = \"_\")## # A tibble: 150 × 6\n##       id Species    Sepal.Length Sepal.Width Petal.Length Petal.Width\n##    <int> <chr>             <dbl>       <dbl>        <dbl>       <dbl>\n##  1     1 setosa              5.1         3.5          1.4         0.2\n##  2     1 versicolor          7           3.2          4.7         1.4\n##  3     1 virginica           6.3         3.3          6           2.5\n##  4     2 setosa              4.9         3            1.4         0.2\n##  5     2 versicolor          6.4         3.2          4.5         1.5\n##  6     2 virginica           5.8         2.7          5.1         1.9\n##  7     3 setosa              4.7         3.2          1.3         0.2\n##  8     3 versicolor          6.9         3.1          4.9         1.5\n##  9     3 virginica           7.1         3            5.9         2.1\n## 10     4 setosa              4.6         3.1          1.5         0.2\n## # … with 140 more rows"},{"path":"importation-et-manipulation-dune-base-de-données.html","id":"résumé-1","chapter":"Chapitre 2 Importation et manipulation d’une base de données","heading":"2.5 Résumé","text":"La base de données est un tableau comportant l’ensemble des données avec les observations organisées en lignes et les variables organisées en colonnes.Les grands types de variables que l’peut retrouver dans une base de données sont les variables quantitatives continues, les variables quantitatives discrètes, les variables qualitatives nominales, et les variables qualitatives ordinales.Avant d’initier un travail d’analyse, il peut être utile de fixer le répertoire avec la fonction setwd().Pour importer un jeu de données au format .csv, il est possible d’utiliser la fonction readr::read_csv2().Pour exporter un jeu de données au format .csv, il est possible d’utiliser la fonction readr::write_csv2().Pour mettre un tableau de donnnées au format data frame, utiliser la fonction .data.frame().Pour mettre un tableau de données au format tibble, utiliser la fonction tibble::as_tibble().Pour lister les variables présentes dans un tableau de données, utiliser la fonction str().Pour modifier les types des variables, utiliser des fonctions comme .numeric(), .factor(), .character(), .Date(), etc.Pour sélectionner les variables d’un tableau de données, utiliser la fonction dplyr::select().Pour renommer les variables d’un tableau de données, utiliser la fonction dplyr::rename().Pour créer de nouvelles variables dans un tableau de données, utliser la fonction dplyr::mutate().Pour sélectionner des lignes dans un tableau de données, utiliser la fonction dplyr::filter().Pour trier les lignes d’un tableau de données, utiliser la fonction dplyr::arrange().Pour résumer les variables d’un tableau de données, utiliser les fonctions dplyr::group_by() et dplyr::summarize().Pour passer d’un tableau de données au format long à un tableau de données au format wide, utiliser la fonction tidyr::pivot_wider().Pour passer d’un tableau de données au uformat wide à un tableau de données au format long, utiliser la fonction tidyr::pivot_longer().Pour enchaîner l’application de fonctions, utiliser le symbole %>% (pipe, package magrittr).","code":""},{"path":"analyses-descriptives-univariées.html","id":"analyses-descriptives-univariées","chapter":"Chapitre 3 Analyses descriptives univariées","heading":"Chapitre 3 Analyses descriptives univariées","text":"Réaliser une analyse descriptive univariée signifie que l’s’intéresse à une seule variable en particulier. L’enjeu est ici de prendre connaissance de la distribution de la variable, c’est-à-dire de la manière selon laquelle se répartissent les observations en fonction des valeurs que prend la variable. De manière complémentaire, l’analyse descriptive univariée vise à prendre connaissance des indices statistiques qui caractérisent la variable, ainsi qu’à déterminer ceux qui seraient les plus pertinents pour la résumer.Dans cette partie, les notions de population et d’échantillon vont revenir à plusieurs reprises. La notion de population désigne tous les individus existant qui satisfont à un ou plusieurs critères particuliers (e.g., les adultes de moins de 30 ans). En général, lorsque l’souhaite étudier un phénomène dans une population cible, il est impossible de prendre en compte tous les individus de la population en question. L’alternative est alors de conduire l’étude sur un échantillon, c’est-à-dire une fraction de la population composée d’individus qui représentent la population étudiée. La distinction entre population et échantillon est importante à faire à plusieurs égards. Si l’étude n’pu être conduite que sur un échantillon, cela implique de mettre en oeuvre des procédures statistiques pour estimer avec plus ou moins d’incertitude le résultat réel concernant la population étudiée, cela à partir du résultat trouvé dans l’échantillon observé. La seule analyse descriptive de l’échantillon ne suffit donc pas en soit à décrire une population. En revanche, lorsque l’étude pu être conduite sur l’ensemble de la population à étudier (e.g., l’équipe de France dans un sport donné), il n’y par définition pas lieu de chercher à conduire des procédures statistiques particulières pour estimer le résultat réel pour la population en question. Dans ce chapitre, les procédures d’analyse proposées servent en général à seulement décrire la variable telle qu’elle est donnée à voir à partir des données que l’en sa possession. L’objectif n’est donc pas ici de discuter particulièrement des statistiques les plus pertinentes à utiliser lorsqu’il s’agit de chercher à résumer la distribution d’une variable à l’échelle d’une population à partir d’un échantillon initial. Pour le moment, il s’agit d’être en mesure de décrire l’échantillon (ou la population si les données obtenues concernent toute la population) que l’sous les yeux.Dans le cadre de cette partie, nous allons commencer à voir comment produire des graphiques dans RStudio, et par là-même, découvrir progressivement le package ggplot2. Le package ggplot2 n’est pas le plus simple à utiliser lorsque l’découvre le logiciel R. D’ailleurs, de nombreux manuels portant sur R privilégient les packages et fonctions de base de R lorsqu’il s’agit de montrer comment obtenir des graphiques relativement simples pour analyser ses données. Cependant, les packages et fonctions de base de R sont rapidement limités lorsqu’il s’agit de réaliser des graphiques relativement complexes. Le parti pris ici est donc d’initier dès à présent à l’utilisation du package ggplot2 pour réaliser des graphiques, même simples, afin de pouvoir être plus rapidement à l’aise dès lors qu’il s’agira par la suite de produire des graphiques relativement élaborés à l’aide de ce package. Cependant, l’ambition n’est pas ici de permettre la maîtrise complète du package ggplot2. Pour cela, il vaut mieux se référer à des documentations spécialisées telles que la seconde édition de l’ouvrage ggplot2 d’Hadley Wickham (2016), en sachant qu’une troisième édition est en cours de développement et est accessible en ligne ici : https://ggplot2-book.org.","code":""},{"path":"analyses-descriptives-univariées.html","id":"variables-quantitatives","chapter":"Chapitre 3 Analyses descriptives univariées","heading":"3.1 Variables quantitatives","text":"","code":""},{"path":"analyses-descriptives-univariées.html","id":"visualiser-la-distribution-de-la-variable","chapter":"Chapitre 3 Analyses descriptives univariées","heading":"3.1.1 Visualiser la distribution de la variable","text":"Dans le cadre de l’analyse de variables quantitatives, il est toujours utile de d’abord visualiser graphiquement la distribution des données à l’aide d’un histogramme. Un histogramme, c’est un graphique avec des barres dont la largeur représente un intervalle donné de valeurs numériques, et dont la hauteur représente le nombre d’observations associées à une valeur qui est située dans l’intervalle en question. Plus une barre est longue, plus il y d’observations concernées par l’intervalle de valeurs. Un exemple d’histogramme est montré sur la Figure 3.1.\nFigure 3.1: Exemple d’histogramme\nPour générer cet histogramme, nous avons utilisé les fonctions ggplot() et geom_histogram() du package ggplot2. La fonction ggplot() est nécessaire pour initier le graphique. Si lance la commande ggplot() dans la Console, peut voir qu’un écran grisé apparaît à droite de l’écran du PC dans la fenêtre Plots de RStudio. Cet écran grisé est tel un tableau vierge qui ne demande qu’à être complété grâce à des commandes supplémentaires que l’doit préciser dans le code. Dans le code montré ci-dessus, remarque que la fonction ggplot() été configurée à l’aide de deux éléments : l’argument data, et la fonction aes(). L’argument data désigne le jeu de données à partir duquel n’importe quelle autre fonctionnalité du package ggplot2 sera utilisée si rien d’autre n’est précisé dans le reste du code. Comme peut le voir, le jeu de données utilisé ici est iris, que nous avons déjà rencontré dans la partie précédente. La fonction aes(), elle, permet de désigner les données à partir desquelles les éléments graphiques indiqués par la suite devront être réalisés. Dans le cadre d’une analyse univariée, nous n’avons besoin que d’une seule variable. Celle-ci peut être renseignée à droite de x =, et aura reconnu dans le code ci-dessus le nom d’une variable effectivement présente dans le jeu de données iris. Une fois que ces informations sont renseignées, nous ne sommes pas encore en mesure de voir un quelconque graphique. Pour cela, il faut que la fonction ggplot() soit accompagnée d’une fonction qui permette d’indiquer quel type de graphique veut. C’est à cela que sert ici la fonction geom_histogram(). peut noter que l’ajout de cette fonction été réalisé grâce au signe +, en écrivant la fonction après ce signe. La fonction geom_histogram() aurait pu être écrite directement après le symbole +, mais pour des raisons de lisibilité, nous sommes allés à la ligne. (Attention : Aller à la ligne avant le signe + n’est en revanche pas possible.) De manière intéressante et importante pour la suite, pourra noter que dans ce cas de figure, nous aurions pu aussi utiliser le symbole pipe (%>%) pour enchaîner la création d’un graphique à la suite de l’écriture du jeu de données qu’aurait indiqué initialement dans le code, comme cela :Comme l’indique le message qui accompagne le graphique, l’histogramme été réalisé sur la base de 30 bins. Cela signifie que pour faire ce graphique, R découpé en 30 intervalles égaux l’intervalle allant de la valeur la plus faible de la variable (.e., le minimum) à la valeur la plus élevée de la variable (.e., le maximum). Il s’agit de la méthode par défaut utilisée par la fonction geom_histogram(). Toutefois, cette méthode par défaut n’est pas vraiment adaptée, comme cela l’est indiqué d’ailleurs dans la documentation d’aide associée à cette fonction. Et puis, lorsqu’il s’agit d’appréhender au mieux la distribution d’une variable avec un histogramme, une bonne pratique est d’observer ce qu’il se passe avec différentes largeurs de bins. La largeur d’une bin peut être modifiée à l’aide de l’argument binwidth. L’unité de la valeur associée à cet argument correspond à l’unité de la variable étudiée (cf. code ci-dessous et Figure 3.2).\nFigure 3.2: Différentes largeurs d’intervalles pour un histogramme\nEn plus de l’histogramme, une autre manière de prendre connaissance graphiquement de la distribution des données d’une variable quantitative est d’utiliser une boîte à moustaches. Pour ce faire, il convient d’utiliser la fonction geom_boxplot(), comme montré dans le code ci-dessous. Le résultat de ce code est montré sur la Figure 3.3. pourra noter ci-dessous l’ajout d’une ligne de code avec une fonction theme() dont ne présentera pas les détails ici ; cette fonction nous sert juste ici à ne pas montrer des chiffres qui auraient été ajoutés par défaut sur l’axe Y de gauche du graphique et qui n’auraient eu aucun intérêt.\nFigure 3.3: Exemple de boîte à moustaches\nLa boîte à moustaches (cf. Figure 3.3) nous livre plusieurs informations. Tout d’abord, ses extrémités nous indiquent ce qu’appelle le premier quartile (ici représenté par le bord gauche de la boîte) et le troisième quartile (ici représenté par le bord droit de la boîte). Le premier quartile (Q1) désigne la valeur en-dessous de laquelle retrouve 25 % des observations de la variable (.e., 25 % des observations sont associées à une valeur plus faible que Q1), alors que le troisième quartile (Q3) représente la valeur en-dessous de laquelle retrouve 75 % des observations (.e., 75 % des observations sont associées à une valeur plus faible que Q3). Cela indique alors que sur la Figure 3.3, l’intervalle qui sépare le bord gauche du bord droit de la boîte contient 50 % des observations. La ligne noire à l’intérieur de la boîte blanche désigne la médiane, qui est la valeur pour laquelle 50 % des observations qui ont une valeur inférieure à cette valeur repère, et pour laquelle 50 % des observations qui ont une valeur supérieure à cette valeur repère. Les lignes noires en-dehors de la boîte sont les moustaches. Dans le cas présent, la moustache de gauche s’étend jusqu’à la valeur minimale de la variable, et la moustache de droite s’étend jusqu’à la valeur maximale de la variable. Si le minimum (ou le maximum) avait été éloigné de la médiane de plus de 1.5 fois la différence entre Q3 et Q1 (qu’appelle intervalle interquartile), l’extrémité de la moustache se serait arrêtée à la dernière valeur avant cette limite, et toute valeur ayant dépassé cette limite aurait été représentée par un point. Pour illustrer ce dernier cas de figure, peut modifier manuellement une valeur de la variable Sepal.Length du jeu de données iris de telle sorte à ce qu’il y ait une nouvelle valeur qui soit particulièrement éloignée de la boîte. Une telle valeur s’appelle un outlier (cf. Figure 3.4)\nFigure 3.4: Visualisation d’un outlier\nUne boîte à moustaches donc notamment l’intérêt de mettre en évidence des valeurs qui apparaissent comme “étranges” par rapport au reste des données. Lorsqu’il semble évident que l’outlier est une valeur erronée, ou quand veut tout simplement vérifier qu’il s’agit d’une erreur ou non, il est intéressant de savoir à quelle observation (.e., à quel individu dans certains contextes) cette valeur étrange appartient, pour ensuite éventuellement la corriger. Malheureusement, la fonction geom_boxplot() ne dispose pas d’argument pour permettre d’identifier facilement à quelle observation appartient cette valeur. Cependant, peut s’appuyer sur des fonctions créées manuellement dans R pour parvenir à cela. Dans ce cas de figure, le site https://stackoverflow.com est souvent intéressant car riche de solutions. C’est d’ailleurs en provenance de ce site que vient la fonction montrée ci-dessous (https://stackoverflow.com/questions/33524669/labeling-outliers--boxplots--r) qui va nous permettre ensuite de savoir, à partir du graphique, à quelle observation correspond cette donnée étrange.Voici donc, ci-dessus, à quoi ressemble une fonction à son état brut, avec : le nom de la fonction à gauche de la flèche d’assignation (<-), la commande function() qui permet d’amorcer la création de la fonction, et les lignes de code entre les accolades { } qui indiquent les actions que la fonction réalise. La seule chose qu’il faut comprendre à ce stade, c’est que cette fonction, qui va donc s’appeler par la suite is_outlier(), besoin pour fonctionner qu’lui indique un nom de variable (représenté par la lettre x dans le code ci-dessus), et que le résultat de cette fonction sera une nouvelle variable qui contiendra seulement des TRUE ou des FALSE, en sachant que TRUE correspondra au fait que la valeur de la variable étudiée était un outlier, et que FALSE correspondra au fait que la valeur de la variable étudiée n’était pas un outlier. (Notons ici que la définition d’un outlier est la même que celle décrite plus haut, à savoir une valeur qui serait éloignée de Q1 ou de Q3 de plus de 1.5 fois l’intervalle interquartile.) Mais regardons concrètement ce que donne cette fonction lorsqu’elle est appliquée à la variable Sepal.Length du jeu de données iris (NB : La fonction ne marchera que si elle été activée/créée auparavant) :Quand regarde bien, voit que la troisième observation de cette nouvelle variable que l’vient de créer (seulement de manière temporaire ici car ne l’pas assignée à un nom) contient la valeur TRUE, ce qui est en accord avec la valeur que nous avons introduite auparavant dans la variable Sepal.Length. Le fait d’observer ces valeurs TRUE et FALSE n’est évidemment pas une stratégie très pratique pour déterminer à quelle observation correspondrait l’outlier, et c’est pourquoi l’étape suivante consiste à montrer comment peut se servir de cette fonction is_outlier() pour faire apparaître sur un graphique de boîte à moustaches les observations à qui appartiendraient les valeurs étranges (cf. Figure 3.5).\nFigure 3.5: Identification d’un outlier\nIl y plusieurs choses à expliquer par rapport au graphique de la Figure 3.5 qui comporte à présent le numéro id associé à l’observation pour laquelle nous avions modifié la valeur. Tout d’abord, il faut noter qu’avant de créer le graphique, nous avons ajouté temporairement au jeu de données, avec la fonction mutate(), la variable id_outlier. Cette variable été créée à l’aide de deux fonctions en réalité : la fonction ifelse(), et la fonction is_outlier() qu’présentée succinctement plus haut. Ici, la fonction ifelse() fonctionné comme cela : si la fonction id_outlier() renvoyait la valeur TRUE, alors conservait le numéro id de la variable Sepal.Length, sinon, ne mettait rien. Cela veut dire que la variable id_outlier ne contenait que les numéros id pour lesquels la fonction is_outlier() avait renvoyé la valeur TRUE. Pour visualiser ce qu’il s’est passé, peut revoir la conséquence du début du code qui permis de faire le graphique (cf. colonne de droite dans le résultat ci-dessous) :Une fois cette procédure réalisée, le reste du code, et notamment la fonction geom_text(), permis d’ajouter des éléments textuels au graphique, en l’occurrence en s’appuyant sur la variable id_outlier, tel que configuré avec la fonction aes() à l’intérieur de la fonction geom_text(). Lorsque la valeur anormale identifiée est effectivement une erreur de saisie dans la base de données, il convient de corriger la valeur avec la fonction d’assignation comme nous l’avons fait précédemment :remarque ainsi qu’au-delà de prendre connaissance de la forme de la distribution, passer par ces étapes graphiques permet aussi de s’assurer qu’il n’y pas eu d’erreur lors de la saisie des données dans la base (du moins, pas d’erreur visible et qui risquerait d’impacter grandement les calculs futurs). Passer par l’analyse graphique est donc recommandé avant de pouvoir se fier aux résultats numériques que l’pourrait calculer par la suite, tels que les indices statistiques qui permettent de résumer numériquement une variable. Afin de faciliter l’analyse graphique de la distribution de la variable étudiée, nous avons crée une fonction, appelée plot_distri() (cf. ci-dessous), visant à produire à la fois un histogramme et une boîte à moustaches représentant la variable étudiée, ainsi qu’un graphique de type nuage de points montrant les valeurs individuelles.L’utilisation de la fonction plot_distri() est illustrée sur la Figure 3.6 (pour rappel, il est important d’activer/créer la fonction avant de pouvoir l’utiliser) :\nFigure 3.6: Visualisation de la distribution à l’aide de plusieurs procédures graphiques\nLors de l’analyse de données, différentes formes typiques de distribution peuvent être rencontrées, notamment des formes gaussiennes, asymétriques, leptocurtiques, et platycurtiques (Dart & Chatellier, 2003). Ces formes sont illustrées sur la Figure 3.7. Les formes gaussiennes sont observées en présence de variables suivant ce qu’appelle une loi normale. Très souvent, associe une distribution gaussienne, et donc une loi normale, à une distribution en forme de cloche, bien que l’analogie à la cloche pourrait se discuter. Les formes asymétriques traduisent le fait que la majorité des observations sont concentrées sur une extrémité de l’intervalle des valeurs possibles, et qu’il existe des observations, non majoritaires, avec des valeurs pouvant être très éloignées de la majorité des données, mais seulement d’un seul côté de la distribution. Enfin, les formes leptocurtiques et platycurtiques sont appelées ainsi par comparaison à la forme gaussienne. En présence d’une forme leptocurtique, la distribution s’avère plus pointue, avec des queues (qui sont les extrémités de la distribution) plus longues qu’avec une forme gaussienne. Dans le cadre d’une distribution platycurtique, la distribution est plus aplatie, avec des queues plus courtes qu’avec une forme gaussienne (Dart & Chatellier, 2003). La distribution uniforme est un cas particulier de distribution platycurtique, et c’est cette distribution qui est en réalité montrée sur la Figure 3.7.\nFigure 3.7: Différents types de distributions\nComme il le sera vu plus tard, de nombreuses analyses statistiques reposent sur l’hypothèse que la variable étudiée est gaussienne. Il est donc important de chercher à savoir, graphiquement dans un premier temps, si la distribution de la variable est effectivement gaussienne. Le fait d’être capable d’identifier les autres formes de distribution peut être aussi important afin de mener des analyses appropriées. Dans les exemples montrés ci-dessus, les distributions ont été créées à partir de 1000 valeurs générées de manière aléatoire de telle sorte à suivre des lois prédéfinies et ainsi illustrer différentes distributions possibles. C’est pour cette raison que les formes de distribution montrées sur la figure ci-dessus sont si nettes. Lorsque l’travaille dans certains domaines ou contextes, tel qu’avec l’être humain, il peut être compliqué d’obtenir autant de données, et les formes de distribution seront alors plus dures à identifier.Une fois qu’une première analyse graphique des données été réalisée, il peut être utile de chercher à résumer de manière numérique la variable. Plusieurs types de statistiques peuvent être utilisés à cet effet : les indices de position, les indices de dispersion, les indices d’asymétrie, et les indices d’aplatissement.","code":"\nggplot(data = iris, aes(x = Sepal.Length)) + \n  geom_histogram(fill = \"white\", color = \"black\")\niris %>% \n  ggplot(aes(x = Sepal.Length)) +                  \n  geom_histogram(fill = \"white\", color = \"black\")\n\n# On remarque ici que l'argument `data = ` dans `ggplot()` a dû être enlevé.\n# Graphique avec binwidth = 0.3\nggplot(data = iris, aes(x = Sepal.Length)) + \n  geom_histogram(binwidth  = 0.3, fill = \"white\", color = \"black\") +\n  ggtitle(\"binwidth = 0.3\")\n\n# Graphique avec binwidth = 0.7\nggplot(data = iris, aes(x = Sepal.Length)) + \n  geom_histogram(binwidth  = 0.7, fill = \"white\", color = \"black\") +\n  ggtitle(\"binwidth = 0.7\")\nggplot(data = iris, aes(x = Sepal.Length)) + \n  geom_boxplot() +\n    theme(axis.text.y = element_blank(), \n          axis.ticks.y = element_blank())\n# On modifie ici, pour l'exemple, la valeur de la 3ème observation\n# en lui assignant la valeur 12.\n\niris$Sepal.Length[3] <- 12     \n\nggplot(data = iris, aes(x = Sepal.Length)) +   \n  geom_boxplot() +\n    theme(axis.text.y = element_blank(), \n          axis.ticks.y = element_blank())\nis_outlier <- function(x) {\n  x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x)\n}\nis_outlier(x = iris$Sepal.Length)##   [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [11] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [21] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [31] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [41] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [51] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [71] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [81] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [91] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [101] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [111] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [131] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [141] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\niris %>%\n  # Ajout d'un numéro id pour les observations\n  mutate(id = as.factor(rep(1:50, times = 3)), \n         # Création d'une nouvelle variable appelée id_outlier\n         id_outlier = ifelse(is_outlier(x = Sepal.Length), id, \"\")) %>% \n  ggplot(aes(x = Sepal.Length, y = \"\")) + \n  geom_boxplot() +\n  # Ajout des numéros id des outliers\n  geom_text(aes(label = id_outlier),  hjust = -1) +     \n    theme(axis.text.y = element_blank(), \n          axis.ticks.y = element_blank(),\n          axis.title.y = element_blank())\niris %>%\n  mutate(id = as.factor(rep(1:50, times = 3)),                           \n         id_outlier = ifelse(is_outlier(x = Sepal.Length), id, \"\")) %>%\n  dplyr::select(id, Sepal.Length, id_outlier)## # A tibble: 150 × 3\n##    id    Sepal.Length id_outlier\n##    <fct>        <dbl> <chr>     \n##  1 1              5.1 \"\"        \n##  2 2              4.9 \"\"        \n##  3 3             12   \"3\"       \n##  4 4              4.6 \"\"        \n##  5 5              5   \"\"        \n##  6 6              5.4 \"\"        \n##  7 7              4.6 \"\"        \n##  8 8              5   \"\"        \n##  9 9              4.4 \"\"        \n## 10 10             4.9 \"\"        \n## # … with 140 more rows\niris$Sepal.Length[3] <- 4.7  \n# Le nombre entre crochets désigne la position de l'observation \n# dans la variable.\nplot_distri <- function(x = NULL, binwidth = NULL) {\n  require(ggplot2)\n  require(magrittr)\n  require(patchwork)\n  \n  data <- as.data.frame(x)\n  names(data) <- \"x\"\n  \n  g1 <- \n    data %>%\n    ggplot(aes(x = x)) +\n    geom_histogram(binwidth = binwidth, fill = \"white\", color = \"black\") +\n    coord_cartesian(xlim = c(min(x, na.rm = TRUE), max(x, na.rm = TRUE))) +\n    theme(axis.title.x = element_blank())\n  \n  g2 <- \n    data %>% \n    ggplot(aes(x = x)) +\n    geom_boxplot() +\n    coord_cartesian(xlim = c(min(x, na.rm = TRUE), max(x, na.rm = TRUE))) +\n    theme(axis.text.y = element_blank(),\n          axis.title.x = element_blank(),\n          axis.ticks.y = element_blank())\n  \n    g3 <- \n      data %>% \n      ggplot(aes(x = x)) +\n      geom_point(aes(x = x, y = \"\"), \n                 shape = 21, fill = \"white\", alpha = 0.5, size = 3,\n                 position = position_jitter(seed = 123, width = 0.04)) +\n      ylab(\"\") +\n      coord_cartesian(xlim = c(min(x, na.rm = TRUE), max(x, na.rm = TRUE))) +\n      theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank())\n  \n  g1 + g2 + g3 + plot_layout(nrow = 3, heights = c(2, 0.2, 0.2))\n}\nplot_distri(x = iris$Sepal.Length, binwidth = 0.3)"},{"path":"analyses-descriptives-univariées.html","id":"les-indices-de-position","chapter":"Chapitre 3 Analyses descriptives univariées","heading":"3.1.2 Les indices de position","text":"Les indices de position servent à donner un ordre de grandeur de la variable. Autrement dit, ces indices permettent de positionner la variable sur une échelle de valeurs numériques. De plus, ces statistiques peuvent être utilisées pour donner une idée de ce qu’appelle la tendance centrale, c’est-à dire-la valeur typique d’une distribution qui donne une bonne indication de la localisation de la majorité des observations (Rousselet & Wilcox, 2020). Différentes statistiques peuvent être étudiées à cette fin : la moyenne, la médiane, la moyenne rognée, et le mode.La moyenneSi l’pose que N est le nombre de valeurs dans une variable (parle également de taille de la variable), que est la -ème observation (-ème position) dans la variable, et que \\(X{}\\) est la valeur associée à la -ème position, alors le calcul de la moyenne, notée \\(\\overline{X}\\), peut être écrit de la manière suivante :\n\\[\\overline{X} = \\frac{1}{N}\\sum_{=1}^{N} X{}\\]\nCette expression mathématique signifie que la moyenne s’obtient en additionnant (\\(\\sum\\)) les valeurs allant de la position 1 à la position N de la variable, et en divisant le tout par le nombre total de valeurs N contenues dans la variable. Pour mieux comprendre, prenons par exemple une variable qui ne contiendrait que les cinq premières valeurs de la variable Sepal.Length du jeu de données iris et qu’appelle sample_iris.La moyenne de la variable sample_iris peut alors s’obtenir en divisant la somme des valeurs de la variable par le nombre de valeurs contenues dans la variable, qui est ici de 5 :Évidémment, ce n’est pas très pratique de fonctionner comme cela. Aussi, R permet de calculer directement la moyenne avec la fonction mean() :Dans certains cas, il se peut qu’il y ait des valeurs manquantes dans la variable à étudier. Ces valeurs manquantes sont en principe notées NA. Introduisons une valeur manquante dans notre variable sample_iris, et essayons de calculer la moyenne à nouveau :Comme nous pouvons le voir ci-dessus, quand il y une valeur manquante dans la variable, l’utilisation de la fonction mean() configurée par défaut renvoie la valeur NA, ce qui signifie que R n’pas pu calculer de valeur moyenne, ce qui est normal car nous lui avons demandé de le faire en utilisant une valeur inconnue. Dans ce cas là, pour pouvoir faire le calcul de la moyenne seulement à partir des valeurs connues, il faut configurer la fonction pour que les valeurs manquantes ne soient pas considérées pour le calcul. L’argument à configurer dans ce cas là est na.rm en lui associant la valeur TRUE.La gestion des valeurs manquantes telle que nous venons de la voir s’effectue de la même manière avec beaucoup de fonctions dans R. Ainsi, il s’agira de fonctionner de la même manière avec la plupart des fonctions de base que nous pourrons rencontrer par la suite et qui seront concernées par ce genre de problème. Par ailleurs, si les exemples ci-dessus ont été réalisés à l’aide d’une variable isolée (.e., ne faisant pas partie d’un tableau de données), c’est évidemment possible d’utiliser la fonction mean() directement à partir d’un tableau de données :La moyenne, c’est en quelque sorte le “centre de gravité” de la variable (Navarro, 2018). L’un de ses intérêts est que son calcul prend en compte toutes les informations contenues dans la variable, ce qui est utile quand relativement peu de données (Navarro, 2018). En revanche, un inconvénient est qu’elle est très sensible aux valeurs extrêmes, et en particulier aux valeurs qui seraient particulièrement basses ou particulièrement élevées par rapport à la majorité des valeurs de la variable (il s’agirait ici d’outliers), et cela est d’autant plus vrai lorsque la taille de l’échantillon étudié est faible. Dans ce dernier cas, il y donc un risque assez important que la moyenne ne représente pas bien la tendance centrale, c’est-à-dire la valeur ou la zone de valeurs où sont situées la majorité des observations. Ce risque existe aussi même avec des tailles d’échantillon relativement importantes lorsque la distribution est asymétrique, comme illustré sur la Figure 3.8. Sur cette figure, peut voir qu’avec une distribution gaussienne, la moyenne correspond parfaitement à la tendance centrale. En revanche, avec une distribution asymétrique à droite, voit que la moyenne est “tirée vers la droite” par rapport à la tendance centrale sous l’effet des valeurs, certes moins nombreuses, mais d’une grandeur plus importante.\nFigure 3.8: Effet de la forme de la distribution sur la position de la moyenne\nLa médianeLa médiane est le deuxième indice de position que l’considère régulièrement lorsqu’il s’agit de résumer numériquement une variable quantitative. Pour l’obtenir, il faut d’abord classer les valeurs de la variable selon un ordre croissant. La médiane pour une variable de taille N est alors la valeur correspondant au rang (N + 1) / 2. Ainsi, la médiane désigne la valeur qui sépare les valeurs de la variable en deux groupes d’observations de même taille (Chatellier & Durieux, 2003). Dans l’exemple ci-dessous, il y cinq observations, et donc cinq valeurs, qui ont été triées par ordre croissant. La médiane est alors la valeur correspondant au rang (5 + 1) / 2 = 3, soit 4.9.Dans le cas où le nombre d’observations contenues dans la variable étudiée serait un nombre pair, la médiane s’obtiendrait différemment. En effet, avec une variable qui contiendrait par exemple six valeurs, la médiane serait associée, selon la méthode expliquée ci-dessus, au rang (6 + 1) / 2 = 3.5, ce rang n’existe pas. Dans ce cas, la médiane s’obtient en faisant la moyenne des deux nombres du milieu. Par exemple, ci-dessous, la médiane correspond à la moyenne des valeurs de la 3ème et de la 4ème observation, ce qui donne 4.95.Dans R, la médiane d’une variable s’obtient facilement à l’aide de la fonction median().Contrairement à la moyenne, la médiane prend donc en compte moins d’informations relatives aux données. Toutefois, en tant que valeur “du milieu”, la médiane présente l’intérêt de ne pas être influencée par les valeurs extrêmes. En raison de cela, la médiane est susceptible de mieux refléter la tendance centrale que la moyenne en présence de petits échantillons avec des outliers, ou en présence d’une forme de distribution asymétrique. Ce dernier cas est illustré sur la Figure 3.9.\nFigure 3.9: Effet de la forme de la distribution sur la position de la médiane\nLa moyenne rognéeParfois, il est possible de rencontrer ce qu’appelle la moyenne rognée. Le principe est ici de calculer la moyenne non pas en prenant en compte toutes les valeurs de la variable, mais en écartant un certain pourcentage des valeurs situées à l’extrémité basse et à l’extrémité haute du classement des valeurs de la variable. Cette procédure consiste à pouvoir calculer une moyenne qui ne serait pas influencée par des outliers. Pour pouvoir caculer une moyenne rognée, il faut à nouveau utiliser la fonction mean(), en précisant cette fois l’argument trim avec la valeur du pourcentage de données que l’veut rogner aux extrémités de la variable :Dans l’exemple de code précédent, la fonction été configurée pour rogner 5 % des observations situées à chaque extrémité de la variable (.e., les observations en-dessous du 5ème percentile, et celles au-dessus du 95ème percentile). Notons que lorsque l’argument trim est mis à 0 (ce qui est son paramétrage par défaut), cela consiste à calculer la moyenne normale, et que lorsque l’argument trim est mis à 0.50, cela revient à calculer la médiane puisque la fonction supprime alors 50 % des observations de part et d’autre du milieu de la variable.Le modeLe mode désigne la valeur qui est la plus fréquemment retrouvée dans une variable. Il n’existe pas de fonction de base dans R pour pouvoir déterminer directement le mode et pour connaître le nombre de fois que le mode apparaît dans la variable. Toutefois, nous pouvons utiliser le package lsr crée par Danielle Navarro (2018) pour retrouver ces informations en présence d’une variable quantitative. Une fois le package lsr installé puis chargé, nous pouvons utiliser la fonction modeOf() pour déterminer le mode, et la fonction maxFreq() pour savoir à quelle fréquence revient le mode dans la variable.Bien que cela ne soit pas le cas dans l’exemple ci-dessus, il faut comprendre qu’il est à tout à fait possible d’avoir plusieurs modes si plusieurs valeurs reviennent à des fréquences similaires dans la variable. Dans ce cas, la fonction modeOf() affichera les différentes valeurs de mode, et la fonction maxFreq() continuera de n’afficher qu’une seule valeur de fréquence puisque par définition, le mode désigne la valeur associée à la fréquence d’apparition maximale dans la variable, il ne peut n’y avoir qu’une seule fréquence maximale… Cela signifie qu’une variable peut contenenir autant de modes que de valeurs si chaque valeur n’est représentée qu’une seule fois dans la variable. Cet inconvénient est probablement l’une des raisons pour lesquelles le mode n’est que très peu utilisé, si ce n’est jamais utilisé, pour décrire la tendance centrale d’une variable quantitative.","code":"\nsample_iris <- iris$Sepal.Length[1:5]\nsample_iris## [1] 5.1 4.9 4.7 4.6 5.0\n(5.1 + 4.9 + 4.7 + 4.6 + 5.0) / 5## [1] 4.86\nmean(x = sample_iris)## [1] 4.86\nsample_iris[2] <- NA\nsample_iris## [1] 5.1  NA 4.7 4.6 5.0\nmean(x = sample_iris)## [1] NA\nmean(x = sample_iris, na.rm = TRUE)## [1] 4.85\nmean(x = iris$Sepal.Length)## [1] 5.843333##   1   2   3   4   5 \n## 4.6 4.7 4.9 5.0 5.1##   1   2   3   4   5   6 \n## 4.6 4.7 4.9 5.0 5.1 5.4\nvec <- c(4.6, 4.7, 4.9, 5.0, 5.1, 5.4)\nmedian(x = vec)## [1] 4.95\nmean(x = iris$Sepal.Length, trim = 0.05)\nlibrary(lsr)\n\n# Détermination du mode\nmodeOf(x = iris$Sepal.Length)   ## [1] 5\n# Détermination de la fréquence du mode\nmaxFreq(x = iris$Sepal.Length)## [1] 10"},{"path":"analyses-descriptives-univariées.html","id":"les-indices-de-dispersion","chapter":"Chapitre 3 Analyses descriptives univariées","heading":"3.1.3 Les indices de dispersion","text":"Les indices de dispersion permettent de rendre compte de la manière selon laquelle les observations sont étalées, ou réparties, autour des indices de position. Plusieurs statistiques sont disponibles pour caractériser la dispersion, à savoir : l’étendue, l’écart-type, et l’intervalle interquartile.L’étendueL’étendue est la mesure la plus simple de la dispersion des données contenues dans une variable. Elle est exprimée avec la plus petite valeur (minimum) et la plus grande valeur (maximum) observée, ou alors parfois avec la différence de ces deux valeurs. Par exemple, dans la variable ci-dessous dont les données ont été classées en ordre croissant, le minimum est 4.5, le maximum est 20.2, et l’étendue peut être donnée par l’intervalle [4.5 – 20.2]. Pour obtenir ces différents résultats dans R, il est possible d’utiliser les fonctions min(), max(), et range(). L’amplitude de l’intervalle serait ici de : 20.2-4.5 = 15.7.L’écart-typeL’écart-type est une statistique qui donne une idée de la mesure selon laquelle les valeurs de la variable sont éloignées de la moyenne. Pour calculer l’écart-type, il faut en réalité d’abord calculer la variance \\(\\sigma^2\\), dont le calcul est le suivant :\n\\[\\sigma^2 = \\frac{1}{N}\\sum_{=1}^{N} (X{} - \\overline{X})^2\\]Cette formule signifie que pour obtenir la variance, il faut d’abord faire la somme des carrés des différences entre chaque valeur et la moyenne de la variable. Cela fait, la variance s’obtient en divisant cette somme de carrés par le nombre N de valeurs de la variable. L’écart-type \\(\\sigma\\), c’est alors la racine carrée de la variance :\n\\[\\sigma = \\sqrt{\\frac{1}{N}\\sum_{=1}^{N} (X{} - \\overline{X})^2}\\]Ces calculs sont valides lorsque l’en sa possession les données de toute la population que l’souhaite étudier. Toutefois, lorsque l’en sa possession des données issues seulement d’un échantillon de la population, ces calculs biaisent les estimations de la variance et de l’écart-type correspondant à la population étudiée. Cette notion de biais traduit le fait que lorsqu’répète un grand nombre de fois le calcul de la variance ou de l’écart-type à partir, à chaque fois, d’échantillons de population différents, en moyenne un décalage entre la valeur de l’estimation et la réelle valeur de la variance et de l’écart-type de la population. Ce décalage systématique est tel qu’il convient dans ce cas là de diviser la somme des carrés des différences (\\(X{} - \\overline{X}\\)) par N-1 plutôt que par N (Grenier, 2007). La formule de l’écart-type non biaisé, noté s, est alors la suivante :\n\\[s = \\sqrt{\\frac{1}{N-1}\\sum_{=1}^{N} (X{} - \\overline{X})^2}\\]L’écart-type est la mesure de dispersion classiquement associée à la moyenne. Si note une moyenne \\(\\overline{X}\\) et un écart-type s, alors le résumé d’une variable à l’aide de ces statistiques s’écrit comme suit : \\(\\overline{X}\\) ± s. Lorsque l’écart-type est divisé par la moyenne arithmétique de la variable, obtient une valeur appelée coefficient de variation. Avec le logiciel R, les fonctions pour calculer la variance et l’écart-type non biaisés sont respectivement var() et sd().L’intervalle interquartileL’intervalle interquartile désigne l’étendue entre le premier quartile (Q1) et le troisième quartile (Q3) d’une variable. Comme expliqué auparavant dans le cadre de la boîte à moustaches, Q1 et Q3 désignent respectivement les valeurs en-dessous desquelles 25 % et 75 % des observations de la variable se trouvent (Chatellier & Durieux, 2003). Pour un échantillon de taille N, la procédure classique pour calculer les quartiles est différente selon que le rapport N / 4 est un nombre entier ou non. Lorsque ce rapport n’est pas un nombre entier, Q1 est la valeur correspondant au rang immédiatement supérieur à N / 4. Par exemple, pour la variable ci-dessous, qui une taille N de 5 valeurs, le rapport N / 4 est égal à 1.25. Q1 est donc la valeur correspond au rang directement supérieur, c’est-à-dire au rang 2, qui est ici la valeur 7.8.Lorsque le rapport N / 4 est un nombre entier, Q1 correspond à la moyenne des valeurs associées respectivement aux rangs N / 4 et (N / 4) + 1. Par exemple, pour la variable ci-dessous, qui une taille N de 8 valeurs, le rapport N / 4 est à égal 2. Q1 est donc la moyenne des valeurs correspondant au rang 2 et au rang 3 (.e., les valeurs 7.8 et 10.8), qui équivaut ici à 9.3.La démarche demeure la même pour déterminer Q3, à ceci près qu’utilise le nombre 3N et non plus le nombre N pour les calculs (Labreuche, 2010). Cette méthode de calcul est en principe à privilégier en présence d’une variable discrète. Si l’souhaite obtenir les quartiles selon cette méthode avec le logiciel R, il faut utiliser la fonction quantile() de la manière suivante :remarque ici que la fonction quantile() plusieurs arguments. L’argument probs désigne les quantiles que l’souhaite obtenir. Le quantile 0.25 correspond à Q1, et le quantile 0.75 correspond à Q3. L’argument type permet de configurer le type de calcul à effectuer pour obtenir les valeurs des quantiles recherchés. L’indication du chiffre 2 pour l’argument type permet d’obtenir les quantiles selon la méthode de calcul présentée ci-dessus, qui, comme nous l’avons précisé, est dédiée à l’étude d’une variable quantitative discrète. Par défaut, en revanche, la fonction quantile() utilise le chiffre 7 pour l’argument type, ce qui renvoie à une méthode de calcul des quantiles qui serait davantage pertinente pour étudier des variables quantitatives continues. Comparons les résultats obtenus avec les deux méthodes de calcul :\nTableau 3.1: Comparaison des quantiles obtenus selon différentes configurations de la fonction quantile()\nTableau 3.1: Comparaison des quantiles obtenus selon différentes configurations de la fonction quantile()QuantileType 2Type 70.259.3010.0500.7531.5528.575On remarque que les résultats de la fonction quantile() sont différents selon la configuration de l’argument type. Le choix de la configuration est donc important. Pour comprendre comment R calculé les valeurs associées aux quantiles 0.25 et 0.75 dans le cadre de la seconde méthode (.e., avec type = 7), regardons le tableau ci-dessous.\nTableau 3.2: Quantiles d’une variable quantitative continue\nTableau 3.2: Quantiles d’une variable quantitative continueRangQuantileValeur10.00000004.520.14285717.830.285714310.840.428571413.950.571428620.260.714285725.670.857142937.581.000000043.9Le tableau montre les données sur lesquelles R s’est appuyé pour déterminer les valeurs des quantiles recherchés (.e., les quantiles 0.25 et 0.75 pour Q1 et Q3, respectivement). Les données du tableau sont bien celles relatives à notre variable vec, dont peut reconnaître les valeurs dans la colonne de droite du tableau. La colonne “Quantile” montre les fractions (ou portions) de la variable vec associées aux valeurs de la variable compte tenu de leurs rangs respectifs. Par exemple, la valeur 25.6, dont le rang est 6, correspond au quantile 0.71 (approximativement). Cela veut dire que 71 % des observations ont une valeur inférieure ou égale à 25.6. Il faut savoir qu’il existe en réalité plusieurs manières de déterminer la valeur du quantile que représente chaque valeur. Dans le cas présent, le quantile représenté, que l’va noter q, été déterminé selon la formule suivante :\n\\[q = (k - 1 ) / (N - 1)\\]\nDans le calcul ci-dessus, k désigne le rang de la valeur considérée, et N désigne la taille de la variable étudiée (.e., le nombre total de valeurs). Comme peut le voir dans le tableau ci-dessus, cette méthode de calcul conduit nécessairement à attribuer le quantile 0 à la valeur de rang 1, et la quantile 1 à la valeur de rang N. Lorsque le nombre de valeurs fait que les quantiles 0.25 et 0.75 n’existent pas, R réalise une interpolation de la valeur correspondant au quantile recherché, cela à partir des quantiles qui existent et qui encadrent le quantile recherché, ainsi qu’à partir des valeurs correspondant à ces quantiles. Dans le cas présent, il s’agit plus précisément d’une interpolation linéaire. Voyons sur la Figure 3.10 en quoi cela consiste.\nFigure 3.10: Détermination des quartiles Q1 et Q3 avec une variable quantitative continue\nLa figure représente les valeurs de la variable en fonction des quantiles qui leur correspondent. Les segments de couleur noire montrés sur la figure représentent les droites d’équation utilisées pour le calcul des valeurs correspondant aux quantiles 0.25 (Q1) et 0.75 (Q3), qui ne sont pas représentés initialement dans la variable étudiée. Ces droites d’équation relient les points dont les abscisses sont celles qui encadrent directement les quantiles recherchés. Ainsi, pour trouver la valeur correspondant au quantile 0.25, il suffi de résoudre l’équation y = 21x + 4.8, en remplaçant x par 0.25. De manière analogue, pour trouver la valeur correspondant au quantile 0.75, il suffi de résoudre l’équation y = 83.3x - 33.9 en remplaçant x par 0.75. Les solutions de ces équations sont montrées en rouge sur la partie gauche de la figure. retrouve bien les valeurs associées aux quantiles recherchés et qui avaient été initialement obtenues avec la configuration par défaut de la fonction quantile().Les quartiles Q1 et Q3 sont les mesures de dispersion classiquement associées à la médiane. Si note une médiane m et l’intervalle interquartile (Q1 - Q3), alors le résumé d’une variable à l’aide de ces statistiques s’écrit comme suit : m (Q1 - Q3).","code":"\nvec <- c(4.5, 7.8, 10.8, 13.9, 20.2)\nmin(vec)## [1] 4.5\nmax(vec)## [1] 20.2\nrange(vec)## [1]  4.5 20.2\nvec <- c(4.5, 7.8, 10.8, 13.9, 20.2)\nvar(x = vec)## [1] 36.153\nsd(x = vec)## [1] 6.012736##    1    2    3    4    5 \n##  4.5  7.8 10.8 13.9 20.2##    1    2    3    4    5    6    7    8 \n##  4.5  7.8 10.8 13.9 20.2 25.6 37.5 43.9\nquantile(x = vec, probs = c(0.25, 0.75), type = 2)##   25%   75% \n##  9.30 31.55"},{"path":"analyses-descriptives-univariées.html","id":"les-indices-dasymétrie-et-daplatissement","chapter":"Chapitre 3 Analyses descriptives univariées","heading":"3.1.4 Les indices d’asymétrie et d’aplatissement","text":"Le coefficient d’asymétrie (skewness)Le fait qu’une distribution soit asymétrique désigne le fait que les observations sont réparties de manière inégale de part et d’autre du milieu de la distribution. L’indice statistique qui permet de rendre compte du niveau d’asymétrie est le coefficient d’asymétrie, ou skewness en anglais. Ce coefficient peut être obtenu à l’aide de la fonction skewness() du package e1071, qui n’existe pas dans la base de R et qu’il convient d’installer et de charger pour l’utiliser.Comme peut le voir dans l’aide associée à la fonction skewness(), il existe en réalité plusieurs méthodes de calcul du coefficient d’asymétrie (noté \\(\\gamma_{1}\\) ci-dessous). La méthode de type 3, qui est celle configurée par défaut pour cette fonction, consiste à faire le calcul suivant :\\[\\gamma_{1} =  \\frac{1}{s^3} {\\frac{\\sum_{=1}^{N} (X{} - \\overline{X})^3}{N}}\\]\nDans ce calcul, s désigne l’écart-type non biaisé de la variable, et N désigne la taille de la variable. Avec cette méthode, obtient un coefficient négatif lorsque la distribution est asymétrique à gauche (longue queue vers la gauche), un coefficient de 0 lorsque la distribution est parfaitement symétrique, et un coefficient positif lorsque la distribution est asymétrique à droite (longue queue vers la droite). Ceci est illustré sur la Figure 3.11.\nFigure 3.11: Valeur du Skewness selon la forme de la distribution\nPour aller plus loin…\nJoanes et Gill (1998) ont montré que lorsqu’il s’agit d’estimer le degré d’asymétrie de la distribution relative à la population étudiée, et cela à partir de l’échantillon observé, certaines méthodes de calcul du coefficient d’asymétrie peuvent être plus fiables que d’autres.Dans le cas où la distribution des valeurs dans la population étudiée suivrait une loi normale, la méthode par défaut présentée ci-dessus serait la plus fiable pour estimer le niveau d’asymétrie lorsque l’échantillon observé est de petite taille (N < 50). Cependant, avec des échantillons de grande taille, les méthodes se valeraient.Dans le cas où la distribution des valeurs de la population étudiée ne suivrait pas une loi normale, et qu’elle s’avèrerait très asymétrique, la méthode de type 2 proposée avec la fonction skewness() serait la plus fiable, particulièrement en présence d’échantillons de petite taille.Le coefficient d’applatissement (kurtosis)Le fait qu’une distribution soit aplatie désigne le fait que la forme de la distribution présente une courbure relativement plate avec des queues de distribution relativement courtes. parle alors de distribution platycurtique. À l’inverse, lorsque la distribution est pointue avec des queues plus longues, parle de distribution leptocurtique. L’indice statistique qui permet de rendre compte du degré d’aplatissement est le coefficient d’aplatissement, ou kurtosis en anglais. Ce coefficient peut être obtenu à l’aide de la fonction kurtosis() du package e1071.Comme peut le voir dans l’aide associée à la fonction kurtosis(), il existe en réalité plusieurs méthodes de calcul du coefficient d’aplatissement (noté \\(\\gamma_{2}\\) ci-dessous) . La méthode de type 3, qui est celle configurée par défaut pour cette fonction, consiste à faire le calcul suivant :\\[\\gamma_{2} =  \\frac{1}{s^4} {\\frac{\\sum_{=1}^{N} (X{} - \\overline{X})^4}{N}} -3\\]\nDans ce calcul, s désigne l’écart-type non biaisé de la variable, et N désigne la taille de la variable. Avec cette méthode, obtient un coefficient négatif lorsque la distribution est particulièrement aplatie par rapport à une distribution suivant une loi normale (distribution platycurtique), un coefficient de 0 lorsque la distribution suit une loi normale (distribution mésocurtique), et un coefficient positif lorsque la distribution est particulièrement pointue par rapport à une loi normale (distribution leptocurtique). Ceci est illustré sur la Figure 3.12.\nFigure 3.12: Valeur du Kurtosis selon la forme de la distribution\nPour aller plus loin…\nComme avec le coefficient d’asymétrie, Joanes et Gill (1998) ont montré que lorsqu’il s’agit d’estimer le degré d’aplatissement de la distribution relative à la population étudiée, et cela à partir de l’échantillon observé, certaines méthodes de calcul du coefficient d’aplatissement peuvent être plus fiables que d’autres.Dans le cas où la distribution des valeurs dans la population étudiée suivrait une loi normale, la méthode de type 1 proposée avec la fonction kurtosis() serait la plus fiable pour estimer le niveau d’aplatissement lorsque l’échantillon observé est de petite taille (N < 50). Cependant, la méthode par défaut présentée plus haut fournirait des résultats relativement proches de ceux obtenus avec la méthode de type 1. De plus, avec des échantillons de grande taille, toutes les méthodes se valeraient.Dans le cas où la distribution des valeurs de la population étudiée ne suivrait pas une loi normale, et s’avèrerait très asymétrique, la méthode de type 2 proposée avec la fonction kurtosis() serait la plus fiable, particulièrement en présence d’échantillons de petite taille.","code":"\nlibrary(e1071)\nskewness(x = iris$Sepal.Width, type = 3)## [1] 0.3126147\nlibrary(e1071)\nkurtosis(x = iris$Sepal.Width, type = 3)## [1] 0.1387047"},{"path":"analyses-descriptives-univariées.html","id":"fonctions-pour-obtenir-un-récapitulatif-des-statistiques-descriptives","chapter":"Chapitre 3 Analyses descriptives univariées","heading":"3.1.5 Fonctions pour obtenir un récapitulatif des statistiques descriptives","text":"Il existe plusieurs fonctions pour avoir une vue d’ensemble des statistiques généralement utilisées pour explorer et résumer une variable quantitative. Une fonction particulièrement intéressante est la fonction describe() du package psych.La fonction describe() peut être utilisée sur une variable donnée :La fonction describe() peut être aussi utilisée sur un jeu de données entier. (Attention, les résumés numériques fournis pour les variables qualitatives n’auront pas de sens ; les variables qualitatives détectées sont indiquées avec un astérisque dans le tableau de résultats.)retrouve la plupart des statistiques que nous avons vues jusqu’à présent, notamment le skewness et le kurtosis qui ont été ici calculés avec la méthode par défaut du package e1071. Pour changer la méthode de calcul de ces deux coefficients, il suffit de modifier l’argument type de la fonction, comme dans le cadre de l’utilisation du package e1071 et des fonctions skewness() et kurtosis() associées. notera cependant qu’il ne semble pas possible de modifier la méthode de calcul des quantiles, qui sont ici calculés selon la méthode par défaut configurée telle qu’avec la fonction quantile().Enfin, il est aussi possible d’obtenir ces récapitulatifs numériques en fonction des modalités d’une variable qualitative du jeu de données, grâce à la fonction describeBy() du package psych. Dans l’exemple ci-dessous, la variable qualitative est indiquée grâce à l’argument group.","code":"\nlibrary(psych)\ndescribe(x = iris$Sepal.Width, quant = c(0.25, 0.75))##   vars   n mean   sd median trimmed  mad min max range skew kurtosis\n## 1    1 150 3.06 0.44      3    3.04 0.44   2 4.4   2.4 0.31     0.14\n##     se Q0.25 Q0.75\n## 1 0.04   2.8   3.3\ndescribe(x = iris, quant = c(0.25, 0.75))##              vars   n mean   sd median trimmed  mad min max range\n## Sepal.Length    1 150 5.84 0.83   5.80    5.81 1.04 4.3 7.9   3.6\n## Sepal.Width     2 150 3.06 0.44   3.00    3.04 0.44 2.0 4.4   2.4\n## Petal.Length    3 150 3.76 1.77   4.35    3.76 1.85 1.0 6.9   5.9\n## Petal.Width     4 150 1.20 0.76   1.30    1.18 1.04 0.1 2.5   2.4\n## Species*        5 150 2.00 0.82   2.00    2.00 1.48 1.0 3.0   2.0\n##               skew kurtosis   se Q0.25 Q0.75\n## Sepal.Length  0.31    -0.61 0.07   5.1   6.4\n## Sepal.Width   0.31     0.14 0.04   2.8   3.3\n## Petal.Length -0.27    -1.42 0.14   1.6   5.1\n## Petal.Width  -0.10    -1.36 0.06   0.3   1.8\n## Species*      0.00    -1.52 0.07   1.0   3.0\ndescribeBy(x = iris, quant = c(0.25, 0.75), group = iris$Species)## \n##  Descriptive statistics by group \n## group: setosa\n##              vars  n mean   sd median trimmed  mad min max range skew\n## Sepal.Length    1 50 5.01 0.35    5.0    5.00 0.30 4.3 5.8   1.5 0.11\n## Sepal.Width     2 50 3.43 0.38    3.4    3.42 0.37 2.3 4.4   2.1 0.04\n## Petal.Length    3 50 1.46 0.17    1.5    1.46 0.15 1.0 1.9   0.9 0.10\n## Petal.Width     4 50 0.25 0.11    0.2    0.24 0.00 0.1 0.6   0.5 1.18\n## Species*        5 50 1.00 0.00    1.0    1.00 0.00 1.0 1.0   0.0  NaN\n##              kurtosis   se Q0.25 Q0.75\n## Sepal.Length    -0.45 0.05   4.8  5.20\n## Sepal.Width      0.60 0.05   3.2  3.68\n## Petal.Length     0.65 0.02   1.4  1.58\n## Petal.Width      1.26 0.01   0.2  0.30\n## Species*          NaN 0.00   1.0  1.00\n## ---------------------------------------------------- \n## group: versicolor\n##              vars  n mean   sd median trimmed  mad min max range\n## Sepal.Length    1 50 5.94 0.52   5.90    5.94 0.52 4.9 7.0   2.1\n## Sepal.Width     2 50 2.77 0.31   2.80    2.78 0.30 2.0 3.4   1.4\n## Petal.Length    3 50 4.26 0.47   4.35    4.29 0.52 3.0 5.1   2.1\n## Petal.Width     4 50 1.33 0.20   1.30    1.32 0.22 1.0 1.8   0.8\n## Species*        5 50 2.00 0.00   2.00    2.00 0.00 2.0 2.0   0.0\n##               skew kurtosis   se Q0.25 Q0.75\n## Sepal.Length  0.10    -0.69 0.07  5.60   6.3\n## Sepal.Width  -0.34    -0.55 0.04  2.52   3.0\n## Petal.Length -0.57    -0.19 0.07  4.00   4.6\n## Petal.Width  -0.03    -0.59 0.03  1.20   1.5\n## Species*       NaN      NaN 0.00  2.00   2.0\n## ---------------------------------------------------- \n## group: virginica\n##              vars  n mean   sd median trimmed  mad min max range\n## Sepal.Length    1 50 6.59 0.64   6.50    6.57 0.59 4.9 7.9   3.0\n## Sepal.Width     2 50 2.97 0.32   3.00    2.96 0.30 2.2 3.8   1.6\n## Petal.Length    3 50 5.55 0.55   5.55    5.51 0.67 4.5 6.9   2.4\n## Petal.Width     4 50 2.03 0.27   2.00    2.03 0.30 1.4 2.5   1.1\n## Species*        5 50 3.00 0.00   3.00    3.00 0.00 3.0 3.0   0.0\n##               skew kurtosis   se Q0.25 Q0.75\n## Sepal.Length  0.11    -0.20 0.09  6.23  6.90\n## Sepal.Width   0.34     0.38 0.05  2.80  3.18\n## Petal.Length  0.52    -0.37 0.08  5.10  5.88\n## Petal.Width  -0.12    -0.75 0.04  1.80  2.30\n## Species*       NaN      NaN 0.00  3.00  3.00"},{"path":"analyses-descriptives-univariées.html","id":"quelles-statistiques-choisir-pour-résumer-une-variable-quantitative-dans-un-rapport","chapter":"Chapitre 3 Analyses descriptives univariées","heading":"3.1.6 Quelles statistiques choisir pour résumer une variable quantitative dans un rapport ?","text":"Les statistiques les plus couramment utilisées pour résumer une variable quantitative sont les paramètres de position (moyenne et médiane principalement) en lien avec les paramètres de dispersion correspondants. Aucun paramètre de position ne surpasse les autres dans toutes les situations. Le choix du paramètre de position, en lien avec le paramètre de dispersion associé, dépend de l’objectif de l’analyse.Lorsqu’il s’agit de simplement décrire une distribution des données obtenues à titre exploratoire, certains auteurs proposent d’utiliser les trois paramètres de position (moyenne, médiane, mode), en sachant que la médiane, d’un point de vue purement descriptif, peut être le paramètre le plus adapté dans de nombreuses situations (Gonzales & Ottenbacher, 2001). Dans le cas où la distribution s’avèrerait plutôt gaussienne, la moyenne et l’écart-type sont intéressants car dans ce cas, sait que :Approximativement 68.3 % des observations sont comprises dans l’intervalle [\\(\\overline{X}\\) - 1 s ; \\(\\overline{X}\\) + 1 s],Approximativement 95.5 % des observations sont comprises dans l’intervalle [\\(\\overline{X}\\) - 2 s ; \\(\\overline{X}\\) + 2 s],Approximativement 99.7 % des observations sont comprises dans l’intervalle [\\(\\overline{X}\\) - 3 s ; \\(\\overline{X}\\) + 3 s].Ceci est illustré sur la Figure 3.13.\nFigure 3.13: Proportions des observations incluses dans différents intervalles liés à la moyenne et à des multiples de l’écart-type\nLorsqu’il s’agit plus précisément de vouloir renseigner sur la tendance centrale relative à l’échantillon étudié, le choix dépend de la forme de la distribution observée. Lorsque la distribution est gaussienne, la moyenne, la médiane, et le mode, sont similaires et donc se valent. Toutefois, lorsque la distribution est asymétrique et unimodale (.e., avec un seul pic), le mode reflètera mieux la tendance centrale. De plus, lorsque la distribution est asymétrique, la médiane aura tendance à mieux représenter la tendance centrale que la moyenne (Rousselet & Wilcox, 2020). Notons que dans certains cas où la distribution semble asymétrique, la médiane peut se retrouver malgré tout plus éloignée du mode que la moyenne, comme illustré dans l’exemple emprunté à Gonzales et al. qui est montré sur la Figure 3.14 (2001).\nFigure 3.14: Exemples de positions de la moyenne et de la médiane dans le cadre d’une distribution asymétrique\n","code":""},{"path":"analyses-descriptives-univariées.html","id":"variables-qualitatives","chapter":"Chapitre 3 Analyses descriptives univariées","heading":"3.2 Variables qualitatives","text":"","code":""},{"path":"analyses-descriptives-univariées.html","id":"visualiser-la-distribution-de-la-variable-1","chapter":"Chapitre 3 Analyses descriptives univariées","heading":"3.2.1 Visualiser la distribution de la variable","text":"Comme dans le cadre de variables quantitatives, une bonne pratique est de visualiser graphiquement la distribution d’une variable qualitative avant de l’analyser. Ici, il s’agit plus précisément de prendre connaissance des effectifs correspondant aux différentes modalités de la variable. Une manière rapide de procéder pour cela est d’utiliser la fonction ggplot() et la fonction geom_bar(). Illustrons cela avec le jeu de données diamonds, qui contient notamment la variable qualitative color.\nFigure 3.15: Exemple de diagramme en barres\nBien que rapide, la manière de procéder avec le code montré ci-avant devient vite limitée lorsque l’veut enrichir le graphique, tel qu’en ajoutant les valeurs des effectifs au-dessus des barres ou encore en changeant l’ordre de disposition des barres. Pour gagner en capacité de modification du graphique, peut d’abord passer par une étape intermédiaire consistant à créer un mini-jeu de données où la variable color serait déjà résumée à l’aide des fonctions group_by() et summarize() du package dplyr, de telle sorte à n’avoir que la valeur de l’effectif en regard de chaque modalité. Ceci est montré dans le code ci-dessous.Si l’poursuit le code avec les fonctions ggplot() et geom_bar() (cf. code ci-dessous), arrive alors au même résultat que précédemment (cf Figure 3.15). note qu’il fallu adapter l’argument stat de la fonction geom_bar() pour que le graphique montre bien en ordonnées la valeur de la variable nouvellement appelée count, qui comprend les effectifs de chaque modalité.Certes, pour le moment, cette seconde procédure n’fait que rajouter des étapes par rapport à la première procédure. Toutefois, en reprenant la logique de la seconde procédure, peut à présent créer des graphiques en barres plus élaborés relativement facilement, comme montré ci-dessous.\nFigure 3.16: Différentes sortes de diagrammes en barres\nDans le code montré ci-dessus, remarque que le réagencement manuel des barres (cf. graphique B) pu être réalisé grâce à la fonction fct_relevel() du package forcats. Pour les autres diagrammes, la réorganisation des barres en ordre croissant ou décroissant sur la base de la valeur de l’effectif (count) pu se faire grâce à la fonction fct_reorder() du package forcats. Les noms des arguments de ces fonctions n’ont pas été indiqués pour alléger le code. Le plus important, c’est d’indiquer en premier dans la fonction la variable dont l’ordre d’apparition des modalités doit être réorganisé (il s’agissait de la variable color dans cet exemple). En second, il convient d’indiquer la logique de réorganisation de l’apparition des modalités (ce qui été fait sur la base des valeurs de la variable count dans les exemples ci-dessus utilisant la fonction fct_reorder()).Toujours dans le code montré ci-dessus, peut voir aussi, dans la fonction geom_text() du graphique , la présence de l’argument nudge_y. Cet argument permet de régler le décalage entre le haut de la barre et le texte. L’ordre de grandeur du chiffre indiqué est celui de la variable indiquée en ordonnées.observe que la réorganisation des barres selon un ordre croissant ou décroissant clarifie l’information délivrée par le graphique. Toutefois, cette réorganisation est en principe surtout recommandée pour des variables qualitative nominales, c’est-à-dire des variables pour lesquelles il n’existe pas un ordre naturel des modalités. Lorsqu’il existe un ordre naturel des modalités, comme c’est le cas pour des variables qualitatives ordinales, les modalités devraient préférentiellement suivre leur ordre naturel.En plus des effectifs, il est aussi possible de prendre connaissance de la distribution à l’aide des proportions, c’est-à-dire des ratios entre les effectifs liés aux différentes modalités et l’effectif total. Les proportions peuvent être visualisées avec un diagramme circulaire (.e., un camembert), avec un diagramme en barres empilées, ou avec des barres disposées côte-à-côte. Les diagrammes circulaires et avec barres empilées mettent en avant le fait que les parties individuelles étudiées font partie d’un même ensemble. Les diagrammes circulaires peuvent être utilisés efficacement à cet effet lorsqu’ils montrent des fractions simples telles qu’un quart, un tiers, ou une moitié. Toutefois, les parties individuelles sont plus facilement comparables lorsqu’utilise des barres mises côte-à-côte, comme montré ci-avant. Les diagrammes avec barres empilées sont quant à eux difficiles à comprendre lorsqu’il s’agit de n’étudier qu’une seule variable qualitative (Wilke, 2018).\nFigure 3.17: Différentes sortes de diagrammes pour représenter des proportions\n","code":"\n# Aperçu du jeu de données\ndiamonds## # A tibble: 53,940 × 10\n##    carat cut       color clarity depth table price     x     y     z\n##    <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n##  1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n##  2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n##  3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n##  4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n##  5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n##  6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n##  7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n##  8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n##  9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n## 10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n## # … with 53,930 more rows\n# Visualisation de la distribution de la variable color\ndiamonds %>% \n  ggplot(aes(x = color)) + \n    geom_bar()\ndiamonds %>% \n  group_by(color) %>%\n  summarize(count = n())## # A tibble: 7 × 2\n##   color count\n##   <ord> <int>\n## 1 D      6775\n## 2 E      9797\n## 3 F      9542\n## 4 G     11292\n## 5 H      8304\n## 6 I      5422\n## 7 J      2808\ndiamonds %>% \n  group_by(color) %>%\n  summarize(count = n()) %>%\n  ggplot(aes(x = color, y = count)) +\n     geom_bar(stat = \"identity\")\n# Diagramme en barres avec les effectifs affichés à proximité des barres\nA <- \n  diamonds %>% \n  group_by(color) %>%\n  summarize(count = n()) %>%\n  ggplot(aes(x = color, y = count)) +\n     geom_bar(stat = \"identity\") +\n     geom_text(aes(label = count, x = color, y = count), \n               size = 2, nudge_y = 700) +\n     ggtitle(\"A\")\n\n# Diagramme en barres réorganisées manuellement\nB <- \n  diamonds %>% \n  group_by(color) %>%\n  summarize(count = n()) %>%\n  ggplot(aes(x = fct_relevel(color, \"J\", \"I\", \"H\", \"G\", \"F\", \"E\", \"D\"), \n             y = count)) +\n     geom_bar(stat = \"identity\") +\n     xlab(\"color\") +\n     ggtitle(\"B\") \n\n# Diagramme en barres réorganisées en ordre croissant\nC <- \n  diamonds %>% \n  group_by(color) %>%\n  summarize(count = n()) %>%\n  ggplot(aes(x = fct_reorder(color, count), y = count)) +\n     geom_bar(stat = \"identity\") +\n     xlab(\"color\") +\n     ggtitle(\"C\") \n\n# Diagramme en barres réorganisées en ordre décroissant\nD <- \n  diamonds %>% \n  group_by(color) %>%\n  summarize(count = n()) %>%\n  ggplot(aes(x = fct_reorder(color, -count), y = count)) +\n     geom_bar(stat = \"identity\") +\n     xlab(\"color\") +\n     ggtitle(\"D\") \n\n# Diagramme en barres pivoté\nE <- \n  diamonds %>% \n  group_by(color) %>%\n  summarize(count = n()) %>%\n  ggplot(aes(x = fct_reorder(color, -count), y = count)) +\n  geom_bar(stat = \"identity\") +\n     coord_flip() +\n     ggtitle(\"E\")\n\n# Dotplot pivoté\nF <- \n  diamonds %>% \n  group_by(color) %>%\n  summarize(count = n()) %>%\n  ggplot(aes(x = fct_reorder(color, -count), y = count)) +\n     geom_point() +\n     coord_flip() +\n     ggtitle(\"F\")\n# Diagramme en barres empilées montrant les effectifs\nA <- \n  diamonds %>% \n  group_by(color) %>%\n  summarize(count = n()) %>%\n  ggplot(aes(x = \"\", y = count, fill = color)) +\n  geom_bar(stat = \"identity\", na.rm = TRUE) +\n  geom_text(aes(label = count), size = 2, \n            position = position_stack(vjust = 0.5)) +\n  ggtitle(\"A\")\n  \n# Diagramme en barres empilées montrant les proportions\nB <- \n  diamonds %>% \n  group_by(color) %>%\n  summarize(count = n() / length(diamonds$color) * 100) %>%\n  ggplot(aes(x = \"\", y = count, fill = color)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(count, digits = 2), \" %\")), size = 2, \n            position = position_stack(vjust = 0.5)) +\n  ggtitle(\"B\")\n\n# Diagramme circulaire montrant les effectifs\nC <- \n  diamonds %>% \n  group_by(color) %>%\n  summarize(count = n()) %>%\n  ggplot(aes(x = \"\", y = count, fill = color)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_polar(theta = \"y\", start = 0, direction = -1) +\n  geom_text(aes(label = count), size = 2, \n            position = position_stack(vjust = 0.5)) +\n  ggtitle(\"C\")\n\n# Diagramme circulaire montrant les proportions\nD <-\n  diamonds %>% \n  group_by(color) %>%\n  summarize(count = n() / length(diamonds$color) * 100) %>%\n  ggplot(aes(x = \"\", y = count, fill = color)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_polar(theta = \"y\", start = 0, direction = -1) +\n  geom_text(aes(label = paste0(round(count, digits = 2), \" %\")), size = 2, \n            position = position_stack(vjust = 0.5)) +\n  ggtitle(\"D\")"},{"path":"analyses-descriptives-univariées.html","id":"déterminer-la-tendance-centrale","chapter":"Chapitre 3 Analyses descriptives univariées","heading":"3.2.2 Déterminer la tendance centrale","text":"Dans le cadre de variables qualitatives, la tendance centrale peut être renseignée à l’aide du mode en présence d’une variable nominale, et à l’aide de la médiane ou du mode en présence d’une variable ordinale (Gonzales & Ottenbacher, 2001). Avec des variables qualitatives, il est possible de prendre connaissance du mode facilement à l’aide d’un tableau de résultats qui récapitule, par ordre décroissant, les effectifs et les proportions associées aux différentes modalités de la variable étudiée. Ce type de tableau peut être obtenu à l’aide de la fonction freq() du package questionr, qu’il convient d’installer et charger au préalable afin de pouvoir l’utiliser. Dans l’exemple ci-dessous, le mode de la variable color dans le jeu de données diamonds est la modalité présente sur la première ligne du tableau.","code":"\nlibrary(questionr)\nfreq(diamonds$color, valid = TRUE, total = TRUE, sort = \"dec\")##           n     %  val%\n## G     11292  20.9  20.9\n## E      9797  18.2  18.2\n## F      9542  17.7  17.7\n## H      8304  15.4  15.4\n## D      6775  12.6  12.6\n## I      5422  10.1  10.1\n## J      2808   5.2   5.2\n## Total 53940 100.0 100.0"},{"path":"analyses-descriptives-univariées.html","id":"résumé-2","chapter":"Chapitre 3 Analyses descriptives univariées","heading":"3.3 Résumé","text":"En statistiques, la notion de population désigne l’ensemble des individus existant qui présentent un ou plusieurs critères d’intérêt. Un échantillon est alors une fraction de la population étudiée, composée d’individus qui en principe sont représentatifs de la population étudiée.En statistiques, la notion de population désigne l’ensemble des individus existant qui présentent un ou plusieurs critères d’intérêt. Un échantillon est alors une fraction de la population étudiée, composée d’individus qui en principe sont représentatifs de la population étudiée.Avec R, les graphiques peuvent être réalisés, en autres, à l’aide du package ggplot2 et des fonctions associées.Avec R, les graphiques peuvent être réalisés, en autres, à l’aide du package ggplot2 et des fonctions associées.Lors de l’analyse d’une variable quantitative, une première étape doit être de visualiser graphiquement la distribution des observations. Cela peut se faire à l’aide :\nd’un histogramme avec la fonction ggplot2::geom_histogram() ;\nd’une boîte à moustaches avec la fonction ggplot2::geom_boxplot() ;\nou encore d’un nuage de points avec la fonction ggplot2::geom_point().\nLors de l’analyse d’une variable quantitative, une première étape doit être de visualiser graphiquement la distribution des observations. Cela peut se faire à l’aide :d’un histogramme avec la fonction ggplot2::geom_histogram() ;d’une boîte à moustaches avec la fonction ggplot2::geom_boxplot() ;ou encore d’un nuage de points avec la fonction ggplot2::geom_point().Ces trois derniers types de graphiques peuvent être obtenus simultanément à l’aide de la fonction plot_distri() présentée dans ce chapitre.Ces trois derniers types de graphiques peuvent être obtenus simultanément à l’aide de la fonction plot_distri() présentée dans ce chapitre.La distribution d’une variable quantitative peut être notamment de forme gaussienne, asymétrique, leptocurtique, ou encore platycurtique.La distribution d’une variable quantitative peut être notamment de forme gaussienne, asymétrique, leptocurtique, ou encore platycurtique.Les indices de position disponibles pour résumer une variable quantitative sont la moyenne (mean()), la médiane (median()), le mode (lsr::modeOf()), et la moyenne rognée (mean(trim = ...)).Les indices de position disponibles pour résumer une variable quantitative sont la moyenne (mean()), la médiane (median()), le mode (lsr::modeOf()), et la moyenne rognée (mean(trim = ...)).Les indices de dispersion disponibles pour résumer une variable quantitative sont l’étendue (min(), max(), range()), l’écart-type (sd()), et les quartiles (quantile(probs = c(0.25, 0.75))).Les indices de dispersion disponibles pour résumer une variable quantitative sont l’étendue (min(), max(), range()), l’écart-type (sd()), et les quartiles (quantile(probs = c(0.25, 0.75))).L’indice statistique permettant de décrire le niveau d’asymétrie d’une variable quantitative est le coefficient d’asymétrie (e1071::skewness()).L’indice statistique permettant de décrire le niveau d’asymétrie d’une variable quantitative est le coefficient d’asymétrie (e1071::skewness()).L’indice statistique permettant de décrire le niveau d’aplatissement d’une variable quantitative est le coefficient d’aplatissement (e1071::kurtosis()).L’indice statistique permettant de décrire le niveau d’aplatissement d’une variable quantitative est le coefficient d’aplatissement (e1071::kurtosis()).Les fonctions psych::describe() et psych::describeBy() permettent de récapituler les indices statistiques généralement étudiés dans le cadre de variables quantitatives.Les fonctions psych::describe() et psych::describeBy() permettent de récapituler les indices statistiques généralement étudiés dans le cadre de variables quantitatives.Lorsque la distribution d’une variable quantitative est gaussienne, approximativement 68.3 %, 95.5 %, et 99.7 % des observations sont situées dans ± 1 s, ± 2 s, et ± 3 s autour de la moyenne, respectivement (s étant l’écart-type de la variable).Lorsque la distribution d’une variable quantitative est gaussienne, approximativement 68.3 %, 95.5 %, et 99.7 % des observations sont situées dans ± 1 s, ± 2 s, et ± 3 s autour de la moyenne, respectivement (s étant l’écart-type de la variable).Lorsque la distribution d’une variable quantitative est asymétrique, la médiane peut être l’indicateur le plus adapté pour décrire la tendance centrale, en particulier en présence de petits échantillons.Lorsque la distribution d’une variable quantitative est asymétrique, la médiane peut être l’indicateur le plus adapté pour décrire la tendance centrale, en particulier en présence de petits échantillons.Lors de l’analyse d’une variable qualitative, une première étape doit être de visualiser graphiquement la distribution des effectifs. Cela peut se faire à l’aide d’un diagramme en barres (ggplot2::geom_bar()).Lors de l’analyse d’une variable qualitative, une première étape doit être de visualiser graphiquement la distribution des effectifs. Cela peut se faire à l’aide d’un diagramme en barres (ggplot2::geom_bar()).Les variables qualitatives nominales devraient être visualisées avec une organisation des modalités selon un ordre croissant ou décroissant.Les variables qualitatives nominales devraient être visualisées avec une organisation des modalités selon un ordre croissant ou décroissant.Les variables qualitatives ordinales devraient être visualisées avec une organisation des modalités selon leur ordre naturel.Les variables qualitatives ordinales devraient être visualisées avec une organisation des modalités selon leur ordre naturel.Dans le cadre de variables qualitatives nominales, la tendance centrale peut être étudiée à l’aide du mode.Dans le cadre de variables qualitatives nominales, la tendance centrale peut être étudiée à l’aide du mode.Dans le cadre de variables qualitatives ordinales, la tendance centrale peut être étudiée à l’aide de la médiane ou du mode.Dans le cadre de variables qualitatives ordinales, la tendance centrale peut être étudiée à l’aide de la médiane ou du mode.La fonction questionr::freq() permet de récapituler les effectifs et les proportions relatifs aux modalités d’une variable qualitative.La fonction questionr::freq() permet de récapituler les effectifs et les proportions relatifs aux modalités d’une variable qualitative.","code":""},{"path":"analyses-descriptives-bivariées.html","id":"analyses-descriptives-bivariées","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"Chapitre 4 Analyses descriptives bivariées","text":"Réaliser une analyse bivariée désigne le fait d’étudier la relation qui peut exister entre deux variables. Dans ce chapitre, nous allons voir les procédures graphiques et calculatoires qui permettent d’étudier et de quantifier le degré de relation pouvant exister entre deux variables dans les cas suivants : entre deux variables quantitatives, entre deux variables qualitatives, et entre une variable quantitative et une variable qualitative. Comme dans le chapitre précédent, l’objectif est ici d’explorer et de décrire les données et leurs relations à l’échelle d’un échantillon, sans pour autant chercher à déterminer l’incertitude qu’il peut exister dans les statistiques calculées en vue de les utiliser pour réaliser une inférence dans la population représentée.","code":""},{"path":"analyses-descriptives-bivariées.html","id":"relation-entre-deux-variables-quantitatives","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.1 Relation entre deux variables quantitatives","text":"","code":""},{"path":"analyses-descriptives-bivariées.html","id":"étudier-graphiquement-la-relation","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.1.1 Étudier graphiquement la relation","text":"Comme dans le cadre d’analyses univariées, une bonne pratique, lorsqu’étudie une relation bivariée, est de faire un graphique. Avec des variables quantitatives, il s’agit de montrer les valeurs d’une variable en fonction des valeurs de l’autre variable, chose que permet un simple nuage de points. Plusieurs types de relations peuvent alors être rencontrés, ces relations pouvant potentiellement s’apparenter à autant de fonctions mathématiques que l’connaît. Parmi les plus connues, par exemple les relations linéaires, les relations logarithmiques, ou encore les relations quadratiques, qui sont illustrées sur la Figure 4.1.\nFigure 4.1: Différentes formes de relation entre deux variables quantitatives\nAvec R, pour obtenir un nuage de points à partir d’un jeu de données, il est possible d’utiliser la fonction ggplot() en l’associant à la fonction geom_point() du package ggplot2, comme dans l’exemple ci-dessous qui utilise le jeu de données mtcars (qui est intégré à R de base) et les variables hp (gross horsepower) et mpg (miles/US gallon). Dans cet exemple dont le résultat est montré sur la Figure 4.2, peut voir que la relation semble globalement linéaire négative (voire curvilinéaire négative si l’donne de l’importance au point isolé à droite du graphique).\nFigure 4.2: Nuage de points montrant les variables hp et mpg du jeu de données mtcars\n","code":"\nggplot(data = mtcars, aes(x = hp, y = mpg)) + \n  geom_point()"},{"path":"analyses-descriptives-bivariées.html","id":"étudier-numériquement-la-relation","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.1.2 Étudier numériquement la relation","text":"Le coefficient de corrélation de PearsonLorsque la relation étudiée semble linéaire, l’étude numérique classique consiste à calculer le coefficient de corrélation de Pearson, noté \\(r\\), dont la valeur vise à renseigner dans quelle mesure le nuage de points représentant le lien entre les deux variables étudiées suit une droite. Avant de se lancer dans le calcul du coefficient de corrélation de Pearson pour étudier la relation entre une variable \\(X\\) et une variable \\(Y\\), il peut donc être utile de compléter le nuage de points montré sur la Figure 4.2 avec une droite d’équation de type \\(Y = aX + b\\). Cette équation serait la meilleure modélisation possible de la relation linéaire entre \\(X\\) et \\(Y\\), de telle sorte que parmi l’infinité d’équations qui pourraient lier \\(X\\) à \\(Y\\), c’est cette équation qui au total donnerait la plus petite erreur lorsque l’voudrait prédire \\(Y\\) à partir de \\(X\\). Si \\(X\\) et \\(Y\\) sont liées de manière linéaire, alors le nuage des points relatifs aux deux variables devrait s’étaler le long de cette droite. Pour obtenir cette droite en plus du nuage de points, il est possible d’utiliser la fonction geom_smooth() du package ggplot2.\nFigure 4.3: Nuage de points avec droite de régression pour les variables hp et mpg jeu de données mtcars\nDans la fonction geom_smooth() qui été utilisée dans l’exemple ci-dessus, note que l’argument formula pourrait être considéré comme facultatif car il s’agit ici de la configuration par défaut de la fonction. En revanche, l’argument method doit être ici configuré avec \"lm\" (pour linear model) car ce n’est pas la méthode graphique configurée par défaut dans la fonction. Enfin, l’argument se permet de montrer ou non un intervalle de confiance autour de la droite de régression, ce qui n’pas été activé ici (par défaut, l’argument se est configuré pour montrer cet intervalle de confiance). Dans l’exemple montré ci-dessus, la représentation graphique encourage fortement à penser que l’un des types de relations à envisager prioritairement dans l’étude des deux variables est la relation linéaire. Cette information rend pertinente l’utilisation du coefficient de corrélation de Pearson pour une étude numérique de la relation en question.La valeur du coefficient de corrélation de Pearson peut aller de 1 (suggérant une relation linéaire positive parfaite) à -1 (suggérant une relation linéaire négative parfaite). Des valeurs proches de 0 suggèreraient une abscence de relation linéaire. La formule du coefficient de corrélation de Pearson (\\(r\\)) pour un échantillon est la suivante :\\[r_{X,Y} =  {\\frac{COV_{X,Y}}{s_{X} s_{Y}}} =  {\\frac{\\sum_{=1}^{N} (X{} - \\overline{X}) (Y{} - \\overline{Y})}{N-1}} {\\frac{1}{s_{X} s_{Y}}},\\]\\(COV\\) désignant la covariance entre les variables \\(X\\) et \\(Y\\), \\(X{}\\) et \\(Y{}\\) les valeurs de \\(X\\) et \\(Y\\) pour une observation \\(\\), \\(\\overline{X}\\) et \\(\\overline{Y}\\) les moyennes respectives des variables \\(X\\) et \\(Y\\), \\(N\\) le nombre d’observations, et \\(s_{X}\\) et \\(s_{Y}\\) les écarts-types respectifs des variables \\(X\\) et \\(Y\\). Cette formule indique que le coefficient de corrélation de Pearson s’obtient en divisant la covariance des deux variables étudiées par le produit de leurs écarts-types respectifs.Le Tableau 4.1 montre les premières étapes du calcul de la covariance pour des couples de variables fictifs \\((X1,Y1)\\), \\((X1,Y2)\\), et \\((X1,Y3)\\). En particulier, la partie droite du tableau (de X1Y1 à X1Y3) montre le calcul du produit \\((X{} - \\overline{X}) (Y{} - \\overline{Y})\\) pour les différents couples de variables et cela pour chaque ligne du jeu de données.\nTableau 4.1: Étape intermédiaire pour le calcul de la covariance entre des variables X1 et Y1, Y2, et Y3\nTableau 4.1: Étape intermédiaire pour le calcul de la covariance entre des variables X1 et Y1, Y2, et Y3X1Y1Y2Y3X1Y1X1Y2X1Y300003640.285714-36221-21622.857143-164415-44-16.571429-4665-600.00000008811-848.571429-410103-1016-14.857143-16121212-123631.714286-36Ce que ce tableau montre, c’est que plus les deux variables étudiées évolueront de manière consistante dans des sens identiques comme avec \\(X1\\) et \\(Y1\\), ou de manière consistante dans des sens opposés comme avec \\(X1\\) et \\(Y3\\), plus les produits \\((X{} - \\overline{X}) (Y{} - \\overline{Y})\\) donneront respectivement des grands scores positifs ou des grands scores négatifs, et moins les scores \\((X{} - \\overline{X}) (Y{} - \\overline{Y})\\) à additionner pour le calcul de la covariance s’annuleront. En effet, avec une relation relativement linéaire et positive les scores seront plus systématiquement positifs, et avec une relation relativement linéaire et négative les scores seront plus systématiquement négatifs. Toutefois, lorsqu’aura des variables qui n’évolueront pas de manière consistante dans le même sens ou dans un sens opposé comme avec \\(X1\\) et \\(Y2\\), les scores positifs et négatifs liés aux calculs \\((X{} - \\overline{X}) (Y{} - \\overline{Y})\\) auront tendance à s’annuler et donneront lieu à une somme des scores \\((X{} - \\overline{X}) (Y{} - \\overline{Y})\\) diminuée, et donc à une covariance et à un coefficient de corrélation de Pearson tirés vers 0. Ces différents cas de figure et les calculs \\((X{} - \\overline{X}) (Y{} - \\overline{Y})\\) correspondants sont illustrés sur la Figure 4.4. Sur cette figure, chaque carré correspond au calcul \\((X{} - \\overline{X}) (Y{} - \\overline{Y})\\), le carré étant bleu lorsque le résultat du calcul est positif, et rouge lorsque le résultat est négatif. L’aire d’un carré illustre la grandeur du score issu du calcul. Sur les graphiques de gauche et de droite de la figure, distingue une relation linéaire parfaite, ce qui maximise les scores à additionner pour le calcul de la covariance, dans le positif pour le graphique de gauche et dans le négatif pour le graphique de droite. Sur le graphique du milieu, remarque que le manque de relation linéaire donne lieu à des carrés à la fois bleus et rouges, indiquant que les scores associés aux calculs \\((X{} - \\overline{X}) (Y{} - \\overline{Y})\\) de la covariance s’annulent et diminuent ainsi la valeur finale de la covariance.\nFigure 4.4: Illustration du calcul de la covariance\nDans R, le coefficient de corrélation de Pearson peut être obtenu avec la fonction cor(). Dans l’exemple ci-dessous qui reprend les variables du jeu de données mtcars utilisées plus haut, observe un coefficient négatif, relativement proche de -1, suggérant une relation relativement linéaire et négative entre les variables étudiées.Toutefois, la fonction cor.test() sera plus intéressante pour la suite car elle permet de calculer des indices statistiques de probabilité qui seront nécessaires dès lors qu’il s’agira de chercher à inférer la valeur d’une corrélation dans une population d’où l’échantillon étudié provient. La valeur de la corrélation est donnée à la fin de la liste des informations qui apparaissent suite à l’activation de la fonction.Sur la base de travaux antérieurs, Hopkins et al. (2009) ont fait une proposition de classification pour qualifier la valeur du coefficient de corrélation qui serait obtenue dans le cadre d’une relation linéaire. Cette proposition est montrée dans le Tableau 4.2 :\nTableau 4.2: Termes caractérisant la taille de l’effet en fonction de la valeur de corrélation obtenue\nTableau 4.2: Termes caractérisant la taille de l’effet en fonction de la valeur de corrélation obtenuePetiteMoyenneGrandeTrès grandeExtrêmement grande0.10.30.50.70.9Pour visualiser le lien que l’peut faire entre la forme du nuage de points et la valeur du coefficient de corrélation de Pearson que l’peut obtenir, la page web proposée par Kristoffer Magnusson (https://rpsychologist.com/correlation) peut être particulièrement intéressante. Cette page web donne la possibilité de faire varier manuellement la valeur du coefficient de corrélation de Pearson pour ensuite voir un nuage de points type correspondant à cette valeur. Faites un essai !À noter que la valeur du coefficient de corrélation de Pearson est très dépendante de la variabilité des données, c’est-à-dire du degré d’étalement des valeurs autour de la tendance centrale (Halperin, 1986). Un premier exemple de l’influence de la variabilité est illustré sur la Figure 4.5. À gauche de la figure, observe un nuage de points représentant une relation obtenue entre deux variables quantitatives dans une population complète. La valeur du coefficient de corrélation de Pearson est ici particulièrement élevée. À droite de la figure, observe exactement les mêmes variables dans la même population que sur le graphique de gauche, mais sur un intervalle dont l’étendue été manuellement restreinte, diminuant ainsi la variabilité pour les deux variables. observe alors une diminution de la valeur du coefficient de corrélation de Pearson. Cet exemple doit faire prendre conscience qu’il faut faire attention lorsqu’cherche à comparer des coefficients de corrélation de Pearson obtenus avec des échantillons différents. En effet, si les variables correspondant respectivement à ces échantillons n’ont pas les mêmes niveaux de variabilité, les valeurs des coefficients de corrélation de Pearson ne seront pas vraiment comparables, en sachant que c’est l’échantillon qui présente la plus grande variabilité qui aura mathématiquement plus de chances de présenter une valeur de coefficient de corrélation de Pearson plus élevée.\nFigure 4.5: Influence de la diminution de la variabilité sur la valeur du coefficient de corrélation de Pearson\nUn deuxième exemple de l’influence de la variabilité sur la valeur du coefficient de corrélation de Pearson est montré sur la Figure 4.6. Les deux graphiques de cette figure montrent exactement les mêmes données, à ceci près que sur le graphique de droite, remplacé en ordonnées une valeur du graphique de gauche pour lui donner la valeur de 10. L’influence de cette simlpe action sur la valeur du coefficient de corrélation de Pearson est nette. Ceci montre qu’il faut faire attention aux valeurs extrêmes qui pourraient grandement influencer la variabilité des données d’une variable et au final la valeur de corrélation obtenue, notamment en présence d’échantillons de taille relativement faible. Dans le cas où la valeur du coefficient de corrélation de Pearson serait très influencée par une valeur, il pourrait être une bonne pratique de calculer la valeur du coefficient de corrélation de Pearson avec et sans cette valeur afin de pouvoir quantifier son influence sur la relation étudiée (Halperin, 1986). Une alternative pourrait être aussi d’étudier la relation à l’aide d’autres types de coefficients que celui de Pearson, tels que celui de Spearman, présenté plus bas. Cet exemple doit faire prendre conscience qu’il n’est pas toujours pertinent de calculer le coefficient de corrélation de Pearson. En ce sens, lorsqu’cherche à inférer la valeur du coefficient de corrélation de Pearson dans la population étudiée, il convient de vérifier certains prérequis, lesquels sont abordés plus loin dans ce livre.\nFigure 4.6: Influence d’une valeur extrême sur la valeur du coefficient de corrélation de Pearson en présence d’un petit échantillon\nUn troisième et dernier exemple de l’influence de la variabilité sur la relation étudiée est montré sur la Figure 4.7. Cet exemple pour de montrer que l’étude d’une relation entre deux variables quantitatives peut aboutir à des conclusions radicalement différentes selon le niveau de variabilité que l’garde dans l’analyse, lequel pouvant dépendre de si l’conserve le groupe entier pour l’analyse, ou si l’sépare les analyses par groupes de caractéristiques. Sur la gauche de la Figure 4.7, le nuage de points représente la relation entre deux variables à l’échelle de l’ensemble du groupe étudié. La variabilité possible pour les deux variables étudiées (V1 et V2 dans l’exemple) est alors maximale. Toutefois, ces données appartiennent en réalité à des sous-groupes distincts (cf. couleurs sur le graphique de droite de la Figure 4.7). L’analyse par groupe diminue la variabilité à la fois pour V1 et V2, donnant lieu alors des relations de sens opposé à celui observé à l’échelle de l’ensemble du groupe. Cette situation correspond à ce qu’appelle un paradoxe de Simpson, lequel se présente lorsque ce qu’peut observer de manière globale est annulé voir inversé lors d’une analyse par sous-groupes. Ici, la grande variabilité associée aux données du graphique de gauche de la Figure 4.7 crée une relation artificiellement et donc faussement positive entre V1 et V2. C’est l’analyse par sous-groupe qui permet de révéler la vraie nature de la relation étudiée.\nFigure 4.7: Influence du niveau d’analyse (groupe entier vs. sous-groupes) sur la corrélation observée entre deux variables quantitatives\nLorsque la relation étudiée ne semble pas linéaire mais s’apparente assez clairement à d’autres fonctions mathématiques, telles que des relations logarithmiques ou polynomiales, il est possible de transformer une des variables, voire les deux, pour rendre la relation linéaire et à nouveau étudiable à l’aide du coefficient de corrélation de Pearson (Halperin, 1986). Toutefois, il est aussi possible de créer des modèles de régression non linéaires afin de regarder si ces modèles correspondent bien aux données. La détermination et la validation d’un modèle non linéaire qui correspondrait bien aux données confirmerait alors que la relation étudiée une forme particulière et potentiellement prédictible. Les procédures pour explorer différents modèles de régression (linéaires et non linéaires) sont abordées au chapitre suivant. Enfin, une dernière alternative possible, pour étudier la relation entre deux variables quantitatives dont les distributions ne permettraient pas d’utiliser correctement le coefficient de corrélation de Pearson, serait l’utilisation de coefficients de corrélation basés sur les rangs, tels que le coefficient de corrélation de Spearman.Le coefficient de corrélation de SpearmanLorsque le coefficient de corrélation de Pearson ne permet pas de caractériser fiablement le degré de relation linéaire entre les valeurs de deux variables (e.g., en présence de valeurs aberrantes au sein d’un échantillon de petite taille), une alternative peut être d’étudier le degré de relation linéaire entre les rangs de ces deux variables. Le rang, c’est le classement (ou la position) d’une observation donnée en fonction de sa valeur. Dans une variable, les observations avec les valeurs les plus faibles seront associées aux rangs les plus bas alors que les observations avec les valeurs les plus élevées seront associées aux rangs les plus élevés. Une illustration de la notion de rang est proposée dans le Tableau 4.3 pour la variable hp du jeu de données mtcars. Dans ce tableau, les lignes ont été ordonnées sur la base des rangs de la variable hp. pourra remarquer que dans le tableau, nous avons ce qu’appelle des ex-aequos, c’est-à-dire que plusieurs observations peuvent présenter les mêmes valeurs, et donc avoir le même rang.\nTableau 4.3: Rangs de la variable hp du jeu de données mtcars\nTableau 4.3: Rangs de la variable hp du jeu de données mtcarshp (valeur)hp (rang)521.0622.0653.0664.5664.5916.0937.0958.0979.010510.010911.011013.011013.011013.011315.012316.512316.515018.515018.517521.017521.017521.018024.018024.018024.020526.021527.023028.024529.524529.526431.033532.0Le fait d’étudier l’existence d’une relation linéaire entre les rangs et non plus entre les valeurs de deux variables permet de s’affranchir de l’influence possible de valeurs très extrêmes, dans l’une et/ou l’autre variable, sur le calcul final de la corrélation. Pour déterminer alors la valeur de la corrélation, une manière de procéder est d’appliquer la méthode de calcul du coefficient de corrélation de Pearson en utilisant non plus les valeurs des variables, mais les rangs correspondants. Cette methode, c’est celle du calcul du coefficient de corrélation de Spearman (rho). Si l’suit stricto sensu cette définition, nous pourrions alors utiliser le code suivant pour avoir le coefficient de corrélation de Spearman :Toutefois, il existe une manière plus directe d’écrire les choses avec la fonction cor, qui contient un argument spécifiquement dédié au calcul du coefficient rho de Spearman :La fonction cor.test permet aussi de calculer le coefficient de corrélation de Spearman en fournissant aussi des informations potentiellement intéressantes pour donner une idée de la significativité statistique de l’estimation de rho dans la population étudiée.Si l’veut produire une représentation graphique qui illustre la valeur de rho, il pourrait être davantage pertinent de non plus montrer un nuage de points à partir des valeurs des variables mises en lien, mais un nuage de points à partir de leurs rangs respectifs (cf. code ci-dessous et Figure 4.8).\nFigure 4.8: Graphique pour le coefficient de corrélation de Spearman\nEn matière d’interprétation, des valeurs de rho positives indiqueront que les deux variables mises en lien tendent à augmenter simultanément, parlera alors de relation monotone positive. Dans le cas inverse, des valeurs négatives indiqueront que les deux variables mises en lien tendent à diminuer simultanément, parlera alors de relation monotone négative. À noter cependant que de par son calcul, la valeur de rho ne permet pas de renseigner sur la forme de relation qu’il pourrait y avoir entre les valeurs des deux variables (e.g., linéaire ou curvilinéaire par exemple). Ceci est illustré sur la Figure 4.9. Sur cette figure, le graphique de gauche montre la relation entre les valeurs des variables \\(X\\) et \\(Y\\), qui est caractérisée par un coefficient de corrélation de Spearman (rho) de 1, indiquant donc que la relation est parfaitement monotone positive, sans préjuger de la forme particulière que pourrait présenter la relation. Pour mieux comprendre pourquoi cette valeur de rho est de 1, le graphique de droite de la figure montre la relation entre les rangs de ces deux variables \\(X\\) et \\(Y\\). voit que la relation entre les rangs est effectivement parfaitement linéaire.\nFigure 4.9: Distinction entre la relation observée entre les valeurs (graphique de gauche) et les rangs (graphique de droite) de deux variables\n","code":"\nggplot(data = mtcars, aes(x = hp, y = mpg)) + \n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"lm\", se = FALSE)\ncor(x = mtcars$hp, y = mtcars$mpg, method = \"pearson\")## [1] -0.7761684\ncor.test(x = mtcars$hp, y = mtcars$mpg, method = \"pearson\")## \n##  Pearson's product-moment correlation\n## \n## data:  mtcars$hp and mtcars$mpg\n## t = -6.7424, df = 30, p-value = 1.788e-07\n## alternative hypothesis: true correlation is not equal to 0\n## 95 percent confidence interval:\n##  -0.8852686 -0.5860994\n## sample estimates:\n##        cor \n## -0.7761684\ncor(x = rank(mtcars$hp), y = rank(mtcars$mpg), method = \"pearson\")## [1] -0.8946646\ncor(x = mtcars$hp, y = mtcars$mpg, method = \"spearman\")## [1] -0.8946646\ncor.test(x = mtcars$hp, y = mtcars$mpg, method = \"spearman\")## \n##  Spearman's rank correlation rho\n## \n## data:  mtcars$hp and mtcars$mpg\n## S = 10337, p-value = 5.086e-12\n## alternative hypothesis: true rho is not equal to 0\n## sample estimates:\n##        rho \n## -0.8946646\nmtcars %>%\n  mutate(hp_rank = rank(hp), mpg_rank = rank(mpg)) %>%\n  ggplot(aes(x = hp_rank, y = mpg_rank)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"analyses-descriptives-bivariées.html","id":"relation-entre-deux-variables-qualitatives","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.2 Relation entre deux variables qualitatives","text":"","code":""},{"path":"analyses-descriptives-bivariées.html","id":"étudier-graphiquement-la-relation-1","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.2.1 Étudier graphiquement la relation","text":"Plusieurs types de graphiques peuvent être envisagés lorsqu’il s’agit de visualiser des données relatives au croisement de deux variables qualitatives. Une première approche consiste à utiliser des graphiques avec barres mises côte-à-côte, comme illustré sur la Figure 4.10, qui été réalisée à partir du jeu de données JointSports, lequel est utilisable après installation et chargement du package vcd. JointSports contient des données résumées d’effectifs mis en lien avec les modalités de différentes variables qualitatives, comme aurait pu l’obtenir avec les fonctions group_by() et summarize() dans les derniers exemples du chapitre précédent. (La différence qu’il y avec ces précédents exemples est qu’ici, l’effectif est désigné par la variable Freq, alors qu’il s’agissait de la variable count auparavant.) Pour information, JointSports contient les données d’une enquête s’étant intéressée, en 1983 et 1985, aux opinions d’étudiants danois de 16 à 19 ans quant à la pratique sportive mixte.\nFigure 4.10: Exemples de diagramme en barres mises côte-à-côte\nPour pouvoir réaliser le graphique de la Figure 4.10, il fallu indiquer dans la fonction ggplot(), grâce à l’argument x =, la variable dont voulait voir les modalités en abscisses, et il fallu renseigner pour les ordonnées, à l’aide de l’argument y =, la variable contenant les effectifs correspondants, le tout toujours à l’intérieur de la fonction aes(). Étant donné que les données à montrer le long de l’axe des ordonnées sont explicitement indiquées avec Freq, il convient d’indiquer à l’intérieur de la fonction geom_bar() l’argument stat = \"identity\", ce qui contraint à déterminer la hauteur des barres en fonction des valeurs de la variable Freq. À l’intérieur de la fonction ggplot(), plus exactement au niveau de la fonction aes(), c’est l’argument fill = opinion qui permis d’indiquer qu’voulait des couleurs de remplissage différentes selon les modalités de la variable opinion. Enfin, c’est grâce à l’argument position = \"dodge\", à l’intérieur de la fonction geom_bar(), que l’pu obtenir des barres mises côte-à-côte, et non pas de manière empilée. Une logique similaire été utilisée pour le graphique B en modifiant le code de telle sorte à ce que la distinction de l’information avec des couleurs différentes se fasse avec la variable gender, et non plus opinion.Les graphiques et B de la Figure 4.10 montrent l’importance de la configuration du graphique en fonction des comparaisons que l’veut principalement faire, et donc du message que l’veut prioritairement délivrer. Un principe qui peut guider la conception du graphique est le fait qu’il est plus facile de comparer des barres qui sont mises juste côte-à-côte. Sur la base de ce principe, le graphique de la Figure 4.10 permet de comparer plus facilement les diverses opinions relevées pour les garçons d’un côté et pour les filles de l’autre, alors que le graphique B permet de comparer plus facilement les réponses provenant des deux genres et cela pour chaque type d’opinion. Comme indiqué par Wilke (2018), les types de graphiques illustrés avec les graphiques et B de la Figure 4.10 peuvent parfois se voir attribuer le reproche que s’il est relativement facile de lire les informations encodées par des positions (cf. ligne de base sur les graphiques), il peut être être difficile de lire les informations encodées par une couleur dont la signification est indiquée en légende, car cela demande un effort mental supplémentaire de garder en tête la signification de la légende lorsqu’lit le graphique. Pour palier ce problème, qui, selon Wilke (2018), est au final une affaire de goût, pourrait utiliser la fonction facet_wrap() pour créer une figure telle que la Figure 4.11. Cette figure reprend la logique du graphique de la Figure 4.10, avec un besoin de légende pour la variable opinion qui n’existe plus car la fonction facet_wrap() permis de montrer les diagrammes en barres pour les deux genres de manière séparée, dans des encarts différents, et avec chacun leur propre axe des abscisses relatif aux modalités de la variable opinion.\nFigure 4.11: Diagrammes en barres côte-à-côte séparés selon une variable qualitative\nDans certains cas, peut vouloir comparer les effectifs relatifs aux modalités d’une première variable qualitative avec des barres mises côte-à-côte, et n’utiliser la seconde variable qualitative que pour avoir un peu d’éléments de contexte “à l’intérieur” des effectifs affichés pour la première variable qualitative. La Figure 4.12 illustre ce cas de figure où la hauteur des barres sert prioritairement à comparer les effectifs relatifs à diverses opinions, et la coloration des barres sert à fournir une idée de la répartition (hommes / femmes dans l’exemple) dans les réponses, sans pourtant avoir l’ambition de comparer cette répartition facilement d’un type d’opinion à un autre.\nFigure 4.12: Exemple de diagramme en barres empilées\nLes graphiques présentés dans cette sous-partie montrent des valeurs d’effectifs, mais selon l’objectif, il pourrait être aussi envisagé d’utiliser ces graphiques pour montrer des proportions. Cela dit, il existe d’autres visualisations possibles des proportions pour visualiser le lien entre deux variables qualitatives. Ces visualisations peuvent être consultées dans l’ouvrage en ligne de Wilke (2018).","code":"\nlibrary(vcd)\n\n# Reconfiguration de l'ordre des modalités de la variable opinion, et calcul \n# des effectifs totaux pour les catégories étudiées\n\nJointSports_new <- \n  JointSports %>%\n  mutate(opinion = fct_relevel(opinion, \n                               \"very bad\", \n                               \"bad\", \n                               \"indifferent\", \n                               \"good\", \n                               \"very good\"),\n         gender = fct_relevel(gender, \"Girl\", \"Boy\")) %>%\n  group_by(gender, opinion) %>%\n  summarize(Freq = sum(Freq))\n\n# Création des graphiques\nA <- \n  ggplot(data = JointSports_new, aes(x = gender, y = Freq, fill = opinion)) +\n  geom_bar(stat = \"identity\",  position = \"dodge\") +\n  scale_fill_brewer(palette = \"Greens\") +\n  theme(legend.position = \"right\") +\n  ggtitle(\"A : Mise en avant de la comparaison des opinions\")\n\nB <- \n  ggplot(data = JointSports_new, aes(x = opinion, y = Freq, fill = gender)) +\n  geom_bar(stat = \"identity\",  position = \"dodge\") +\n  theme(legend.position = \"right\") +  \n  ggtitle(\"B : Mise en avant de la comparaison des genres\")\nggplot(data = JointSports_new, aes(x = opinion, y = Freq)) +\n  geom_bar(stat = \"identity\") +\n  facet_wrap(. ~ gender)\nJointSports_new %>%\n  ggplot(aes(x = opinion, y = Freq, fill = gender)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = Freq), size = 3, position = position_stack(vjust = 0.5))"},{"path":"analyses-descriptives-bivariées.html","id":"étudier-numériquement-la-relation-1","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.2.2 Étudier numériquement la relation","text":"Effectifs et proportionsLorsqu’il s’agit de mener une étude numérique de la relation entre deux variables qualitatives, une première démarche à mettre en oeuvre est de récapituler numériquement les effectifs qui correspondent au croisement des deux variables. Pour cela, la fonction table() intégrée à R de base s’avère très pratique. Cependant, cette fonction requiert d’utiliser le jeu de données initial complet (.e., avec toutes les observations), ce qui n’est pas le cas du jeu de données JointSports que nous avons utilisé précédemment, car ce dernier contient des effectifs déjà récapitulés par modalité de variable. Pour pouvoir illustrer le fonctionnement de la fonction table() avec les informations du jeu de données JointSports, j’ai donc crée un jeu de données complet qui, une fois résumé comme c’est le cas plus haut avec JointSports, donnerait les mêmes résultats. Ce nouveau jeu de données se nomme JointSports_full.Une fois que l’un jeu de données complet sous la main, il est possible de créer ce qu’appelle un tableau de contingence, c’est-à-dire ici un tableau qui récapitule numériquement les effectifs à la croisée des deux variables qui nous intéressent. Pour faire cela, peut utiliser la fonction table() en suivant différentes méthodes montrées ci-dessous. (Le code montré ci-dessous aboutit aux mêmes informations que celles montrées sur la Figure 4.12 ci-dessus.)Un tableau de contingence permet donc de comparer des effectifs en fonction de plusieurs modalités et variables à la fois. Le problème, lorsqu’utilise des effectifs, est que certaines comparaisons peuvent être difficiles à faire lorsque les effectifs totaux liés aux différentes modalités ne sont pas comparables. Par exemple, dans le résultat montré ci-dessus, l’effectif total des filles est de 761 alors que celui des garçons est de 510, ce qui rend difficile la comparaison des garçons et des filles pour les différents types d’opinion recensés dans l’enquête danoise présentée plus haut. C’est pour cela qu’il convient, dans certains cas, de calculer les proportions correspondant à ces différents effectifs. Pour ce faire, peut :Utiliser la fonction prop.table(), qui va convertir en proportions les effectifs montrés plus haut en considérant l’effectif total de tout le tableau :Utiliser la fonction lprop() du package questionr, qui va convertir en proportions les effectifs montrés plus haut en considérant l’effectif total de chaque ligne du tableau :Utiliser la fonction cprop() du package questionr, qui va convertir en proportions les effectifs montrés plus haut en considérant l’effectif total de chaque colonne du tableau :Il convient de noter que les proportions données par ces différentes fonctions doivent être utilisées selon les comparaisons que l’veut faire. L’analyse descriptive consiste alors à voir si, tant d’un point de vue graphique que numérique, observe des différences de scores particulières entre les modalités d’une variable qualitative en fonction des modalités de l’autre variable qualitative. Si l’considère le dernier tableau de résultats ci-dessus, peut par exemple observer une très légère tendance à ce que les garçons soient davantage polarisés, par rapport aux filles, sur des opinions négatives vis-à-vis des pratiques sportives mixtes, alors que les filles seraient légèrement plus polarisées que les garçons sur des opinions positives, ce qui n’empêche pas que, pour les deux genres, il y une polarisation principale sur des opinions neutres à positives.Si les proportions permettent en principe de mieux comparer les effectifs de sous-groupes (e.g., les opinions par groupe de genre dans l’exemple ci-dessus) lorsque les effectifs des groupes parents sont de tailles différentes (comme c’est le cas pour les groupes de genre dans l’exemple ci-dessus), il convient tout de même de faire attention aux conclusions que l’tire lorsqu’s’en tient à une analyse globale, car ces conclusions dépendent de la manière dont les individus des groupes parents sont répartis dans chacun des sous-groupes. Un exemple connu qui permet d’illustrer cette vigilance à avoir lorsqu’étudie le croisement de variables qualitatives est le cas du taux de réussite des femmes à l’université de Berkeley en 1973, qui apparaissait bien inférieur à celui des hommes lorsqu’considérait les taux de réussite par genre à l’échelle de l’ensemble de l’université (Bickel et al., 1975), avec 30.3 % de réussite chez les femmes contre 44.5 % de réussite chez les hommes (cf. Figure 4.13).\nFigure 4.13: Taux de réussite des étudiants femmes et hommes à l’Université de Berkeley en 1973, approche globale (Bickel et al., 1975)\nToutefois, une analyse par département permettait de voir que les taux de réussite des femmes étaient en réalité supérieurs voire nettement supérieurs à ceux des hommes dans la plupart des départements (cf. Figure 4.14).\nFigure 4.14: Taux de réussite des étudiants femmes et hommes à l’Université de Berkeley en 1973, approche par département (Bickel et al., 1975)\nCette situation, qui peut paraître étonnante, illustre à nouveau ce qu’appelle un paradoxe de Simpson. Dans le cas présent, l’apparent paradoxe s’explique par le fait que, contrairement aux hommes, la majorité des femmes avaient candidaté dans des départements qui étaient très sélectifs, c’est-à-dire où le taux de réussite était faible (il l’était aussi pour les hommes). Très peu de femmes avaient candidaté là où les taux de réussite étaient très élevés (pour les femmes comme pour les hommes). Ceci est illustré sur la Figure 4.15. voit bien que la majorité des femmes étaient inscrites dans les départements ici montrés avec les lettres allant de C à F, ces départements étaient associés à des taux de réussite inférieurs à 40 % seulement, que cela soit pour les hommes ou pour les femmes (cf. Figure 4.14).\nFigure 4.15: Distribution des étudiants femmes et hommes par département à l’Université de Berkeley en 1973 (Bickel et al., 1975)\nAutrement dit, les hommes se retrouvaient avec un pourcentage de réussite global bien meilleur que celui des femmes seulement parce que, comparativement aux femmes, les hommes s’étaient en proportion davantage engagés dans les départements où les taux de réussite étaient bien meilleurs.","code":"\n# Création du jeu de données JointSports_full\n\nid <- rep(1 : sum(JointSports$Freq))\nyear <- c(rep(\"1983\", 656), rep(\"1985\", 615))\ngrade <- c(rep(\"1st\", 350), rep(\"3rd\", 306), rep(\"1st\", 354), rep(\"3rd\", 261))\ngender <- c(rep(\"Boy\", 134), rep(\"Girl\", 216), rep(\"Boy\", 115), \n            rep(\"Girl\", 191),  rep(\"Boy\", 157), rep(\"Girl\", 197), \n            rep(\"Boy\", 104), rep(\"Girl\", 157))\nopinion <- c(\n  rep(\"very good\", 31), rep(\"good\", 51), rep(\"indifferent\", 38), \n  rep(\"bad\", 10), rep(\"very bad\", 4), \n  rep(\"very good\", 103), rep(\"good\", 67), rep(\"indifferent\", 29), \n  rep(\"bad\", 15), rep(\"very bad\", 2), \n  rep(\"very good\", 23), rep(\"good\", 39), rep(\"indifferent\", 36), \n  rep(\"bad\", 15), rep(\"very bad\", 2), \n  rep(\"very good\", 61), rep(\"good\", 72), rep(\"indifferent\", 39), \n  rep(\"bad\", 16), rep(\"very bad\", 3), \n  rep(\"very good\", 41), rep(\"good\", 67), rep(\"indifferent\", 35), \n  rep(\"bad\", 12), rep(\"very bad\", 2), \n  rep(\"very good\", 77), rep(\"good\", 80), rep(\"indifferent\", 27), \n  rep(\"bad\", 10), rep(\"very bad\", 3), \n  rep(\"very good\", 31), rep(\"good\", 31), rep(\"indifferent\", 31), \n  rep(\"bad\", 4), rep(\"very bad\", 7), \n  rep(\"very good\", 52), rep(\"good\", 70), rep(\"indifferent\", 28), \n  rep(\"bad\", 4), rep(\"very bad\", 3)\n  )\n\nJointSports_full <- \n  data.frame(id = id, \n             year = year, \n             grade = grade, \n             gender = gender, \n             opinion = opinion) %>%\n  mutate(opinion = fct_relevel(opinion, \n                               \"very bad\", \n                               \"bad\", \n                               \"indifferent\", \n                               \"good\", \n                               \"very good\"))\n# 1ère méthode\ntab <- \n  with(JointSports_full,\n       table(opinion, gender))\n\n# 2ème méthode\ntab <- table(JointSports_full$opinion, JointSports_full$gender)\n\n# Visualisation du tableau de contingence\ntab##              \n##               Boy Girl\n##   very bad     15   11\n##   bad          41   45\n##   indifferent 140  123\n##   good        188  289\n##   very good   126  293\nround(prop.table(tab) * 100, digits = 2)##              \n##                 Boy  Girl\n##   very bad     1.18  0.87\n##   bad          3.23  3.54\n##   indifferent 11.01  9.68\n##   good        14.79 22.74\n##   very good    9.91 23.05\nlibrary(questionr)\nlprop(tab)##              \n##               Boy   Girl  Total\n##   very bad     57.7  42.3 100.0\n##   bad          47.7  52.3 100.0\n##   indifferent  53.2  46.8 100.0\n##   good         39.4  60.6 100.0\n##   very good    30.1  69.9 100.0\n##   All          40.1  59.9 100.0\nlibrary(questionr)\ncprop(tab)##              \n##               Boy   Girl  All  \n##   very bad      2.9   1.4   2.0\n##   bad           8.0   5.9   6.8\n##   indifferent  27.5  16.2  20.7\n##   good         36.9  38.0  37.5\n##   very good    24.7  38.5  33.0\n##   Total       100.0 100.0 100.0"},{"path":"analyses-descriptives-bivariées.html","id":"relation-entre-une-variable-quantitative-et-une-variable-qualitative","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.3 Relation entre une variable quantitative et une variable qualitative","text":"Lorsqu’analyse une variable quantitative en fonction d’une variable qualitative, peut avoir des données quantitatives qui sont non appariées (étude de type -subject design en anglais) ou appariées (étude de type within-subject design en anglais). Avoir des données non appariées signifie que les données quantitatives correspondant aux différentes modalités de la variable qualitative étudiée ne sont pas liées. Un exemple simple, pour ce premier cas, peut être l’analyse de la taille des individus en fonction du sexe. Dans ce cas, les données quantitatives de taille pour les personnes de sexe masculin, de sexe féminin, et de sexe indéterminé, proviendront forcément d’individus différents et ne formeront donc pas des paires. Les cas de données appariées se retrouvent dans les études dans lesquelles plusieurs individus sont évalués plusieurs fois dans des conditions similaires ou différentes et que l’cherche à comparer. En sciences du sport, un exemple relativement classique est de tester la performance d’endurance (variable quantitative) en ayant pris (condition de test) ou non (condition contrôle) une substance potentiellement ergonénique, la prise de substance ou non étant les modalités d’une même variable qualitative de type condition. Dans ce cas là, tous les individus auront des données dans les deux conditions et ces données seront donc appariées (dépendantes).Étant donné que les contraintes graphiques et les statistiques à calculer diffèrent selon que l’est en présence de () deux groupes (1 variable quantitative x 1 variable qualitative avec 2 modalités) ou (ii) trois groupes et plus (1 variable quantitative x 1 variable qualitative avec 3 modalités ou plus), en particulier lorsque les données sont appariées, les procédures graphiques et calculatoires présentées ci-après sont distinguées selon ces deux grands cas de figure.","code":""},{"path":"analyses-descriptives-bivariées.html","id":"comparaison-de-deux-groupes-de-données","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.3.1 Comparaison de deux groupes de données","text":"","code":""},{"path":"analyses-descriptives-bivariées.html","id":"étudier-graphiquement-la-relation-2","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.3.1.1 Étudier graphiquement la relation","text":"Lorsque l’cherche à explorer la relation qu’il peut y avoir entre une variable quantitative et une variable qualitative, il peut être intéressant de visualiser la distribution de la variable quantitative en fonction de chaque modalité de la variable qualitative. Pour faire cela, il été proposé dans la littérature d’user de graphiques appelés raincloud plots qui combinent les avantages de plusieurs techniques graphiques et statistiques et par là même pallient les manques ou défauts inhérents à chacune de ces techniques (Allen et al., 2019). Ces raincloud plots utilisent :Les données individuelles (rain), qui permettent de bien voir les différences individuelles, les outliers, et des patterns de distribution éventuellement inattendus ;Des aires montrant les densités de probabilité (clouds), qui permettent de donner une idée relativement précise des distributions (chose difficile à percevoir à partir seulement des observations individuelles) ; à noter que les formes des aires et l’idée qu’elles donnent des distributions dans la population d’intérêt dépendent beaucoup du nombre d’observations disponibles, et leur utilisation pourrait donc se discuter en présence de peu d’observations ;Des boîtes à moustaches, qui permettent de se faire une idée résumée relativement robuste (.e., insensible aux outliers et davantage comparable entre les études) des distributions dans la population d’intérêt (via les médianes et les quartiles) ; selon les cas, d’autres statistiques, comme les moyennes et les écarts-types, peuvent être utilisées à la place ou en plus des boîtes à moustaches (Allen et al., 2019).Parce qu’ils montrent les données individuelles, les raincloud plots vont dans le sens du propos de Weissgerber et al. (2015) qui militent pour la disparition des graphiques en forme de simples bâtons de dynamite, lesquels ayant été souvent utilisés par le passé pour montrer des moyennes et écart-types dans les études. Le problème de ces graphiques en forme de bâtons de dynamite est qu’ils peuvent induire en erreur quant à la réelle forme de la distribution et ils limitent les possibilités du lecteur de juger de la pertinence des choix d’analyses inférentielles qui seraient faits par la suite.Les blocs de code ci-dessous, et les Figures 4.16, 4.17, 4.18, et 4.19, proposent plusieurs options d’utilisation du raincloud plot. Sur ces figures, les aires représentant les densités de probabilité (clouds) nécessitent l’installation et le chargement du package gghalves.Les éléments de code proposés ci-après pour déplacer l’axe des observations individuelles proviennent de la page web https://github.com/tidyverse/ggplot2/issues/4491, et ceux ayant permis de réaliser les clouds proviennent de l’article de Allen et al. (Allen et al., 2019) et de la page web https://github.com/jorvlan/raincloudplots.\nFigure 4.16: Exemples de raindcloud plots à l’horizontale pour des données non appariées\n\nFigure 4.17: Exemples de raindcloud plots à la verticale pour des données non appariées\nLa reproduction des graphiques proposés pour les données appariées (cf. Figures 4.18 et 4.19) nécessite l’installation du package PairedData et le chargement du jeu de données associé Blink. Pour information, Blink contient les données de taux de clignotement des yeux obtenues chez 12 sujets et dans deux conditions différentes : une tâche où il fallait diriger un stylo selon une trajectoire rectiligne (modalité Straight) ; et une tâche où il fallait diriger un stylo selon une trajectoire présentant des oscillations (Oscillating).\nFigure 4.18: Exemples de raindcloud plots à l’horizontale pour des données appariées\n\nFigure 4.19: Exemples de raindcloud plots à la verticale pour des données appariées\nremarque que pour les graphiques des figures 4.18 et 4.19, s’est attaché à montrer les lignes matérialisant le lien entre les données appartenant à un même individu. Cette pratique est intéressante car elle permet de juger, au-delà de l’évolution de la moyenne du groupe d’une condition à l’autre, de la mesure selon laquelle les individus diffèrent dans leur évolution entre les deux conditions testées.Pour pouvoir faire les raincloud plots, il fallu user de plusieurs nouvelles techniques :Pour montrer les aires représentant les densités de probabilité (clouds), il fallu utiliser la fonction geom_half_violin() du package gghalves. L’argument side permet de choisir de quel côté l’veut que l’aire apparaisse (à droite ou à gauche quand est à la verticale). Ces clouds ont parfois été légèrement déplacés à l’aide de l’argument position et de la fonction position_nudge() ou bien resserés à l’aide de la fonction position_dodge().Pour montrer les données individuelles (rain) sans risquer qu’elle ne se superposent de trop, utilisé la fonction geom_point(), l’argument position et la fonction position_jitter(). À l’intérieur de la fonction position_jitter(), l’argument seed (la graine en français) désigne le nombre sur lequel se base l’ordinateur pour générer un résultat pseudo-aléatoire. Quand regarde les graphiques, les données individuelles apparaissent décalées aléatoirement sur le plan vertical (ou horizontal selon l’orientation du graphique), l’importance du décalage étant contrôlée par l’argument width. Cet effet aléatoire est l’intérêt même d’une fonction dite jitter, et cet effet est en réalité prédéfini de telle sorte que si utilise toujours le même numéro de graine (seed), alors obtiendra toujours le même effet aléatoire sur le graphique. Ceci est très important car cela permet d’aligner les lignes individuelles avec les données (les points) individuelles (cf. graphiques B des Figures 4.18 et 4.19) lorsqu’veut générer un mouvement aléatoire des données sur le graphique. peut aussi noter que certains graphiques ont nécessité un décalage manuel de l’axe le long duquel les données individuelles sont montrées, en utilisant la fonction stage() avec l’argument x =, ou en utilisant simplement une valeur numérique pour l’argument x = dans la fonction aes().Pour montrer les moyennes (cf. graphiques des Figures 4.18 et 4.19), il fallu utiliser la fonction stat_summary(). Cette fonction peut servir à visualiser un résumé statistique identifié grâce à l’argument fun. peut choisir sa forme avec l’argument geom. Lorsque l’veut montrer la ligne qui relie les moyennes d’un même groupe dans des conditions différentes, la subtilité consiste à écrire group = 1 à l’intérieur de la fonction aes().Pour montrer les écarts-types (cf. graphiques des Figures 4.18 et 4.19), il fallu là aussi utiliser la fonction stat_summary(), cette fois en utilisant l’argument fun.data avec la valeur mean_sdl, et l’argument fun.args que l’configuré pour déterminer le nombre d’écarts-types que la longueur de la barre d’erreur devait représenter (ici, c’est une fois l’écart-type, obtenu avec mult = 1).","code":"\nlibrary(gghalves)\n# Configuration du jeu de données pour les exemples avec données non appariées\niris_two_species <-\n  iris %>% filter(Species != \"virginica\")\n############################################################\n# Raincloud plots à l'horizontale pour données non appariées\n############################################################\n\n\n# Raincloud plots classiques\nA <-\n  ggplot(data = iris_two_species, aes(x = Species, y = Sepal.Length, \n                                      colour = Species, fill = Species)) +\n  geom_point(aes(x = stage(start = Species, after_scale = x - 0.1)),\n             position = position_jitter(seed = 123, width = 0.08, height = NULL),\n             size = 3, alpha = 0.3) +\n  geom_half_violin(side = \"r\",\n                   position = position_nudge(x = 0.1, y = 0),\n                   size = 1, alpha = 0.4) +\n  geom_boxplot(position = position_nudge(x = 0.1),\n               width = 0.1, colour = \"black\", alpha = 0.3, outlier.shape = NA) +\n  ggtitle(\"A\") +\n  theme(legend.position = \"none\") +\n  coord_flip()\n\n# Raincloud plots avec les nuages sur une même ligne\nB <-\n  ggplot(data = iris_two_species, aes(x = 0, y = Sepal.Length, \n                                      colour = Species, fill = Species)) +\n  geom_point(data = iris_two_species %>% filter(Species == \"setosa\"),\n             aes(x = -0.21),\n             position = position_jitter(seed = 123, width = 0.02, height = NULL),\n             size = 3, alpha = 0.3) +\n  geom_point(data = iris_two_species %>% filter(Species == \"versicolor\"),\n             aes(x = -0.13),\n             position = position_jitter(seed = 123, width = 0.02, height = NULL),\n             size = 3, alpha = 0.3) +\n  geom_half_violin(side = \"r\",\n                   position = position_nudge(x = 0.1, y = 0),\n                   size = 1, alpha = 0.4) +\n  geom_boxplot(position = position_dodge(width = 0.2),\n               width = 0.1, colour = \"black\", alpha = 0.3, outlier.shape = NA) +\n  ggtitle(\"B\") +\n  theme(legend.position = \"right\",\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank()) +\n  coord_flip()\n###########################################################\n# Raincloud plots à la verticale pour données non appariées\n###########################################################\n\n# Raincloud plots classiques\nA <-\n  ggplot(data = iris_two_species, aes(x = Species, y = Sepal.Length, \n                                      colour = Species, fill = Species)) +\n  geom_point(aes(x = stage(start = Species, after_scale = x - 0.1)),\n             position = position_jitter(seed = 123, width = 0.06, height = NULL),\n             size = 3, alpha = 0.3) +\n  geom_half_violin(side = \"r\",\n                   position = position_nudge(x = 0.1, y = 0),\n                   size = 1, alpha = 0.4) +\n  geom_boxplot(position = position_nudge(x = 0.1),\n               width = 0.1, colour = \"black\", alpha = 0.3, outlier.shape = NA) +\n  ggtitle(\"A\") +\n  theme(legend.position = \"none\")\n\n# Raincloud plots avec les nuages sur une même ligne\nB <-\n  ggplot(data = iris_two_species, aes(x = 0, y = Sepal.Length, \n                                      colour = Species, fill = Species)) +\n  geom_point(data = iris_two_species %>% filter(Species == \"setosa\"),\n             aes(x = -0.17),\n             position = position_jitter(seed = 123, width = 0.017, height = NULL),\n             size = 3, alpha = 0.3) +\n  geom_point(data = iris_two_species %>% filter(Species == \"versicolor\"),\n             aes(x = -0.11),\n             position = position_jitter(seed = 123, width = 0.02, height = NULL),\n             size = 3, alpha = 0.3) +\n  geom_half_violin(side = \"r\",\n                   position = position_nudge(x = 0.1, y = 0),\n                   size = 1, alpha = 0.4) +\n  geom_boxplot(position = position_dodge(width = 0.12),\n               width = 0.07, colour = \"black\", alpha = 0.3, outlier.shape = NA) +\n  ggtitle(\"B\") +\n  theme(legend.position = \"right\",\n        axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank())\n# Configuration du jeu de données pour les exemples avec données appariées\nlibrary(PairedData)\ndata(Blink)\n\nBlink2 <-\n  Blink %>%\n  pivot_longer(cols = c(Straight, Oscillating), \n               names_to = \"Condition\", \n               values_to = \"Blink_rate\") %>%\n  mutate(Condition = fct_relevel(Condition, \"Straight\", \"Oscillating\"))\n########################################################\n# Raincloud plots à l'horizontale pour données appariées\n########################################################\n\n# Raincloud plots classiques avec moyennes et écart-types et une ligne reliant \n# les moyennes\nA <-\n  ggplot(data = Blink2, aes(x = Condition, y = Blink_rate,  \n                            colour = Condition, fill = Condition)) +\n  geom_point(aes(x = stage(start = Condition, after_scale = x - 0.15)),\n             position = position_jitter(seed = 123, width = 0.03),\n             size = 3, alpha = 0.3) +\n  geom_half_violin(side = \"r\", \n                   position = position_nudge(0.1), \n                   size = 1, alpha = 0.4) +  \n  geom_boxplot(width = 0.08, colour = \"black\", alpha = 0.3, \n               outlier.shape = NA) + \n  stat_summary(geom = \"errorbar\",\n               fun.data = \"mean_sdl\",\n               fun.args = list(mult = 1),\n               position = position_nudge(0.1), \n               size = 1.1, width = 0.08) +\n  stat_summary(geom = \"point\",\n               fun = \"mean\", \n               position = position_nudge(0.1),\n               size = 3) +\n  stat_summary(aes(group = 1),\n               geom = \"line\",\n               fun = \"mean\", \n               position = position_nudge(0.1),\n               size = 1.5, color = \"grey50\",  linetype = \"dotted\") +\n  ggtitle(\"A\") +\n  theme(legend.position = \"none\") +\n  coord_flip()\n\n\n# Raincloud plots avec les nuages sur une même ligne et les lignes reliant \n# les données individuelles\nB <-\n  ggplot(data = Blink2, aes(x = Condition, y = Blink_rate, \n                            colour = Condition, fill = Condition)) +\n  geom_point(position = position_jitter(seed = 123, width = 0.03),\n             size = 3, alpha = 0.3) + \n  geom_line(aes(group = Subject),\n            position = position_jitter(seed = 123, width = 0.03),\n            size = 2, alpha = 0.3, color = \"gray\") + \n  geom_half_violin(aes(x = 2.2),\n                   side = \"r\",\n                   position = position_dodge(width = 0),\n                   size = 1, alpha = 0.4) +  \n  geom_boxplot(aes(x = 2.1),\n               position = position_dodge(width = 0.1),\n               width = 0.15, colour = \"black\", alpha = 0.3, \n               outlier.shape = NA) +\n  ggtitle(\"B\") +\n  theme(legend.position = \"right\",\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank()) +\n  coord_flip()\n#######################################################\n# Raincloud plots à la verticale pour données appariées\n#######################################################\n\n# Raincloud plots classiques avec moyennes et écart-types et une ligne reliant \n# les moyennes \nA <-\n  ggplot(data = Blink2, aes(x = Condition, y = Blink_rate,  \n                            colour = Condition, fill = Condition)) +\n  geom_point(aes(x = stage(start = Condition, after_scale = x - 0.15)),\n             position = position_jitter(seed = 123, width = 0.03),\n             size = 3, alpha = 0.3) +\n  geom_half_violin(side = \"r\", \n                   position = position_nudge(0.1), \n                   size = 1, alpha = 0.4) +  \n  geom_boxplot(width = 0.08, colour = \"black\", alpha = 0.3, \n               outlier.shape = NA) + \n  stat_summary(geom = \"errorbar\",\n               fun.data = \"mean_sdl\",\n               fun.args = list(mult = 1),\n               position = position_nudge(0.1), \n               size = 1.1, width = 0.08) +\n  stat_summary(geom = \"point\",\n               fun = \"mean\", \n               position = position_nudge(0.1),\n               size = 3,) +\n  stat_summary(aes(group = 1),\n               geom = \"line\",\n               fun = \"mean\", \n               position = position_nudge(0.1),\n               size = 1.5, color = \"grey50\",  linetype = \"dotted\") +\n  ggtitle(\"A\") +\n  theme(legend.position = \"none\")\n\n\n# Raincloud plots avec les nuages sur une même ligne et les lignes reliant \n# les données individuelles\nB <-\n  ggplot(data = Blink2, aes(x = Condition, y = Blink_rate, \n                            colour = Condition, fill = Condition)) +\n  geom_point(position = position_jitter(seed = 123, width = 0.03),\n             size = 3, alpha = 0.3) + \n  geom_line(aes(group = Subject),\n            position = position_jitter(seed = 123, width = 0.03),\n            size = 2, alpha = 0.3, color = \"gray\") + \n  geom_half_violin(aes(x = 2.22),\n                   side = \"r\",\n                   position = position_dodge(width = 0),\n                   size = 1, alpha = 0.4) +  \n  geom_boxplot(aes(x = 2.1),\n               position = position_dodge(width = 0.1),\n               width = 0.15, colour = \"black\", alpha = 0.3, \n               outlier.shape = NA) +\n  ggtitle(\"B\") +\n  theme(legend.position = \"right\",\n        axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank())"},{"path":"analyses-descriptives-bivariées.html","id":"étudier-numériquement-la-relation-2","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.3.1.2 Étudier numériquement la relation","text":"De manière générale, étudier la relation entre une variable quantitative et une variable qualitative revient souvent à comparer les valeurs que prend la variable quantitative en fonction des modalités de la variable qualitative. L’observation de différences de scores entre les modalités pourrait alors indiquer qu’il y un lien entre la variable qualitative (qu’pourrait appeler variable facteur) et la variable quantitative (qu’pourrait appeler variable réponse). À noter que la démonstration d’un lien de cause à effet entre la variable quantitative et la variable qualitative ne pourra être effective que si l’sciemment fait varier les modalités de la variable qualitative pour en observer la conséquence sur les valeurs de la variable quantitative.De prime abord, l’analyse qui pourrait être envisagée pour comparer deux groupes serait d’utiliser simplement la différence entre les moyennes des deux groupes. Toutefois, en se restreignant à cela, il pourrait être difficile de porter un jugement sur la grandeur relative de la différence entre les groupes comparés, qu’pourrait appeler taille d’effet. Il serait également difficile de comparer cette taille d’effet avec celles observées dans d’autres études, en particulier celles traitant de sujets différents, car étant calculée de la sorte, la taille d’effet serait inhérente à la nature des variables investiguées et à la grandeur des valeurs mesurées dans l’étude. Il est donc intéressant, dans ce genre de situation, de standardiser la différence de scores obtenue entre les deux groupes. Dans la littérature, la procédure de standardisation été très développée pour la comparaison de moyennes. Pour cette raison, les sous-parties suivantes qui traitent de la comparaison de deux groupes présentent essentiellement les calculs pour obtenir une taille d’effet en vue de comparer des moyennes. Ces calculs sont repris de l’article de Lakens (2013). Quelques mots seront toutefois donnés pour les situations pour lesquelles ces calculs risqueraient de ne pas être appropriés.","code":""},{"path":"analyses-descriptives-bivariées.html","id":"cas-de-deux-groupes-de-données-indépendants-données-non-appariées","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.3.2 Cas de deux groupes de données indépendants (données non appariées)","text":"\\(d_{s}\\) de CohenClassiquement, l’indice statistique utilisé pour calculer une différence de moyennes de manière standardisée entre deux groupes de données non appariées, à partir d’échantillons de population, est le \\(d_{s}\\) de Cohen. Cette statistique se calcule en faisant la différence entre les moyennes des deux groupes à comparer, et en divisant cette différence par l’écart-type commun des valeurs de chacun des deux groupes. Ce calcul est montré ci-dessous :\\[d_{s} = \\frac{\\overline{X}_{1} - \\overline{X}_{2}} {\\sqrt{\\frac{(N_{1} - 1) s_{1}^2 + (N_{2} - 1) s_{2}^2} {N_{1} + N_{2} - 2}}}\\]Dans R, le \\(d_{s}\\) de Cohen peut être calculé à l’aide de la fonction cohens_d() du package effectsize, qui nécessite d’être installé puis chargé avant d’être utilisé.Dans cet exemple, remarque qu’bien cherché à savoir comment les données de la variable Sepal.Length pouvaient différer en fonction (~) des modalités de la variable Species. Si la fonction nous donne un résultat, il faut toutefois bien faire attention au sens du calcul qui été réalisé. Configurée de la sorte, la fonction cohens_d() réalise la différence modalité 1 - modalité 2. Il faut donc savoir quelle est la modalité 1 et quelle est la modalité 2 dans la variable Species pour ensuite pouvoir interpréter le signe du résultat, qui est négatif ici avec la valeur de -2.10. Pour ce faire, peut utiliser la fonction levels() :L’ordre des modalités affichées nous indique que setosa est la modalité 1, et que versicolor est la modalité 2. (remarque par ailleurs que le jeu de données iris_two_species contient toujours trois modalités à la suite du filtrage précédent du jeu de données iris à l’aide de la fonction filter()). Par conséquent, le \\(d_{s}\\) de Cohen de -2.10 obtenu plus haut indique que la longueur des sépales (Sepal.Length) pour l’espèce setosa est inférieure à celles des sépales de l’espèce versicolor. Cette interprétation est en cohérence avec le graphique réalisé au préalable (cf. Figures 4.16 et 4.17). Si l’avait voulu avoir le calcul inverse (versicolor - setosa), il aurait fallu reconfigurer l’ordre des modalités, par exemple à l’aide de la fonction fct_relevel() du package forcats comme montré à la fin du chapitre 3.Une fois que l’calculé une taille d’effet, il est toujours intéressant d’essayer de formuler un jugement sur l’importance, l’ampleur de l’effet. En ce sens, des valeurs seuils ont été proposées dans la littérature (Cohen, 1988; Lakens (2013)). Ces valeurs, valables pour interpréter des tailles d’effet dans le cadre d’une étude de type -subject design, sont montrées dans le tableau ci-dessous.\nTableau 4.4: Termes pour qualifier la taille d’effet dans le cadre d’une comparaison de moyennes associées à des variables indépendantes\nTableau 4.4: Termes pour qualifier la taille d’effet dans le cadre d’une comparaison de moyennes associées à des variables indépendantesPetitMoyenGrand0.20.50.8Ces valeurs sont relativement arbitraires, et l’interprétation de la taille de l’effet et des conséquences que l’effet peut avoir en pratique ne devrait pas être liée de manière trop rigide à ces valeurs (Lakens, 2013).Il existe également une autre approche pour interpréter une valeur de taille d’effet : l’approche Common Language explanation (Lakens, 2013). Cette approche consiste à faire le lien entre la valeur de la taille d’effet et les probabilités de rencontrer des valeurs similaires ou supérieures dans un groupe en comparaison à un autre. Par exemple, lorsqu’obtient un \\(d_{s}\\) de Cohen de 0.80, cela peut se traduire par le fait qu’il y 71.4 % de chances qu’une personne prise au hasard dans le groupe avec la meilleure moyenne ait un score plus élevé qu’une personne qui serait prise au hasard dans le groupe avec la moyenne la plus basse des deux groupes. Kristoffer Magnusson réalisé une page web qui permet d’utiliser l’approche Common Language explanation pour n’importe quelle valeur de taille d’effet dans le cadre d’une étude de type -subject design. Jetez donc un oeil au lien suivant pour plus de détails : https://rpsychologist.com/cohend.\\(g_{s}\\) de HedgesIl été rapporté, dans la littérature, qu’en réalité le \\(d_{s}\\) de Cohen est relativement biaisé lorsqu’il s’agit d’estimer la taille d’un effet dans la population d’intérêt à partir d’échantillons de population. Autrement dit, à l’échelle de nombreux échantillons, sait qu’avec le \\(d_{s}\\) de Cohen aura en moyenne un écart entre l’effet qu’trouvé et l’effet réel qui existe dans la population. Cela sera d’autant plus vrai lorsque les calculs seront réalisés à partir de petits échantillons (\\(N\\) < 20), selon Hedges et Okins (1985) cités par Lakens (2013). En raison de cela, un autre indice statistique été proposé pour corriger cette erreur systématique qui sera d’autant plus grande que l’échantillon étudié est petit, à savoir le \\(g_{s}\\) de Hedges :\\[g_{s} = d_{s} (1 - \\frac{3}{4(N_{1} + N_{2}) - 9})\\]Dans R, le \\(g_{s}\\) de Hedges lié à un échantillon de population peut être calculé à l’aide de la fonction hedges_g() du package effectsize :Ici, la valeur ne change pas beaucoup par rapport au cas précédent, car l’effectif n’est pas si petit que cela (\\(N_{1}\\) + \\(N_{2}\\) = 100 ici, ce qui fait que la correction appliquée au \\(d_{s}\\) de Cohen est minime).Delta de GlassDans certains cas où l’souhaiterait comparer les scores de deux groupes indépendants pour tester l’effet de deux conditions expérimentales différentes, l’expérimentation en tant que telle peut influencer, au-delà de la moyenne, l’écart-type de la variable réponse dans un des deux groupes. peut se trouver dans ce genre de situation lorsque l’compare les données post-programme d’un groupe entrainé ou traité à celles d’un groupe contrôle. En effet, le groupe entraîné/traité peut voir son écart-type changé au terme d’un programme en raison d’une réponse individuelle hétérogène à ce programme, ce qui ne sera pas en principe le cas du groupe contrôle. Dans ce genre de situations, des indices statistiques autres que le \\(g_{s}\\) de Hedges mériteraient d’être calculés, tels que le delta (\\(\\Delta\\)) de Glass (Lakens, 2013) :\\[\\Delta = \\frac{\\overline{X}_{1} - \\overline{X}_{2}} {s_{2}}\\]Le calcul du \\(\\Delta\\) de Glass est dans l’idée le même que celui du \\(d_{s}\\) de Cohen, sauf que la différence entre les moyennes des deux groupes n’est pas divisée par l’écart-type commun des deux groupes, mais par celui d’un seul des deux groupes, qui serait en principe celui qui représenterait la condition contrôle ou la condition de référence. Une pratique souvent recommandée pour comparer dans ce genre de situation les scores post-programme de deux groupes (un groupe entraîné/traité et un groupe contrôle) serait d’utiliser l’écart-type des scores du groupe contrôle obtenu en pré-programme (Lakens, 2013).Dans R, le \\(\\Delta\\) de Glass lié à un échantillon de population peut être calculé à l’aide de la fonction glass_delta() du package effectsize. Attention, l’écart-type utilisé dans le code suivant est celui de la variable quantitative associée à la modalité 2 de la variable qualitative, qui est toujours versicolor dans cet exemple (exemple dont le contexte n’est certes pas celui d’un programme dont cherche l’effet, mais le principe d’utilisation du code reste le même).Cas particuliersCertaines situations peuvent rendre la comparaison de moyennes non pertinente. C’est par exemple le cas lorsque l’un des deux groupes (voire les deux) présentent des données aberrantes, en particulier en présence de petits échantillons. L’utilisation des moyennes dans ce cas pourrait ne pas être pertinente car ces moyennes ne refléteraient alors pas correctement les tendances centrales (et donc les groupes associés). Dans ces cas là, mieux vaut observer les médianes de chaque groupe et chercher à voir si les distributions sont en décalage ou non.","code":"\nlibrary(effectsize)\ncohens_d(Sepal.Length ~ Species, \n         data = iris_two_species, \n         paired = FALSE, \n         pooled_sd = TRUE)## Cohen's d |         95% CI\n## --------------------------\n## -2.10     | [-2.59, -1.61]\n## \n## - Estimated using pooled SD.\nlevels(iris_two_species$Species)## [1] \"setosa\"     \"versicolor\" \"virginica\"\nhedges_g(Sepal.Length ~ Species, \n         data = iris_two_species, \n         paired = FALSE, \n         pooled_sd = TRUE)## Hedges' g |         95% CI\n## --------------------------\n## -2.09     | [-2.57, -1.60]\n## \n## - Estimated using pooled SD.\nglass_delta(Sepal.Length ~ Species, \n            data = iris_two_species)## Glass' delta |         95% CI\n## -----------------------------\n## -1.80        | [-2.29, -1.31]"},{"path":"analyses-descriptives-bivariées.html","id":"cas-de-deux-groupes-de-données-dépendants-données-appariées","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.3.2.1 Cas de deux groupes de données dépendants (données appariées)","text":"\\(d_{z}\\) et \\(d_{av}\\) de CohenLe calcul classique pour obtenir la taille d’effet désignant l’écart entre deux groupes de données dépendantes est celui du \\(d_{z}\\) (Lakens, 2013), qui est montré ci-dessous :\\[d_{z} = \\frac{\\overline{X} _{diff}}{s_{diff}},\\]\\(\\overline{X} _{diff}\\) désignant la moyenne des différences relatives à chaque pair de valeurs obtenues dans les deux conditions comparées, et \\(s_{diff}\\) désigne l’écart-type de ces différences. Dans R, le \\(d_{z}\\) peut être obtenu à nouveau avec la fonction cohens_d() du package effectsize. Pour illustrer cela, nous allons à nouveau utiliser le jeu de données Blink2 crée plus haut pour les exemples de raincloud plots.Dans R, peut alors calculer \\(d_{z}\\) à nouveau à l’aide de la fonction cohens_d() du package effectsize comme ceci :Toutefois, d’après Lakens (2013), il peut être intéressant de rapporter plutôt un indice de taille d’effet qui ne serait pas influencé par le fait que les données des deux groupes à comparer soient corrélées (car dépendantes), notamment en vue de rendre comparable cette taille d’effet à celles obtenues dans le cadre d’études de type -subject design, pour plus facilement conduire des méta-analyses par la suite par exemple. La recommandation de Lakens (2013) serait alors d’utiliser l’indice \\(d_{av}\\), dont le calcul serait le suivant :\\[d_{av} = \\frac{\\overline{X} _{diff}}{\\sqrt{\\frac{s_{1}^2 + s_{2}^2} {2}}}\\]Ce calcul reviendrait donc à diviser la moyenne des différences par l’écart-type moyen relatif aux deux groupes de données. Pour obtenir \\(d_{av}\\), il est possible de repartir de la fonction cohens_d() et de sa configuration pour des groupes indépendants, mais en indiquant pooled_sd = FALSE dans la fonction, comme ci-dessous :En effet, que l’fasse la moyenne des différences (ce qui serait attendu pour le présent calcul) ou la différence entre deux moyennes (ce qui est finalement fait par la fonction telle que configurée ci-dessus), cela ne change rien avec des données appariées. Le numérateur \\(\\overline{X} _{diff}\\) reste donc correctement calculé même avec cette configuration de fonction qui est faite initialement pour des groupes indépendants. Le fait d’indiquer pooled_sd = FALSE change le calcul du dénominateur que nous avions rencontré initialement pour le calcul de \\(d_{s}\\), cela pour obtenir le calcul attendu pour le \\(d_{av}\\).\\(g_{av}\\) de HedgesComme dans le cas de l’étude de groupes indépendants, \\(d_{av}\\) et ses dérivés sont biaisés. Il peut donc être à nouveau préférable de calculer le \\(g_{av}\\) de Hedges avec la fonction hedges_g() configurée comme ceci :Toutefois, comme le rappelle Lakens (2013), le \\(g_{av}\\) de Hedges ne serait pas complètement non biaisé.Cas particuliersLorsque la présence de valeurs aberrantes peut fausser le calcul de la taille d’effet que l’cherche à caractériser dans la population étudiée, une première idée pourrait être ici de faire la différence des médianes des deux groupes. Toutefois, comme le rappellent Weissegerber et al. (2015), cette approche n’est mathématiquement pas correcte dans le cas présent. La bonne méthode est de calculer la médiane des différences. Le code ci-dessous présente donc un exemple de visualisation graphique et de calcul de médiane des différences, ici à partir du jeu de données Blink.\nFigure 4.20: Exemple de figure pour montrer la médiane des différences dans le cas de données appariées\n","code":"\ncohens_d(Blink_rate ~ Condition, data = Blink2, paired = TRUE, pooled_sd = TRUE)## Cohen's d |       95% CI\n## ------------------------\n## 2.81      | [1.58, 4.27]\ncohens_d(Blink_rate ~ Condition, \n         data = Blink2, \n         paired = FALSE, \n         pooled_sd = FALSE)## Cohen's d |       95% CI\n## ------------------------\n## 1.53      | [0.58, 2.44]\n## \n## - Estimated using un-pooled SD.\nhedges_g(Blink_rate ~ Condition, \n         data = Blink2, \n         paired = FALSE, \n         pooled_sd = FALSE)## Hedges' g |       95% CI\n## ------------------------\n## 1.47      | [0.56, 2.35]\n## \n## - Estimated using un-pooled SD.\n# Configuration du jeu de données\nBlink2 <-\n  Blink %>%\n  mutate(Difference = Straight - Oscillating) %>%\n  pivot_longer(cols = c(Straight, Oscillating, Difference), \n               names_to = \"Condition\", \n               values_to = \"Blink_rate\") %>%\n  mutate(Condition = fct_relevel(Condition, \n                                 \"Straight\", \n                                 \"Oscillating\", \n                                 \"Difference\"))\n  \n# Visualisation graphique\nA <-\n  ggplot(data = Blink2 %>% filter(Condition != \"Difference\"), \n         aes(x = Condition, y = Blink_rate,  \n             colour = Condition, \n             fill = Condition)) +\n  geom_point(position = position_jitter(seed = 123, width = 0.03),\n             size = 3, alpha = 0.3) + \n  geom_line(aes(group = Subject),\n            position = position_jitter(seed = 123, width = 0.03),\n            size = 2, alpha = 0.3, color = \"gray\") + \n  geom_boxplot(width = 0.08, colour = \"black\", alpha = 0.3, \n               outlier.shape = NA) +\n  ggtitle(\"A\") +\n  theme(legend.position = \"top\",\n        axis.title.x = element_blank(),\n        axis.ticks.x = element_blank())\n  \nB <-\n  ggplot(data = Blink2 %>% filter(Condition == \"Difference\"), \n         aes(x = Condition, y = Blink_rate)) +\n  geom_point(position = position_jitter(seed = 123, width = 0.03),\n             size = 3, alpha = 0.3) +\n  geom_boxplot(width = 0.08, colour = \"black\", alpha = 0.3, \n               outlier.shape = NA) +\n  scale_x_discrete(labels = \"Straight - Oscillating\") +\n  labs(x = \"\") +\n  ggtitle(\"B\") + \n  theme(legend.position = \"none\")\n# Code pour calculer la médiane des différences\n Blink %>%\n  mutate(Difference = Straight - Oscillating) %>%\n  summarise(median_diff = median(Difference))##   median_diff\n## 1           7"},{"path":"analyses-descriptives-bivariées.html","id":"comparaison-de-trois-groupes-de-données-et-plus","chapter":"Chapitre 4 Analyses descriptives bivariées","heading":"4.3.3 Comparaison de trois groupes de données et plus","text":"…","code":""},{"path":"régressions.html","id":"régressions","chapter":"Chapitre 5 Régressions","heading":"Chapitre 5 Régressions","text":"","code":""},{"path":"régressions.html","id":"régression-linéaire-simple","chapter":"Chapitre 5 Régressions","heading":"5.1 Régression linéaire simple","text":"Il est possible d’investiguer l’existence d’une relation linéaire entre deux variables en modélisant cette relation à l’aide d’une équation de type \\(Y = aX + b\\), et en calculant certaines statistiques qui rendent compte du niveau de correspondance entre le modèle linéaire et les données étudiées. Ces statistiques sont le coefficient de détermination, noté \\(R^2\\), et l’erreur typique d’estimation, dont gardera l’acronyme anglais \\(SEE\\) (pour Standard Error Estimate).","code":""},{"path":"régressions.html","id":"le-coefficient-de-détermination","chapter":"Chapitre 5 Régressions","heading":"5.1.1 Le coefficient de détermination","text":"Le coefficient de détermination, noté \\(R^2\\), représente la part de variance de la variable \\(Y\\) expliquée par le modèle linéaire. La formule de ce coefficient peut être présentée comme ceci :\\[R^2 = 1 - {\\frac {Var(\\hat{Y} - Y) } {Var(Y)}} = 1 - {\\frac {Var(RES)} {Var(Y)}}, \\]\noù \\(\\hat{Y}\\) désigne les prédictions faites à partir du modèle, et \\(Y\\) désigne les valeurs réelles que l’cherché à prédire à partir du modèle. Le terme \\(\\hat{Y} - Y\\) (ou \\(RES\\)) doit se concevoir comme une variable contenant toutes les différences \\(\\hat{Y}{} - Y{}\\) qu’appelle des résidus. Ainsi, le terme \\({Var(\\hat{Y} - Y) }\\) désigne la variance des résidus (ou encore la variance des erreurs). Au final, le ratio \\({\\frac {Var(\\hat{Y} - Y) } {Var(Y)}}\\) traduit la part de variance non expliquée (non détectée) par le modèle, et le \\(R^2\\) se calcule en faisant 1 moins ce ratio. (À noter qu’peut trouver ailleurs d’autres manières de présenter ce coefficient \\(R^2\\), avec des formules initiales différentes, mais mathématiquement, les méthodes restent équivalentes).La Figure 5.1 illustre la notion de résidu et ce qu’elle représente dans le calcul du \\(R^2\\). Sur cette figure, les points représentent les valeurs \\(Y{}\\) en fonction des valeurs \\(X{}\\), la ligne bleue représente le modèle de régression linéaire (.e., toutes les valeurs \\(\\hat{Y}{}\\) qui seraient prédites à partir du modèle et des valeurs \\(X{}\\)), et les segments rouges représentent les résidus (.e., les différences qu’à chaque fois entre \\(\\hat{Y}{}\\) et \\(Y{}\\)). Pour un modèle donné, plus ces segments rouges seront nombreux et grands, plus cela signifiera que les erreurs de prédiction du modèle sont nombreuses et grandes, que la part de variance non expliquée par le modèle est grande, et que la valeur du \\(R^2\\) pour ce modèle est éloignée de 1. Ainsi, le coeffient \\(R^2\\) peut aller de la valeur 0 (signifiant que le modèle n’explique aucune variation de \\(Y\\)), à la valeur de 1 (signifiant que le modèle explique toute les variations de \\(Y\\)). Plus la valeur de \\(R^2\\) d’un modèle linéaire se rapprochera de 1, plus cela suggérera que la relation étudiée est effectivement linéaire. Le coefficient de détermination \\(R^2\\) associé à un modèle linéaire est mathématiquement lié au coefficient de corrélation de Pearson (\\(r\\)), \\(r\\) étant la racine carrée du \\(R^2\\).\nFigure 5.1: Illustration d’un modèle linéaire (en bleu) et de ses résidus (en rouge)\nPour déterminer le \\(R^2\\) d’un modèle linéaire avec le logiciel R, il faut d’abord créer ce modèle à l’aide de la fonction lm(). L’usage simple de cette fonction, tel que montré ci-dessous, permet de prendre connaissance des coefficients du modèle. Dans les résultats issus de l’exemple ci-dessous, l’ordonnée à l’origine est située sous (Intercept), et le coefficient directeur est situé sous le nom de la variable \\(X\\) du modèle, ici hp. Dans l’exemple ci-dessous, qui utilise le jeu de données mtcars, le modèle nous indique que lorsque hp vaudra 0, l’estimation de mpg vaudra 30.09886, et que pour chaque augmentation d’unité de hp, aura une diminution de -0.06823 unité de mpg.Pour plus de confort dans l’écriture de la suite du code, il peut être intéressant d’associer le modèle crée avec la fonction lm() à un nom. Pour accéder aux différentes informations statistiques résumant le modèle, peut alors utiliser la fonction summary() avec le nom choisi pour le modèle.Dans la liste d’informations données suite à l’activation du code, retrouve notamment l’ordonnée à l’origine (Intercept) et le coefficient directeur (hp), et peut trouver le coefficient \\(R^2\\) en face de l’écriture Multiple R-squared. peut aussi y voir l’erreur typique d’estimation en face de l’écriture Residual standard error.","code":"\nlm(mpg ~ hp, data = mtcars)## \n## Call:\n## lm(formula = mpg ~ hp, data = mtcars)\n## \n## Coefficients:\n## (Intercept)           hp  \n##    30.09886     -0.06823\nmodel <- lm(mpg ~ hp, data = mtcars)\nsummary(model)## \n## Call:\n## lm(formula = mpg ~ hp, data = mtcars)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -5.7121 -2.1122 -0.8854  1.5819  8.2360 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(>|t|)    \n## (Intercept) 30.09886    1.63392  18.421  < 2e-16 ***\n## hp          -0.06823    0.01012  -6.742 1.79e-07 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 3.863 on 30 degrees of freedom\n## Multiple R-squared:  0.6024, Adjusted R-squared:  0.5892 \n## F-statistic: 45.46 on 1 and 30 DF,  p-value: 1.788e-07"},{"path":"régressions.html","id":"lerreur-typique-destimation","chapter":"Chapitre 5 Régressions","heading":"5.1.2 L’erreur typique d’estimation","text":"L’erreur typique d’estimation, ou \\(SEE\\), représente l’écart-type des erreurs d’estimation associées à l’utilisation d’un modèle. Son unité est donc celle de la variable \\(Y\\) que l’cherché à prédire avec le modèle. La formule suivante permet d’expliquer son calcul à partir de données prélevées sur un échantillon :\\[ SEE = \\sqrt{\\frac{\\sum_{=1}^{N}(RES{} - \\overline{RES})^2}{N-2}}, \\]où \\(RES{}\\) désigne le résidu pour une observation donnée, \\(\\overline{RES}\\) la moyenne des résidus, et \\(N\\) le nombre d’observations.","code":""},{"path":"régressions.html","id":"graphique-récapitulatif","chapter":"Chapitre 5 Régressions","heading":"5.1.3 Graphique récapitulatif","text":"Il est possible d’extraire l’ordonnée à l’origine et la pente (.e., le coefficient directeur) du modèle de régression, le coefficient \\(R^2\\), et la statistique \\(SEE\\), à partir de la liste d’informations obtenue avec la fonction summary(). Le code ci-dessous montre comment faire cela avec l’exemple concernant le jeu de données mtcars :Une fois extraites et associées à des noms, ces informations peuvent ensuite être réutilisées avec le package ggplot2 et la fonction annotate() pour compléter le graphique initial avec des informations statistiques (cf. Figure 5.2).\nFigure 5.2: Régression linéaire avec les informations correspondantes\nLa leçon du quartet d’AnscombeEncore une fois, lorsqu’étudie un phénomène, ici l’existence d’une relation linéaire, il est important de d’abord faire un graphique montrant les données. Cette première étape graphique est importante car les valeurs numériques qui peuvent être obtenues pour le coefficient \\(R^2\\) (et donc aussi pour le coefficient de corrélation de Pearson), et la statistique \\(SEE\\), ne peuvent à elles seules garantir l’aspect linéaire d’une relation. Un exemple qui permet d’illustrer cela est le quartet d’Anscombe (1973). Il s’agit de quatre jeux de données dont les représentations graphiques sont montrées sur la Figure 5.3.\nFigure 5.3: Le quartet d’Anscombe\nBien que d’aspects très différents, ces jeux de données montrent pourtant des variables en abscisses qui ont toutes la même moyenne (\\(\\overline{X} = 9\\)) et le même écart-type (\\(s_{X} = 3.32\\)), des variables en ordonnées qui ont elles aussi la même moyenne (\\(\\overline{Y} = 7.5\\)) et le même écart-type = (\\(s_{Y} = 2.03\\)), et des modèles de régression linéaire qui présentent tous la même équation (\\(Y = 0.5X + 3\\)), le même coefficient de détermination (\\(R^2 = 0.67\\)) et la même erreur typique d’estimation (\\(SEE = 1.24\\)). Pour autant, observe que seul le premier jeu de données (cf. graphique de la Figure 5.3) est associé à un modèle linéaire vraiment pertinent. En effet, le graphique B montre bien que la relation n’est pas linéaire mais plutôt quadratique, le graphique C montre que la régression est anormalement influencée par une valeur extrême, et le graphique D montre qu’il n’y en réalité pas de relation linéaire entre les deux variables et que celle-ci ne semble exister numériquement que grâce à une seule valeur très extrême. Autant le graphique C invite à conserver une analyse de régression linéaire avec éventuellement certains ajustements à réaliser, autant les graphiques B et D indiquent qu’un modèle linéaire n’est pas pertinent en l’état pour caractériser la relation entre les deux variables étudiées.","code":"\n# Extraction de l'ordonnée à l'origine\nintercept <- summary(model)$coefficients[1]\nintercept## [1] 30.09886\n# Extraction du coefficient directeur\nslope <-  summary(model)$coefficients[2]\nslope## [1] -0.06822828\n# Extraction du R2\nR2 <- summary(model)$r.squared\nR2## [1] 0.6024373\n# Extraction de SEE\nSEE <- summary(model)$sigma\nSEE## [1] 3.862962\nggplot(data = mtcars, aes(x = hp, y = mpg)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  annotate(\"text\", label = bquote(paste(\"Y = \", .(round(slope, digits = 3)), \"X + \", \n                                        .(round(intercept, digits = 3)), \" ; \",\n                                        R^2, \" = \", .(round(R2, digits = 3)), \n                                        \" ; SEE = \", .(round(SEE, digits = 3)))), \n           x = 50, y = 35, hjust = 0, size = 5)"},{"path":"références.html","id":"références","chapter":"Références","heading":"Références","text":"Allen, M., Poggiali, D., Whitaker, K., Marshall, T. R., & Kievit, R. . (2019). Raincloud plots: multi-platform tool robust data visualization. Wellcome Open Res, 4, 63. https://doi.org/10.12688/wellcomeopenres.15191.1Anscombe, F. J. (1973). Graphs Statistical Analysis. Stat, 27(1), 17‑21.Bickel, P. J., Hammel, E. ., & O’Connell J, W. (1975). Sex Bias Graduate Admissions: Data Berkeley. Science, 187(4175), 398‑404. https://doi.org/10.1126/science.187.4175.398Chatellier, G., & Durieux, P. (2003). Moyenne, Médiane, et Leurs Indices de Dispersion : Quand Les Utiliser et Comment Les Présenter Dans Un Article Scientifique ? Rev Mal Respir, 20(3), 421‑424. https://doi.org/RMR-06-2003-20-3-0761-8425-101019-ART17Dart, T., & Chatellier, G. (2003). Comment Décrire La Distribution d’une Variable ? Rev Mal Respir, 20(6), 946‑951. https://doi.org/RMR-12-2003-20-6-0761-8425-101019-ART19Gonzales, V. ., & Ottenbacher, K. J. (2001). Measures central tendency rehabilitation research: mean? J Phys Med Rehabil, 80(2), 141‑146. https://doi.org/10.1097/00002060-200102000-00014Grenier, E. (2007). Quelle Est La « Bonne » Formule de l’écart-Type ? Revue MODULAD, 37, 102‑105.Halperin, S. (1986). Spurious correlations–causes cures. Psychoneuroendocrinology, 11(1), 3‑13. https://doi.org/10.1016/0306-4530(86)90028-4Hopkins, W. G., Marshall, S. W., Batterham, . M., & Hanin, J. (2009). Progressive Statistics Studies Sports Medicine Exercise Science. Med Sci Sports Exerc, 41(1), 3‑13. https://doi.org/10.1249/MSS.0b013e31818cb278Joanes, D. N., & Gill, C. . (1998). Comparing Measures Sample Skewness Kurtosis. Statistician, 47(Part 1), 183‑189. https://doi.org/10.1111/1467-9884.00122Labreuche, J. (2010). Les Différents Types de Variables, Leurs Représentations Graphiques et Paramètres Descriptifs. Sang Thrombose Vaisseaux, 22(10), 536‑543. https://doi.org/10.1684/stv.2010.0541Lakens, D. (2013). Calculating Reporting Effect Sizes Facilitate Cumulative Science: Practical Primer t-Tests ANOVAs. Front Psychol, 4, 863. https://doi.org/10.3389/fpsyg.2013.00863Navarro, D. (2018). Learning Statistics R. UNSW Computational Cognitive Science.Rousselet, G. ., & Wilcox, R. R. (2020). Reaction Times Skewed Distributions: Problems Mean Median. Meta-Psychology, 4, 1‑39. https://doi.org/10.15626/MP.2019.1630Weissgerber, T. L., Milic, N. M., Winham, S. J., & Garovic, V. D. (2015). Beyond Bar Line Graphs: Time New Data Presentation Paradigm. PLoS Biol, 13(4), e1002128. https://doi.org/10.1371/journal.pbio.1002128Wickham, H. (2016). Ggplot2 (2ᵉ éd.). Springer-Verlag.Wickham, H., & Grolemund, G. (2017). R Data Science. O’Reilly.Wilke, C. O. (2018). Fundamentals Data Visualization. O’Reilly Media, Inc. Retrieved https://clauswilke.com/dataviz.","code":""}]
